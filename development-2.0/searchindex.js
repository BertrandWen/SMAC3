Search.setIndex({"docnames": ["advanced_usage/ask_tell", "advanced_usage/callbacks", "advanced_usage/facades", "advanced_usage/index", "advanced_usage/instances", "advanced_usage/multi_objective", "advanced_usage/parallelism", "advanced_usage/reproducability", "advanced_usage/resumption", "advanced_usage/runhistory", "api", "api/smac.acquisition", "api/smac.acquisition.functions", "api/smac.acquisition.functions.abstract_acquisition_function", "api/smac.acquisition.functions.confidence_bound", "api/smac.acquisition.functions.expected_improvement", "api/smac.acquisition.functions.integrated_acquisition_function", "api/smac.acquisition.functions.prior_acqusition_function", "api/smac.acquisition.functions.probability_improvement", "api/smac.acquisition.functions.thompson", "api/smac.acquisition.maximizers", "api/smac.acquisition.maximizers.abstract_acqusition_maximizer", "api/smac.acquisition.maximizers.differential_evolution", "api/smac.acquisition.maximizers.helpers", "api/smac.acquisition.maximizers.local_and_random_search", "api/smac.acquisition.maximizers.local_search", "api/smac.acquisition.maximizers.random_search", "api/smac.callback", "api/smac.constants", "api/smac.facade", "api/smac.facade.abstract_facade", "api/smac.facade.algorithm_configuration_facade", "api/smac.facade.blackbox_facade", "api/smac.facade.boing_facade", "api/smac.facade.hyperband_facade", "api/smac.facade.hyperparameter_facade", "api/smac.facade.multi_fidelity_facade", "api/smac.facade.random_facade", "api/smac.initial_design", "api/smac.initial_design.abstract_initial_design", "api/smac.initial_design.default_design", "api/smac.initial_design.factorial_design", "api/smac.initial_design.latin_hypercube_design", "api/smac.initial_design.random_design", "api/smac.initial_design.sobol_design", "api/smac.intensifier", "api/smac.intensifier.abstract_intensifier", "api/smac.intensifier.abstract_parallel_intensifier", "api/smac.intensifier.hyperband", "api/smac.intensifier.hyperband_worker", "api/smac.intensifier.intensifier", "api/smac.intensifier.stages", "api/smac.intensifier.successive_halving", "api/smac.intensifier.successive_halving_worker", "api/smac.main", "api/smac.main.base_smbo", "api/smac.main.boing", "api/smac.main.smbo", "api/smac.main.turbo", "api/smac.model", "api/smac.model.abstract_model", "api/smac.model.gaussian_process", "api/smac.model.gaussian_process.abstract_gaussian_process", "api/smac.model.gaussian_process.gaussian_process", "api/smac.model.gaussian_process.gpytorch_gaussian_process", "api/smac.model.gaussian_process.kernels", "api/smac.model.gaussian_process.kernels.base_kernels", "api/smac.model.gaussian_process.kernels.hamming_kernel", "api/smac.model.gaussian_process.kernels.matern_kernel", "api/smac.model.gaussian_process.kernels.rbf_kernel", "api/smac.model.gaussian_process.kernels.white_kernel", "api/smac.model.gaussian_process.mcmc_gaussian_process", "api/smac.model.gaussian_process.priors", "api/smac.model.gaussian_process.priors.abstract_prior", "api/smac.model.gaussian_process.priors.gamma_prior", "api/smac.model.gaussian_process.priors.horseshoe_prior", "api/smac.model.gaussian_process.priors.log_normal_prior", "api/smac.model.gaussian_process.priors.tophat_prior", "api/smac.model.multi_objective_model", "api/smac.model.random_forest", "api/smac.model.random_forest.abstract_random_forest", "api/smac.model.random_forest.random_forest", "api/smac.model.random_model", "api/smac.multi_objective", "api/smac.multi_objective.abstract_multi_objective_algorithm", "api/smac.multi_objective.aggregation_strategy", "api/smac.multi_objective.parego", "api/smac.random_design", "api/smac.random_design.abstract_random_design", "api/smac.random_design.annealing_design", "api/smac.random_design.modulus_design", "api/smac.random_design.probability_design", "api/smac.runhistory", "api/smac.runhistory.dataclasses", "api/smac.runhistory.encoder", "api/smac.runhistory.encoder.abstract_encoder", "api/smac.runhistory.encoder.boing_encoder", "api/smac.runhistory.encoder.eips_encoder", "api/smac.runhistory.encoder.encoder", "api/smac.runhistory.encoder.inverse_scaled_encoder", "api/smac.runhistory.encoder.log_encoder", "api/smac.runhistory.encoder.log_scaled_encoder", "api/smac.runhistory.encoder.scaled_encoder", "api/smac.runhistory.encoder.sqrt_scaled_encoder", "api/smac.runhistory.enumerations", "api/smac.runhistory.runhistory", "api/smac.runner", "api/smac.runner.abstract_runner", "api/smac.runner.dask_runner", "api/smac.runner.exceptions", "api/smac.runner.target_function_runner", "api/smac.scenario", "api/smac.utils", "api/smac.utils.configspace", "api/smac.utils.data_structures", "api/smac.utils.logging", "api/smac.utils.multi_objective", "api/smac.utils.subspaces", "api/smac.utils.subspaces.boing_subspace", "api/smac.utils.subspaces.turbo_subspace", "conventions", "examples/1_basics/1_synthetic_function", "examples/1_basics/2_svm_cv", "examples/1_basics/3_ask_and_tell", "examples/1_basics/4_priors", "examples/1_basics/5_full_customization", "examples/1_basics/index", "examples/1_basics/sg_execution_times", "examples/2_multi_fidelity/1_mlp_epochs", "examples/2_multi_fidelity/2_sgd_datasets", "examples/2_multi_fidelity/index", "examples/2_multi_fidelity/sg_execution_times", "examples/3_multi_objective/1_schaffer", "examples/3_multi_objective/index", "examples/3_multi_objective/sg_execution_times", "examples/5_commandline/index", "examples/index", "faq", "getting_started", "glossary", "index", "installation", "license", "minimal_example", "package_overview", "references"], "filenames": ["advanced_usage/ask_tell.rst", "advanced_usage/callbacks.rst", "advanced_usage/facades.rst", "advanced_usage/index.rst", "advanced_usage/instances.rst", "advanced_usage/multi_objective.rst", "advanced_usage/parallelism.rst", "advanced_usage/reproducability.rst", "advanced_usage/resumption.rst", "advanced_usage/runhistory.rst", "api.rst", "api/smac.acquisition.rst", "api/smac.acquisition.functions.rst", "api/smac.acquisition.functions.abstract_acquisition_function.rst", "api/smac.acquisition.functions.confidence_bound.rst", "api/smac.acquisition.functions.expected_improvement.rst", "api/smac.acquisition.functions.integrated_acquisition_function.rst", "api/smac.acquisition.functions.prior_acqusition_function.rst", "api/smac.acquisition.functions.probability_improvement.rst", "api/smac.acquisition.functions.thompson.rst", "api/smac.acquisition.maximizers.rst", "api/smac.acquisition.maximizers.abstract_acqusition_maximizer.rst", "api/smac.acquisition.maximizers.differential_evolution.rst", "api/smac.acquisition.maximizers.helpers.rst", "api/smac.acquisition.maximizers.local_and_random_search.rst", "api/smac.acquisition.maximizers.local_search.rst", "api/smac.acquisition.maximizers.random_search.rst", "api/smac.callback.rst", "api/smac.constants.rst", "api/smac.facade.rst", "api/smac.facade.abstract_facade.rst", "api/smac.facade.algorithm_configuration_facade.rst", "api/smac.facade.blackbox_facade.rst", "api/smac.facade.boing_facade.rst", "api/smac.facade.hyperband_facade.rst", "api/smac.facade.hyperparameter_facade.rst", "api/smac.facade.multi_fidelity_facade.rst", "api/smac.facade.random_facade.rst", "api/smac.initial_design.rst", "api/smac.initial_design.abstract_initial_design.rst", "api/smac.initial_design.default_design.rst", "api/smac.initial_design.factorial_design.rst", "api/smac.initial_design.latin_hypercube_design.rst", "api/smac.initial_design.random_design.rst", "api/smac.initial_design.sobol_design.rst", "api/smac.intensifier.rst", "api/smac.intensifier.abstract_intensifier.rst", "api/smac.intensifier.abstract_parallel_intensifier.rst", "api/smac.intensifier.hyperband.rst", "api/smac.intensifier.hyperband_worker.rst", "api/smac.intensifier.intensifier.rst", "api/smac.intensifier.stages.rst", "api/smac.intensifier.successive_halving.rst", "api/smac.intensifier.successive_halving_worker.rst", "api/smac.main.rst", "api/smac.main.base_smbo.rst", "api/smac.main.boing.rst", "api/smac.main.smbo.rst", "api/smac.main.turbo.rst", "api/smac.model.rst", "api/smac.model.abstract_model.rst", "api/smac.model.gaussian_process.rst", "api/smac.model.gaussian_process.abstract_gaussian_process.rst", "api/smac.model.gaussian_process.gaussian_process.rst", "api/smac.model.gaussian_process.gpytorch_gaussian_process.rst", "api/smac.model.gaussian_process.kernels.rst", "api/smac.model.gaussian_process.kernels.base_kernels.rst", "api/smac.model.gaussian_process.kernels.hamming_kernel.rst", "api/smac.model.gaussian_process.kernels.matern_kernel.rst", "api/smac.model.gaussian_process.kernels.rbf_kernel.rst", "api/smac.model.gaussian_process.kernels.white_kernel.rst", "api/smac.model.gaussian_process.mcmc_gaussian_process.rst", "api/smac.model.gaussian_process.priors.rst", "api/smac.model.gaussian_process.priors.abstract_prior.rst", "api/smac.model.gaussian_process.priors.gamma_prior.rst", "api/smac.model.gaussian_process.priors.horseshoe_prior.rst", "api/smac.model.gaussian_process.priors.log_normal_prior.rst", "api/smac.model.gaussian_process.priors.tophat_prior.rst", "api/smac.model.multi_objective_model.rst", "api/smac.model.random_forest.rst", "api/smac.model.random_forest.abstract_random_forest.rst", "api/smac.model.random_forest.random_forest.rst", "api/smac.model.random_model.rst", "api/smac.multi_objective.rst", "api/smac.multi_objective.abstract_multi_objective_algorithm.rst", "api/smac.multi_objective.aggregation_strategy.rst", "api/smac.multi_objective.parego.rst", "api/smac.random_design.rst", "api/smac.random_design.abstract_random_design.rst", "api/smac.random_design.annealing_design.rst", "api/smac.random_design.modulus_design.rst", "api/smac.random_design.probability_design.rst", "api/smac.runhistory.rst", "api/smac.runhistory.dataclasses.rst", "api/smac.runhistory.encoder.rst", "api/smac.runhistory.encoder.abstract_encoder.rst", "api/smac.runhistory.encoder.boing_encoder.rst", "api/smac.runhistory.encoder.eips_encoder.rst", "api/smac.runhistory.encoder.encoder.rst", "api/smac.runhistory.encoder.inverse_scaled_encoder.rst", "api/smac.runhistory.encoder.log_encoder.rst", "api/smac.runhistory.encoder.log_scaled_encoder.rst", "api/smac.runhistory.encoder.scaled_encoder.rst", "api/smac.runhistory.encoder.sqrt_scaled_encoder.rst", "api/smac.runhistory.enumerations.rst", "api/smac.runhistory.runhistory.rst", "api/smac.runner.rst", "api/smac.runner.abstract_runner.rst", "api/smac.runner.dask_runner.rst", "api/smac.runner.exceptions.rst", "api/smac.runner.target_function_runner.rst", "api/smac.scenario.rst", "api/smac.utils.rst", "api/smac.utils.configspace.rst", "api/smac.utils.data_structures.rst", "api/smac.utils.logging.rst", "api/smac.utils.multi_objective.rst", "api/smac.utils.subspaces.rst", "api/smac.utils.subspaces.boing_subspace.rst", "api/smac.utils.subspaces.turbo_subspace.rst", "conventions.rst", "examples/1_basics/1_synthetic_function.rst", "examples/1_basics/2_svm_cv.rst", "examples/1_basics/3_ask_and_tell.rst", "examples/1_basics/4_priors.rst", "examples/1_basics/5_full_customization.rst", "examples/1_basics/index.rst", "examples/1_basics/sg_execution_times.rst", "examples/2_multi_fidelity/1_mlp_epochs.rst", "examples/2_multi_fidelity/2_sgd_datasets.rst", "examples/2_multi_fidelity/index.rst", "examples/2_multi_fidelity/sg_execution_times.rst", "examples/3_multi_objective/1_schaffer.rst", "examples/3_multi_objective/index.rst", "examples/3_multi_objective/sg_execution_times.rst", "examples/5_commandline/index.rst", "examples/index.rst", "faq.rst", "getting_started.rst", "glossary.rst", "index.rst", "installation.rst", "license.rst", "minimal_example.rst", "package_overview.rst", "references.rst"], "titles": ["Ask-and-Tell Interface", "Callbacks", "Facades", "Advanced Usage", "Instances and Features", "Multi-Objective Optimization", "Parallelism", "Reproducability", "Resumption", "Run-History", "API References", "smac.acquisition", "smac.acquisition.functions", "smac.acquisition.functions.abstract_acquisition_function", "smac.acquisition.functions.confidence_bound", "smac.acquisition.functions.expected_improvement", "smac.acquisition.functions.integrated_acquisition_function", "smac.acquisition.functions.prior_acqusition_function", "smac.acquisition.functions.probability_improvement", "smac.acquisition.functions.thompson", "smac.acquisition.maximizers", "smac.acquisition.maximizers.abstract_acqusition_maximizer", "smac.acquisition.maximizers.differential_evolution", "smac.acquisition.maximizers.helpers", "smac.acquisition.maximizers.local_and_random_search", "smac.acquisition.maximizers.local_search", "smac.acquisition.maximizers.random_search", "smac.callback", "smac.constants", "smac.facade", "smac.facade.abstract_facade", "smac.facade.algorithm_configuration_facade", "smac.facade.blackbox_facade", "smac.facade.boing_facade", "smac.facade.hyperband_facade", "smac.facade.hyperparameter_facade", "smac.facade.multi_fidelity_facade", "smac.facade.random_facade", "smac.initial_design", "smac.initial_design.abstract_initial_design", "smac.initial_design.default_design", "smac.initial_design.factorial_design", "smac.initial_design.latin_hypercube_design", "smac.initial_design.random_design", "smac.initial_design.sobol_design", "smac.intensifier", "smac.intensifier.abstract_intensifier", "smac.intensifier.abstract_parallel_intensifier", "smac.intensifier.hyperband", "smac.intensifier.hyperband_worker", "smac.intensifier.intensifier", "smac.intensifier.stages", "smac.intensifier.successive_halving", "smac.intensifier.successive_halving_worker", "smac.main", "smac.main.base_smbo", "smac.main.boing", "smac.main.smbo", "smac.main.turbo", "smac.model", "smac.model.abstract_model", "smac.model.gaussian_process", "smac.model.gaussian_process.abstract_gaussian_process", "smac.model.gaussian_process.gaussian_process", "smac.model.gaussian_process.gpytorch_gaussian_process", "smac.model.gaussian_process.kernels", "smac.model.gaussian_process.kernels.base_kernels", "smac.model.gaussian_process.kernels.hamming_kernel", "smac.model.gaussian_process.kernels.matern_kernel", "smac.model.gaussian_process.kernels.rbf_kernel", "smac.model.gaussian_process.kernels.white_kernel", "smac.model.gaussian_process.mcmc_gaussian_process", "smac.model.gaussian_process.priors", "smac.model.gaussian_process.priors.abstract_prior", "smac.model.gaussian_process.priors.gamma_prior", "smac.model.gaussian_process.priors.horseshoe_prior", "smac.model.gaussian_process.priors.log_normal_prior", "smac.model.gaussian_process.priors.tophat_prior", "smac.model.multi_objective_model", "smac.model.random_forest", "smac.model.random_forest.abstract_random_forest", "smac.model.random_forest.random_forest", "smac.model.random_model", "smac.multi_objective", "smac.multi_objective.abstract_multi_objective_algorithm", "smac.multi_objective.aggregation_strategy", "smac.multi_objective.parego", "smac.random_design", "smac.random_design.abstract_random_design", "smac.random_design.annealing_design", "smac.random_design.modulus_design", "smac.random_design.probability_design", "smac.runhistory", "smac.runhistory.dataclasses", "smac.runhistory.encoder", "smac.runhistory.encoder.abstract_encoder", "smac.runhistory.encoder.boing_encoder", "smac.runhistory.encoder.eips_encoder", "smac.runhistory.encoder.encoder", "smac.runhistory.encoder.inverse_scaled_encoder", "smac.runhistory.encoder.log_encoder", "smac.runhistory.encoder.log_scaled_encoder", "smac.runhistory.encoder.scaled_encoder", "smac.runhistory.encoder.sqrt_scaled_encoder", "smac.runhistory.enumerations", "smac.runhistory.runhistory", "smac.runner", "smac.runner.abstract_runner", "smac.runner.dask_runner", "smac.runner.exceptions", "smac.runner.target_function_runner", "smac.scenario", "smac.utils", "smac.utils.configspace", "smac.utils.data_structures", "smac.utils.logging", "smac.utils.multi_objective", "smac.utils.subspaces", "smac.utils.subspaces.boing_subspace", "smac.utils.subspaces.turbo_subspace", "&lt;no title&gt;", "Synthetic Function", "Support Vector Machine with Cross-Validation", "Ask-and-Tell Interface", "User Priors over the Optimum", "Full Customization", "Basics", "Computation times", "Multi-Layer Perceptron Using Multiple Epochs", "Stochastic Gradient Descent On Multiple Datasets", "Multi-Fidelity and Multi-Instances", "Computation times", "2D Schaffer Function", "Multi-Objective", "Computation times", "Commandline", "Examples", "F.A.Q.", "Getting Started", "Glossary", "Home", "Installation", "License", "Minimal Example", "Package Overview", "References"], "terms": {"The": [0, 2, 4, 5, 6, 7, 12, 13, 16, 20, 21, 24, 29, 30, 32, 36, 37, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 71, 72, 73, 74, 77, 78, 79, 81, 87, 90, 92, 94, 96, 105, 106, 107, 108, 110, 111, 113, 121, 123, 128, 129, 132, 137, 138, 140, 141, 143, 144], "initi": [0, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 48, 50, 52, 54, 55, 87, 89, 90, 106, 108, 111, 121, 122, 123, 124, 128, 129, 132, 138], "design": [0, 2, 23, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 106, 108, 121, 122, 123, 124, 128, 129, 132, 138], "i": [0, 2, 4, 5, 6, 7, 8, 12, 17, 20, 21, 24, 27, 29, 30, 31, 32, 35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 71, 72, 73, 75, 78, 79, 81, 87, 88, 89, 90, 91, 92, 94, 96, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 121, 122, 123, 124, 128, 129, 132, 137, 138, 139, 140, 141, 142, 144], "alreadi": [0, 12, 13, 45, 50, 92, 105, 137], "part": [0, 20, 21], "us": [0, 2, 4, 5, 6, 7, 12, 13, 19, 20, 21, 23, 24, 29, 30, 31, 32, 34, 35, 37, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 71, 72, 73, 75, 77, 78, 79, 81, 87, 89, 90, 92, 94, 95, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 121, 122, 123, 124, 129, 130, 131, 132, 136, 137, 138, 139, 140, 141, 142, 144], "instead": [0, 5, 54, 55, 65, 66], "optim": [0, 1, 4, 7, 9, 12, 14, 16, 17, 19, 20, 24, 27, 29, 30, 31, 32, 35, 36, 37, 45, 48, 52, 54, 55, 57, 61, 63, 71, 73, 83, 84, 87, 90, 92, 104, 111, 121, 122, 123, 124, 128, 129, 132, 137, 138, 139, 140, 143, 144, 145], "can": [0, 1, 4, 5, 6, 12, 19, 20, 21, 25, 29, 30, 36, 45, 46, 47, 48, 50, 52, 61, 71, 92, 94, 96, 104, 105, 106, 107, 108, 110, 111, 115, 121, 122, 123, 124, 128, 137, 139, 140, 141, 142, 144], "result": [0, 29, 30, 45, 46, 47, 49, 50, 53, 54, 55, 57, 106, 107, 108, 110, 111, 115, 121, 138, 144], "differ": [0, 2, 4, 6, 20, 24, 27, 29, 30, 45, 48, 50, 51, 54, 55, 79, 81, 83, 84, 92, 104, 106, 107, 111, 114, 124, 128, 129, 137, 138, 139], "becaus": [0, 2, 7, 45, 50, 65, 66, 92, 105, 106, 107, 109, 121, 129], "callback": [0, 23, 29, 30, 31, 32, 34, 35, 36, 37], "ar": [0, 2, 4, 5, 6, 7, 12, 13, 15, 20, 23, 24, 27, 29, 30, 34, 36, 37, 38, 39, 45, 46, 48, 50, 52, 53, 54, 55, 59, 60, 61, 62, 63, 65, 66, 71, 73, 79, 81, 92, 94, 95, 105, 106, 107, 108, 110, 111, 113, 115, 116, 121, 123, 124, 128, 129, 137, 138, 139], "ignor": [0, 29, 30, 54, 55, 65, 66, 124, 128, 129], "skip": [0, 45, 46, 50, 92, 94, 96, 104], "trial": [0, 27, 29, 30, 45, 46, 47, 49, 50, 53, 54, 55, 57, 92, 94, 95, 105, 106, 107, 108, 110, 111, 121, 122, 123, 124, 128, 129, 132, 139], "handl": [0, 45, 48, 92, 105, 106, 107, 108, 110], "doe": [0, 7, 12, 19, 23, 29, 36, 45, 50, 87, 90, 106, 108, 137], "onli": [0, 5, 7, 12, 13, 19, 29, 30, 31, 38, 40, 45, 48, 50, 52, 54, 55, 59, 60, 65, 66, 78, 92, 94, 95, 104, 105, 106, 108, 110, 111, 115, 123, 124, 128, 129, 137, 139, 144], "work": [0, 4, 6, 29, 36, 106, 108, 121, 137, 139], "intensifi": [0, 7, 27, 29, 30, 31, 32, 34, 35, 36, 37, 54, 55, 57, 92, 104, 106, 107, 108, 110, 111, 121, 122, 123, 124, 128, 129, 132, 138], "It": [0, 29, 36, 45, 50, 52, 79, 81, 92, 104, 106, 108, 121, 122, 123, 139, 144], "make": [0, 2, 5, 12, 19, 45, 46, 47, 49, 50, 52, 53, 61, 71, 87, 90, 106, 107, 108, 110, 111, 124, 128, 129, 137, 139], "sens": 0, "smac": [0, 1, 2, 3, 5, 6, 8, 9, 121, 122, 123, 124, 128, 129, 132, 136, 137, 138, 139, 140, 141, 143, 144], "advanc": [0, 6], "when": [0, 2, 5, 29, 30, 37, 45, 52, 53, 59, 60, 61, 62, 63, 65, 66, 71, 79, 81, 106, 108, 111, 115, 128, 137, 138, 139], "sh": [0, 53], "reason": [0, 65, 66], "": [0, 6, 8, 20, 24, 25, 29, 32, 45, 46, 47, 49, 50, 53, 61, 63, 71, 73, 92, 105, 106, 107, 108, 110, 111, 121, 122, 123, 124, 128, 129, 137, 139, 144], "heavili": 0, "depend": [0, 7, 29, 30, 32, 54, 55, 57, 59, 60, 83, 84, 106, 109, 111, 122, 137, 138, 141, 144], "budget": [0, 9, 29, 30, 34, 37, 45, 46, 48, 49, 50, 52, 53, 54, 55, 92, 93, 94, 95, 96, 105, 106, 107, 108, 110, 111, 121, 122, 128, 129, 138, 139, 144], "instanc": [0, 2, 29, 30, 31, 32, 34, 35, 36, 37, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 59, 60, 61, 62, 63, 71, 78, 79, 81, 92, 93, 94, 95, 96, 104, 105, 106, 107, 108, 110, 111, 113, 129, 137, 138, 139, 144], "combin": [0, 29, 36, 45, 52, 83, 84, 85, 86, 92, 105, 106, 107, 108, 111, 122, 128, 129, 139, 140], "even": [0, 4, 45, 46, 48, 50, 52, 142], "user": [0, 12, 17, 20, 24, 29, 30, 45, 48, 52, 106, 108, 126, 127, 136], "provid": [0, 1, 2, 6, 23, 45, 52, 59, 78, 92, 104, 106, 108, 121, 122, 123, 124, 128, 129, 132, 136, 137, 138, 143, 144], "have": [0, 1, 6, 20, 24, 29, 36, 37, 45, 46, 47, 92, 104, 105, 106, 107, 108, 110, 124, 129, 137, 141, 142], "wait": [0, 45, 47, 106, 107, 108, 110], "till": 0, "other": [0, 2, 5, 6, 7, 12, 19, 29, 30, 45, 50, 92, 105, 144], "been": [0, 45, 46, 92, 105, 106, 107, 108, 110, 137, 141], "finish": [0, 27, 106, 107, 108, 110, 123, 128, 129], "too": 0, "abil": 1, "easili": [1, 111], "execut": [1, 29, 30, 36, 45, 46, 47, 49, 50, 53, 54, 55, 57, 106, 107, 108, 110, 127, 128, 129, 131, 134, 137, 144], "code": [1, 8, 20, 24, 61, 63, 71, 72, 77, 93, 106, 108, 121, 122, 123, 124, 125, 128, 129, 132, 136, 137, 143], "befor": [1, 12, 13, 20, 24, 25, 27, 29, 30, 37, 45, 48, 50, 52, 61, 71, 87, 90, 94, 96, 106, 107, 108, 110, 128, 137], "insid": [1, 141], "after": [1, 12, 13, 27, 29, 37, 45, 48, 50, 52, 87, 90, 123, 128], "bayesian": [1, 12, 16, 17, 29, 30, 54, 55, 57, 61, 63, 71, 73, 87, 90, 139, 140, 144], "loop": [1, 29, 30, 31, 32, 35, 36, 37, 45, 50, 54, 55, 106, 107], "To": [1, 2, 4, 6, 8, 45, 47, 48, 50, 106, 108, 124, 128, 137, 141], "add": [1, 4, 29, 30, 38, 39, 49, 53, 54, 55, 57, 92, 105, 122, 124, 128, 129, 137, 141], "you": [1, 4, 5, 6, 8, 29, 37, 61, 71, 106, 108, 111, 122, 124, 137, 138, 140, 141, 142, 144], "inherit": [1, 65, 66], "from": [1, 2, 6, 8, 20, 22, 24, 29, 30, 31, 32, 36, 37, 38, 39, 45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 61, 63, 65, 66, 73, 92, 93, 105, 106, 107, 108, 111, 121, 122, 123, 124, 128, 129, 132, 137, 138, 139, 141, 143, 144], "overwrit": [1, 29, 30, 31, 32, 34, 35, 36, 37, 53, 54, 55, 92, 105, 121, 122, 123, 124, 128, 129, 132], "abstract": [1, 12, 13, 20, 21, 27, 29, 30, 45, 46, 54, 55, 59, 60, 61, 62, 73, 79, 80, 83, 84, 87, 88, 94, 95, 106, 107, 108], "method": [1, 12, 13, 20, 21, 27, 29, 30, 36, 45, 46, 48, 50, 52, 54, 55, 57, 59, 60, 65, 66, 67, 72, 73, 77, 79, 81, 106, 107, 108, 110, 124, 128, 129], "afterward": 1, "pass": [1, 4, 5, 6, 29, 30, 45, 52, 54, 55, 79, 81, 94, 95, 106, 107, 108, 110, 111, 115, 116, 121, 124, 128, 129, 137, 138], "ani": [1, 2, 8, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 38, 39, 45, 46, 47, 48, 50, 52, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 105, 106, 107, 108, 110, 121, 124, 137, 142, 144], "facad": [1, 5, 54, 55, 111, 121, 122, 124, 128, 132, 137, 143, 144], "import": [1, 121, 122, 123, 124, 128, 129, 132, 137, 138, 143], "multifidelityfacad": [1, 29, 36, 128, 129, 138], "class": [1, 2, 5, 12, 20, 29, 38, 45, 54, 59, 61, 65, 72, 79, 83, 87, 92, 94, 106, 121, 122, 123, 124, 128, 129], "customcallback": 1, "def": [1, 121, 122, 123, 124, 128, 129, 132, 138, 143], "on_start": [1, 27], "self": [1, 20, 21, 45, 50, 59, 60, 61, 65, 66, 71, 72, 73, 77, 87, 89, 92, 105, 106, 107, 108, 110, 121, 122, 123, 124, 128, 129, 138], "smbo": [1, 27, 29, 30, 36, 45, 47, 50, 54, 83, 84, 86, 87, 88, 89, 90, 91, 92, 104, 106, 107, 108, 110, 139], "none": [1, 2, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 122, 123, 128, 129, 132], "abstractmethod": 1, "on_end": [1, 27], "on_iteration_start": [1, 27], "on_iteration_end": [1, 27], "info": [1, 27, 29, 30, 45, 46, 54, 55, 57, 106, 107, 121, 122, 123, 124, 128, 129, 132], "runinfo": [1, 92, 104, 106, 107, 108], "valu": [1, 5, 12, 13, 14, 15, 17, 18, 19, 27, 29, 30, 36, 37, 45, 48, 51, 52, 54, 55, 57, 59, 60, 61, 63, 65, 66, 71, 73, 79, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 121, 122, 123, 124, 128, 138], "runvalu": 1, "bool": [1, 12, 15, 17, 27, 29, 30, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 61, 63, 65, 66, 71, 79, 81, 87, 88, 89, 90, 91, 92, 105, 106, 107, 108, 110, 111, 115], "we": [1, 2, 5, 6, 12, 19, 20, 21, 29, 37, 45, 47, 50, 61, 71, 73, 106, 107, 121, 122, 123, 124, 128, 129, 136, 137, 138, 140, 141], "just": [1, 5, 29, 37], "do": [1, 4, 5, 8, 12, 19, 29, 37, 45, 47, 49, 50, 53, 106, 108, 124], "simpl": [1, 29, 37, 92, 104, 122, 132, 139], "print": [1, 115, 121, 122, 123, 124, 128, 129, 132], "here": [1, 2, 4, 12, 19, 121, 122, 123, 124, 125, 128, 129, 132, 137, 138, 140], "cours": 2, "itself": 2, "offer": [2, 5, 106, 107, 144], "lot": [2, 129], "choic": [2, 45, 47, 128], "some": [2, 54, 55, 65, 66, 94, 95], "which": [2, 4, 7, 12, 13, 16, 20, 23, 24, 29, 30, 32, 37, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 71, 78, 79, 81, 82, 87, 89, 91, 92, 104, 106, 107, 108, 110, 111, 122, 123, 124, 128, 129, 137, 138, 139, 140], "crucial": [2, 128], "achiev": [2, 141], "peak": 2, "perform": [2, 20, 24, 25, 29, 36, 37, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 79, 81, 92, 105, 106, 107, 111, 129, 137, 138, 139, 140, 143, 144], "luckili": 2, "often": [2, 4, 5, 29, 37, 121, 123, 137], "suffici": 2, "distinguish": 2, "between": [2, 6, 12, 14, 15, 18, 29, 32, 59, 60, 79, 81, 94, 99, 101, 102, 103], "few": [2, 29, 37, 129, 144], "problem": [2, 29, 30, 35, 106, 107, 108, 110, 121, 123, 137, 139, 144], "usag": 2, "easi": 2, "possibl": [2, 12, 17, 45, 48, 65, 66, 111, 129, 138, 144], "sever": [2, 6, 23, 27, 136, 144], "case": [2, 12, 17, 20, 24, 29, 30, 37, 45, 50, 54, 55, 92, 105, 106, 107, 108, 110, 111, 129, 136, 138, 144], "give": [2, 3, 45, 47, 92, 104, 111], "gener": [2, 6, 8, 23, 29, 30, 38, 44, 45, 46, 47, 49, 50, 53, 54, 55, 57, 83, 84, 92, 104, 106, 107, 108, 110, 111, 122, 137, 138, 139, 140], "recommend": [2, 6, 137, 141], "These": [2, 124, 139], "base": [2, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 122, 129, 137, 138, 139, 140, 145], "our": [2, 5, 122, 124, 128, 129, 137, 140], "experi": 2, "technic": 2, "limit": [2, 106, 107, 108, 110, 137, 138, 143], "far": [2, 7, 12, 14, 18, 19, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55], "intend": [2, 29, 30, 106, 108], "complet": [2, 8, 45, 47, 106, 107, 108, 110, 122], "smac4bb": [2, 143], "smac4hpo": [2, 137], "smac4mf": 2, "smac4ac": [2, 9], "paramet": [2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 29, 30, 32, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 121, 122, 123, 124, 128, 129, 138, 139, 140], "low": [2, 29, 37, 144], "medium": 2, "high": 2, "categor": [2, 20, 24, 29, 32, 122, 124, 128, 129, 144], "hyperparamet": [2, 12, 16, 17, 20, 24, 29, 30, 32, 36, 38, 39, 45, 48, 52, 59, 60, 61, 63, 65, 66, 67, 71, 72, 73, 77, 78, 79, 81, 113, 121, 122, 123, 124, 128, 138, 139, 140, 143, 144, 145], "support": [2, 6, 29, 34, 36, 65, 66, 126, 127, 128, 129, 136, 138, 144], "condit": [2, 65, 66, 113, 122, 128, 129, 139], "No": [2, 45, 50, 121, 122, 123, 124, 132], "cv": [2, 122, 124, 128, 129, 139], "ye": [2, 137], "stochast": [2, 130, 131, 136], "object": [2, 4, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 35, 37, 38, 39, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 105, 106, 107, 108, 110, 111, 113, 116, 121, 122, 123, 124, 128, 129, 132, 139, 143, 144], "except": [2, 29, 30, 45, 50, 106, 108, 110, 124], "runtim": [2, 5, 12, 15, 45, 52, 94, 97, 106, 107, 108, 110, 143, 144], "e": [2, 5, 6, 12, 15, 20, 24, 45, 48, 52, 54, 55, 72, 74, 106, 107, 129, 141, 144], "g": [2, 5, 20, 24, 106, 107, 129, 144, 145], "valid": [2, 29, 30, 54, 55, 59, 60, 111, 121, 123, 124, 126, 127, 128, 129, 132, 136, 137, 138, 139, 143], "loss": [2, 83, 84, 85, 86, 106, 110, 129], "multi": [2, 29, 30, 32, 35, 36, 37, 54, 55, 83, 84, 85, 86, 92, 105, 106, 110, 111, 124, 129, 131, 132, 138, 139, 144], "fidel": [2, 29, 30, 36, 54, 55, 92, 105, 111, 128, 129, 138, 139, 144], "search": [2, 12, 17, 20, 24, 25, 29, 32, 35, 36, 37, 121, 123, 138], "strategi": [2, 5, 29, 30, 35, 36, 37, 38, 39, 83, 84], "gaussian": [2, 29, 32, 59, 60, 61, 62, 63, 65, 66, 71, 73, 121, 139, 144], "process": [2, 27, 29, 30, 32, 45, 46, 50, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 71, 73, 92, 104, 106, 107, 110, 111, 121, 129, 137, 138, 139, 144], "gp": [2, 12, 14, 61, 71, 139], "mcmc": [2, 29, 32, 61, 71, 139], "random": [2, 6, 12, 17, 20, 21, 23, 24, 26, 29, 30, 32, 34, 35, 36, 37, 38, 43, 45, 50, 54, 55, 59, 60, 79, 80, 81, 82, 87, 88, 89, 90, 91, 111, 122, 124, 128, 138, 139, 140, 141, 143, 144], "forest": [2, 12, 17, 59, 60, 79, 80, 81, 122, 124, 139, 140, 141, 143, 144], "closest": [2, 128], "implement": [2, 4, 12, 13, 20, 21, 24, 25, 38, 39, 45, 48, 52, 54, 55, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 79, 81, 83, 86, 106, 107, 108, 128, 137], "bohb": [2, 45, 48, 52, 128, 137, 139], "show": [2, 5, 123, 132, 136, 137], "everi": [2, 45, 48, 52, 87, 89, 90, 138], "flexibl": [2, 61, 63, 71, 73, 92, 104, 144], "need": [2, 4, 23, 29, 30, 45, 46, 47, 49, 50, 52, 53, 65, 66, 92, 105, 106, 107, 108, 110, 129, 138], "thi": [3, 4, 5, 6, 12, 13, 20, 21, 24, 27, 29, 30, 36, 37, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 63, 65, 66, 67, 71, 72, 73, 77, 79, 81, 87, 90, 92, 94, 96, 105, 106, 107, 108, 109, 110, 111, 113, 123, 124, 128, 129, 137, 138, 140, 142, 144], "chapter": [3, 139], "more": [3, 45, 46, 47, 48, 50, 106, 107, 108, 138, 141, 143, 144], "detail": [3, 6, 12, 16, 17, 29, 32, 35, 36, 45, 48, 50, 128, 137, 138, 139, 141, 144], "singl": [3, 5, 29, 37, 59, 78, 79, 81, 83, 84, 85, 86, 92, 105, 106, 107, 108, 110, 139, 143], "compon": [3, 29, 30, 36, 59, 60, 61, 62, 63, 71, 79, 81, 138], "want": [4, 5, 6, 8, 12, 19, 29, 37, 122, 124, 128, 129, 137, 138, 140], "cost": [4, 5, 9, 29, 30, 37, 45, 46, 47, 49, 50, 53, 54, 55, 83, 84, 85, 86, 92, 93, 94, 95, 96, 105, 106, 107, 108, 110, 111, 116, 121, 122, 123, 124, 128, 129, 132, 139, 143], "across": [4, 45, 48, 52, 92, 105, 129, 137, 138, 139, 144], "dataset": [4, 111, 122, 124, 128, 130, 131, 136, 137, 144], "subset": [4, 45, 50, 92, 105, 111, 129, 138, 139], "transform": [4, 73, 79, 81, 83, 84, 85, 86, 94, 95, 96, 97, 99, 100, 101, 102, 103, 115, 129], "For": [4, 29, 30, 36, 38, 39, 65, 66, 106, 107, 110, 111, 128, 137, 138, 140], "purpos": [4, 142], "A": [4, 6, 12, 17, 20, 24, 45, 46, 50, 61, 63, 71, 73, 83, 84, 85, 86, 94, 96, 106, 107, 108, 110, 132, 139, 140, 142, 145], "randomli": [4, 20, 24, 29, 30, 37], "select": [4, 29, 30, 31, 37, 38, 39, 41, 45, 48, 49, 50, 52, 53, 92, 105, 106, 107, 139], "target": [4, 5, 6, 29, 30, 45, 46, 48, 50, 52, 53, 54, 55, 59, 60, 79, 81, 92, 105, 106, 107, 108, 109, 110, 111, 121, 122, 124, 128, 129, 137, 139], "function": [4, 5, 6, 20, 21, 23, 24, 27, 29, 30, 31, 32, 35, 36, 37, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 61, 63, 65, 66, 71, 92, 94, 95, 96, 97, 105, 106, 107, 108, 109, 110, 111, 123, 124, 126, 127, 128, 129, 133, 134, 136, 137, 139, 143, 144], "evalu": [4, 6, 12, 13, 20, 21, 29, 31, 37, 38, 39, 40, 43, 45, 46, 47, 49, 50, 52, 53, 65, 66, 87, 88, 89, 90, 91, 92, 94, 96, 105, 106, 110, 121, 122, 123, 128, 129, 132, 137, 139, 143, 144], "access": [4, 45, 50, 65, 66], "your": [4, 5, 111, 128, 129, 137, 139, 141, 143, 144], "predefin": 4, "list": [4, 5, 12, 13, 20, 21, 23, 29, 30, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 59, 60, 61, 62, 63, 65, 66, 71, 78, 79, 81, 83, 84, 85, 86, 87, 88, 92, 94, 95, 96, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 129, 132, 137], "scenario": [4, 5, 6, 8, 12, 17, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 52, 54, 55, 83, 84, 85, 86, 94, 95, 96, 97, 98, 100, 101, 102, 106, 107, 121, 122, 123, 124, 128, 129, 132, 137, 143], "item": [4, 6, 9, 115], "chosen": [4, 29, 32, 128, 136], "individu": [4, 5, 6, 92, 105], "In": [4, 20, 21, 29, 30, 45, 50, 54, 55, 61, 63, 71, 72, 73, 77, 92, 105, 106, 107, 108, 110, 111, 129, 138, 140], "follow": [4, 5, 6, 29, 36, 37, 45, 50, 52, 79, 81, 106, 107, 108, 137, 138, 141, 143, 144], "exampl": [4, 5, 12, 13, 29, 30, 38, 39, 45, 46, 92, 104, 106, 107, 111, 121, 122, 123, 124, 125, 128, 129, 132, 137, 138, 139], "five": [4, 38, 39, 128], "identifi": [4, 49, 53, 111], "its": [4, 6, 29, 31, 32, 35, 36, 45, 46, 61, 65, 66, 71, 121, 122, 139], "id": [4, 92, 105], "0": [4, 5, 6, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 50, 53, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 105, 111, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 134, 137], "1": [4, 6, 12, 13, 14, 15, 18, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 74, 78, 79, 81, 94, 95, 96, 97, 98, 100, 101, 102, 106, 108, 111, 113, 116, 121, 122, 123, 124, 128, 129, 132, 138, 143, 145], "2": [4, 12, 14, 17, 20, 23, 25, 29, 35, 36, 45, 50, 79, 81, 87, 90, 106, 108, 121, 122, 123, 124, 128, 129, 132, 139, 143, 145], "3": [4, 5, 29, 31, 32, 34, 35, 36, 37, 45, 48, 50, 52, 79, 81, 87, 90, 94, 95, 96, 97, 98, 100, 101, 102, 106, 108, 121, 122, 123, 124, 128, 129, 132, 138, 139, 140, 141, 142], "4": [4, 29, 31, 36, 45, 50, 121, 123, 124, 128, 129, 132, 141], "altern": [4, 5, 122, 129, 141, 143], "also": [4, 6, 29, 30, 45, 46, 47, 49, 50, 53, 54, 55, 57, 61, 71, 92, 105, 106, 107, 108, 116, 122, 124, 128, 137, 144], "instance_fil": 4, "addition": [4, 94, 95, 138], "option": [4, 5, 6, 27, 29, 30, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 59, 60, 65, 66, 92, 105, 106, 109, 116, 137], "defin": [4, 12, 17, 20, 21, 24, 29, 30, 35, 51, 54, 55, 57, 73, 92, 104, 106, 107, 111, 121, 122, 123, 124, 128, 129, 138, 143], "those": [4, 29, 31, 32], "expand": [4, 111], "intern": [4, 8, 38, 39, 45, 46, 48, 52, 53, 59, 60, 61, 65, 66, 71, 72, 73, 77, 78, 83, 84, 86, 92, 104, 105, 106, 107, 108, 110, 111, 128, 144], "x": [4, 12, 13, 14, 15, 18, 19, 59, 60, 61, 62, 63, 65, 66, 71, 72, 74, 78, 79, 81, 94, 95, 96, 113, 121, 123, 132], "matrix": [4, 59, 60], "thu": [4, 124, 137], "plai": 4, "role": 4, "train": [4, 27, 29, 36, 45, 52, 54, 57, 59, 60, 61, 62, 63, 71, 79, 81, 94, 95, 111, 121, 122, 123, 124, 128, 129, 138, 139, 143], "underli": 4, "see": [4, 6, 12, 16, 17, 29, 30, 38, 44, 92, 105, 137, 138, 139, 142, 144], "exact": [4, 29, 30], "number": [4, 6, 12, 14, 17, 20, 21, 24, 25, 29, 36, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 71, 73, 79, 81, 87, 88, 89, 90, 91, 92, 104, 106, 107, 108, 110, 111, 122, 123, 124, 128, 129, 139, 143, 144], "sampl": [4, 12, 19, 20, 21, 23, 24, 26, 27, 29, 37, 38, 39, 45, 46, 50, 52, 54, 55, 59, 60, 61, 63, 71, 73, 78, 79, 81, 111, 121, 122, 123, 124, 132, 138, 144], "mean": [4, 5, 29, 34, 36, 37, 59, 60, 61, 63, 71, 72, 74, 76, 78, 79, 81, 83, 85, 92, 105, 111, 122, 124, 128, 129, 137], "each": [4, 6, 12, 17, 20, 23, 25, 29, 30, 45, 46, 47, 48, 50, 52, 54, 55, 61, 63, 71, 83, 84, 86, 87, 91, 92, 105, 106, 108, 111, 138, 139], "instance_featur": [4, 59, 60, 61, 62, 63, 71, 79, 81, 82, 111, 113, 129], "121": 4, "6": [4, 45, 50, 79, 81, 94, 95, 96, 97, 98, 100, 101, 102, 129], "140": 4, "65": 4, "99": 4, "45": [4, 129], "102": 4, "59": 4, "132": [4, 121, 122, 123, 124, 128, 129, 132], "48": [4, 128, 131], "both": [5, 45, 50, 92, 94, 96, 104, 106, 110, 138], "interfac": [5, 6, 126, 127, 136, 139], "exactli": 5, "right": [5, 12, 15, 65, 66], "now": [5, 29, 36, 121, 122, 123, 129, 141], "algorithm": [5, 6, 12, 16, 29, 30, 32, 34, 35, 37, 106, 107, 110, 129, 137, 138, 139, 140, 144], "parego": [5, 83], "christescu": 5, "knowl": 5, "2015": [5, 6, 83, 86], "weight": [5, 12, 17, 20, 24, 124], "sum": [5, 45, 46, 47, 50, 65, 66, 92, 105], "so": [5, 6, 7, 8, 12, 14, 18, 19, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 106, 107, 108, 110, 115, 124, 128], "scalar": [5, 29, 30, 37, 73, 144], "return": [5, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 121, 122, 123, 124, 128, 129, 132, 138, 139, 143], "store": [5, 92, 105, 128], "usual": [5, 106, 109], "runhistori": [5, 6, 27, 29, 30, 31, 32, 35, 36, 37, 45, 46, 47, 49, 50, 53, 54, 55, 57, 123, 132], "recov": 5, "pareto": 5, "front": 5, "later": [5, 49, 53], "basic": [5, 123], "recip": 5, "sure": [5, 61, 71, 87, 90, 106, 107, 108, 109, 137], "dictionari": [5, 92, 105, 114], "contain": [5, 29, 30, 45, 46, 50, 54, 55, 57, 65, 66, 92, 94, 96, 105, 106, 107, 108, 110], "name": [5, 8, 29, 30, 65, 66, 92, 105, 111, 115, 121, 138], "kei": [5, 92, 105], "myobj1": 5, "myobj2": 5, "200": [5, 128], "simpli": [5, 29, 37], "instanti": [5, 29, 30, 32, 45, 47, 52, 139], "via": [5, 6, 20, 22, 26, 45, 46, 54, 55, 106, 107, 108, 141], "multi_object": [5, 132], "argument": [5, 6, 12, 13, 29, 30, 38, 39, 45, 47, 48, 52, 54, 55, 65, 66, 106, 107, 111, 129, 138], "pleas": [5, 6, 12, 19, 29, 31, 32, 35, 36, 37, 45, 48, 137, 138, 140, 141, 142, 144], "set": [5, 6, 8, 29, 30, 36, 37, 38, 39, 45, 48, 49, 50, 52, 53, 87, 89, 91, 92, 94, 96, 104, 105, 106, 110, 111, 115, 116, 124, 128, 129, 137, 139, 141, 144], "run_obj": [5, 143], "qualiti": [5, 45, 52, 139, 143, 144], "custom": [5, 126, 127, 136], "further": [5, 7, 12, 16, 17, 38, 44, 87, 90, 106, 107, 108, 109, 110, 111, 140], "kwarg": [5, 12, 13, 38, 44, 54, 57, 65, 66, 79, 80, 94, 99, 103, 106, 110], "multi_objective_algorithm": [5, 29, 30, 31, 32, 34, 35, 36, 37, 132], "multi_objective_kwarg": 5, "per": [5, 38, 39, 45, 46, 47, 50, 79, 81, 92, 105, 124], "default": [5, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 29, 30, 31, 32, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 86, 87, 90, 91, 92, 94, 95, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 121, 122, 123, 124, 128, 129, 132, 137, 138], "aggreg": [5, 29, 36, 83, 85], "an": [5, 6, 12, 13, 20, 21, 23, 27, 29, 30, 31, 32, 35, 36, 37, 45, 46, 47, 48, 49, 50, 52, 53, 61, 71, 92, 105, 106, 107, 108, 109, 110, 115, 121, 122, 124, 128, 129, 137, 138, 139, 140, 141, 144], "how": [5, 7, 29, 30, 31, 32, 35, 37, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 92, 104, 105, 106, 107, 108, 111, 114, 123, 128, 132, 136, 137, 138, 139], "nice": 5, "plot": [5, 132], "mode": 6, "comput": [6, 7, 12, 13, 14, 15, 16, 18, 54, 55, 72, 73, 77, 92, 105], "resourc": [6, 45, 46, 106, 108, 110], "cpu": [6, 111], "core": [6, 138, 140], "variant": 6, "call": [6, 12, 13, 20, 21, 25, 27, 29, 30, 37, 38, 39, 45, 46, 47, 50, 52, 53, 59, 60, 65, 66, 67, 72, 73, 77, 82, 106, 107, 108, 110, 114, 123, 124, 137], "psmac": [6, 92, 104], "idea": [6, 137, 140], "all": [6, 7, 12, 17, 20, 24, 29, 30, 36, 45, 46, 47, 48, 50, 52, 54, 55, 59, 60, 61, 62, 65, 66, 73, 78, 79, 80, 81, 92, 94, 95, 96, 105, 106, 107, 108, 109, 110, 111, 115, 121, 122, 123, 124, 128, 129, 136, 137, 138], "run": [6, 7, 8, 27, 29, 30, 36, 37, 45, 46, 47, 48, 50, 52, 54, 55, 92, 104, 105, 106, 107, 108, 109, 110, 111, 121, 122, 123, 124, 125, 128, 129, 132, 137, 138, 139], "share": 6, "better": [6, 29, 37, 121, 122, 123, 124, 128, 129, 132, 138, 140, 143], "inform": [6, 29, 30, 36, 38, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 57, 92, 104, 105, 106, 107, 108, 110, 122, 137], "togeth": [6, 12, 19, 29, 37], "note": [6, 29, 36], "commun": [6, 121, 123], "file": [6, 8, 29, 30, 92, 105, 111, 127, 131, 134, 137, 139, 142, 144], "space": [6, 12, 14, 15, 17, 20, 24, 29, 37, 38, 39, 72, 73, 77, 92, 105, 111, 121, 122, 124, 128, 129, 144], "write": 6, "time": [6, 7, 9, 23, 29, 37, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 87, 90, 91, 92, 93, 94, 96, 105, 106, 107, 108, 110, 111, 121, 122, 123, 124, 125, 128, 129, 132, 137, 138], "disk": [6, 92, 104, 105], "read": [6, 8, 92, 105, 139, 141], "requir": [6, 12, 13, 17, 19, 45, 52, 79, 81, 106, 107, 111, 129, 137, 138], "dash": [6, 132], "document": [6, 29, 31, 32, 35, 36, 45, 48, 136, 138, 141], "progress": 6, "ramag": 6, "meta": [6, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 38, 39, 45, 46, 47, 50, 52, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 94, 95, 106, 107, 111, 121, 143], "softwar": [6, 142], "librari": 6, "distribut": [6, 72, 74, 76, 79, 81, 106, 108, 142], "autom": 6, "configur": [6, 7, 12, 13, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 49, 50, 53, 54, 55, 57, 72, 73, 77, 87, 88, 89, 90, 91, 92, 94, 95, 96, 104, 105, 106, 107, 108, 110, 111, 113, 115, 121, 122, 123, 124, 128, 129, 132, 137, 139, 140, 143, 144], "t": [6, 12, 14, 15, 18, 19, 65, 66, 137, 141, 144], "univers": 6, "british": 6, "columbia": 6, "retriev": [6, 20, 24, 129], "http": [6, 12, 14, 16, 23, 38, 44, 45, 52, 83, 86, 140, 141, 142, 145], "open": [6, 137], "ubc": 6, "ca": 6, "collect": [6, 29, 36, 65, 66, 67, 106, 107, 108], "ubcthes": 6, "24": 6, "0167184": 6, "specifi": [6, 8, 20, 21, 24, 29, 30, 31, 32, 35, 37, 45, 48, 52, 54, 55, 59, 60, 61, 63, 65, 66, 72, 76, 111, 113, 121, 128, 129, 138], "two": [6, 20, 24, 45, 52, 79, 81, 129, 137, 138, 140], "shared_model": 6, "true": [6, 29, 30, 31, 35, 45, 46, 47, 49, 50, 53, 54, 55, 57, 61, 63, 65, 66, 71, 79, 81, 92, 105, 111, 115, 121, 122, 123, 124, 128, 129, 132], "input_psmac_dir": 6, "output_path": 6, "activ": [6, 45, 48, 52, 65, 66, 106, 108, 124, 128, 137, 141], "output": [6, 45, 46, 59, 60, 61, 63, 71, 111, 139, 144], "directori": [6, 111, 137], "ha": [6, 20, 21, 38, 39, 65, 66, 106, 108, 141, 144], "start": [6, 7, 27, 29, 30, 37, 54, 55, 61, 71, 83, 84, 86, 106, 108, 128, 129], "mani": [6, 29, 37, 45, 46, 52, 59, 78, 138, 139, 144], "On": [6, 65, 66, 106, 107, 108, 110, 130, 131, 136], "command": [6, 136, 139, 141], "line": [6, 45, 50, 136, 139], "exemplari": 6, "could": [6, 45, 50, 106, 109, 111, 115, 129, 137, 138], "python3": [6, 140, 141], "seed": [6, 8, 9, 20, 21, 22, 24, 25, 26, 29, 30, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 59, 60, 61, 62, 63, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 110, 111, 121, 122, 123, 124, 128, 129, 132, 137, 138, 139], "int": [6, 20, 21, 24, 25, 29, 30, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 105, 106, 107, 108, 110, 111, 113, 115, 121, 122, 123, 124, 128, 129, 132, 138], "smac3": [6, 137, 140, 141], "If": [6, 8, 12, 17, 20, 21, 29, 30, 37, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 61, 65, 66, 71, 78, 79, 81, 87, 90, 92, 94, 95, 105, 106, 108, 111, 115, 116, 122, 129, 137, 138, 140, 141, 142], "verifi": 6, "correct": 6, "find": [6, 121, 122, 123, 138, 139, 144], "verbos": [6, 137], "level": [6, 29, 30, 36, 114, 115], "debug": [6, 49, 53, 137], "grep": 6, "wai": [6, 29, 36, 45, 48, 138], "load": [6, 92, 105, 111, 122], "9": [6, 45, 50, 129, 140, 141], "new": [6, 8, 23, 27, 29, 37, 45, 46, 47, 49, 50, 53, 54, 55, 92, 105, 121, 122, 123, 124, 132, 137, 139], "same": [6, 20, 24, 45, 50, 92, 104, 105, 116, 137], "constructor": 6, "abov": 6, "descript": [6, 45, 52, 137], "ensur": [7, 12, 17, 111, 137], "intensif": [7, 27, 29, 36, 45, 46, 50, 54, 55, 57, 128, 139, 144], "intensifier_percentag": 7, "long": 7, "took": [7, 106, 107, 108, 110], "time_bound": [7, 45, 46, 47, 48, 49, 50, 52, 53], "procedur": [7, 45, 47, 50, 106, 108], "base_smbo": 7, "determin": [7, 29, 30, 45, 46, 47, 49, 52, 53, 61, 65, 66, 71, 106, 110, 137, 144], "whether": [7, 8, 12, 15, 17, 29, 30, 45, 46, 47, 49, 50, 53, 54, 55, 57, 65, 66, 87, 88, 89, 90, 91, 92, 104, 105, 106, 107, 108, 110, 111], "next": [7, 27, 29, 30, 31, 32, 35, 37, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 87, 88, 89, 90, 91, 106, 107, 122, 123], "iter": [7, 20, 21, 23, 24, 25, 27, 29, 30, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 83, 84, 86, 87, 88, 89, 90, 91, 92, 105, 106, 107, 108, 110, 128, 129, 139], "should": [7, 12, 13, 16, 23, 29, 30, 32, 45, 46, 50, 54, 55, 57, 59, 65, 66, 78, 87, 88, 89, 90, 91, 92, 104, 111, 121, 123, 137, 142], "process_result": [7, 45, 46, 47, 49, 50, 53], "hyperparameterfacad": [7, 29, 35, 36, 122, 123, 124, 132, 138], "howev": [7, 128, 129, 137, 138], "sinc": [7, 29, 37, 128, 137], "guarante": [7, 92, 105], "automat": [8, 106, 108], "resum": 8, "where": [8, 12, 13, 17, 20, 24, 29, 37, 45, 50, 129, 137, 138, 139], "left": [8, 12, 15, 54, 55, 57, 65, 66], "off": [8, 29, 30, 138], "wa": [8, 12, 13, 45, 50, 92, 104, 105, 106, 108], "interrupt": 8, "derivid": 8, "output_directori": [8, 111, 138], "state": [8, 45, 46, 50, 54, 55, 83, 84, 86, 87, 90, 92, 94, 95, 105, 122, 137], "chang": [8, 29, 36, 45, 46, 47, 49, 50, 53, 65, 66, 92, 105, 121, 122, 123, 124, 128, 129, 132], "ask": [8, 27, 29, 30, 54, 55, 57, 126, 127, 136], "still": [8, 92, 104, 106, 107, 108, 110, 123, 137], "delet": [8, 106, 108], "old": 8, "affect": [8, 38, 39], "rh": [9, 132], "get_runhistori": 9, "config_id": [9, 92, 93, 105, 132], "instance_id": 9, "statu": [9, 45, 46, 47, 49, 50, 53, 92, 93, 104, 105, 106, 107, 108, 110], "starttim": [9, 92, 93, 105], "endtim": [9, 92, 93, 105], "additional_info": [9, 92, 93, 105, 106, 107, 108, 110], "data": [9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 36, 38, 39, 45, 46, 47, 50, 52, 54, 55, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 104, 105, 106, 107, 111, 121, 122, 124, 128, 129, 139, 143], "config": [9, 29, 30, 38, 39, 45, 46, 47, 50, 54, 55, 92, 93, 105, 106, 107, 108, 110, 111, 113, 121, 122, 123, 124, 128, 129, 132, 138, 139, 141, 143], "ids_config": [9, 92, 105, 132], "abstractacquisitionfunct": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 29, 30, 37, 54, 55], "sourc": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 121, 122, 123, 124, 125, 128, 129, 132, 136], "__call__": [12, 13, 65, 66, 83, 84, 85, 86, 106, 110], "given": [12, 13, 14, 15, 18, 19, 45, 46, 48, 52, 59, 60, 87, 89, 91, 92, 94, 95, 105, 106, 107, 110, 116, 129, 139, 143], "type": [12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 122, 124, 128, 129, 132], "np": [12, 13, 15, 53, 54, 55, 59, 60, 61, 63, 65, 66, 73, 78, 79, 81, 87, 90, 94, 95, 97, 111, 113, 115, 122, 124, 128, 129, 132, 143], "ndarrai": [12, 13, 53, 59, 60, 61, 63, 65, 66, 73, 78, 79, 81, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 113, 115, 129], "n": [12, 13, 19, 45, 50, 54, 55, 57, 61, 63, 71, 73, 106, 108, 141], "get_meta": [12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 38, 39, 45, 46, 47, 50, 52, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 94, 95, 106, 107, 111], "creat": [12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 38, 39, 45, 46, 47, 48, 50, 52, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 94, 95, 106, 107, 108, 122, 124, 128, 129, 137, 141], "dict": [12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 38, 39, 45, 46, 47, 50, 52, 54, 55, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 105, 106, 107, 108, 110, 111, 114, 129, 132], "str": [12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 32, 38, 39, 45, 46, 47, 48, 50, 52, 53, 54, 55, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 105, 106, 107, 108, 110, 111, 114, 129, 132], "updat": [12, 13, 27, 29, 30, 36, 37, 45, 46, 47, 49, 50, 53, 54, 55, 57, 83, 84, 86, 92, 105, 121, 122, 123, 124, 132, 141], "model": [12, 13, 16, 17, 27, 29, 30, 31, 32, 34, 35, 36, 37, 54, 55, 57, 94, 95, 106, 108, 111, 121, 122, 123, 124, 129, 137, 138, 139, 140, 143, 144], "attribut": [12, 13], "calcul": [12, 13, 45, 48, 52, 92, 105, 121, 122, 123, 124, 128], "fit": [12, 13, 59, 82, 138, 142, 143], "maxim": [12, 13, 14, 19, 29, 37, 45, 52, 92, 105], "As": [12, 13, 106, 110, 124], "ei": [12, 13, 15, 29, 31, 32, 35, 36, 144], "current": [12, 13, 29, 30, 37, 45, 46, 47, 49, 50, 53, 54, 55, 61, 63, 87, 91, 92, 94, 95, 104, 105, 139, 141], "fmin": [12, 13], "acqusit": [12, 13, 138], "present": [12, 13, 29, 36], "_updat": [12, 13], "abstractmodel": [12, 13, 29, 30, 59, 60, 61, 62, 78, 79, 80, 82], "addit": [12, 13, 38, 39, 54, 55, 92, 94, 96, 105, 106, 107, 108, 110, 121, 122, 123, 124, 128, 129, 132], "specif": [12, 13, 29, 30, 65, 66, 79, 81, 94, 97, 129, 137], "xi": [12, 15, 18, 19, 29, 31, 32, 35], "log": [12, 14, 15, 29, 30, 45, 46, 47, 49, 50, 53, 61, 63, 72, 73, 76, 77, 79, 81, 94, 97, 100, 101, 122, 124, 128, 129], "fals": [12, 15, 17, 27, 29, 30, 31, 32, 34, 35, 36, 37, 45, 46, 47, 49, 50, 53, 54, 55, 61, 65, 66, 67, 68, 69, 70, 71, 79, 81, 92, 105, 106, 108, 111, 122, 123, 137], "expect": [12, 15, 29, 30, 31, 32, 35, 79, 81, 106, 107, 137, 144], "improv": [12, 15, 18, 29, 31, 32, 35, 138, 144], "mathbb": [12, 15], "max": [12, 15, 116, 122, 128, 129, 143], "f": [12, 15, 18, 61, 63, 71, 72, 73, 74, 121, 122, 123, 124, 128, 129, 132, 140], "mathbf": [12, 14, 15, 18, 19], "f_": [12, 15, 18], "best": [12, 14, 15, 18, 19, 20, 24, 29, 30, 36, 37, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 121, 122, 123, 129, 138, 139], "locat": [12, 15, 137], "float": [12, 14, 15, 17, 18, 19, 20, 24, 29, 30, 38, 39, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 105, 106, 107, 108, 110, 111, 113, 115, 116, 121, 122, 123, 124, 128, 129, 132, 138, 143], "control": [12, 14, 15, 18, 45, 49, 52, 53], "balanc": [12, 14, 15, 18], "explor": [12, 14, 15, 18, 29, 30, 138, 139], "exploit": [12, 14, 15, 18, 29, 30, 36, 138, 139], "eip": [12, 15, 94, 97], "computess": [12, 15], "frac": [12, 15, 18], "r": [12, 15, 45, 50], "integratedacquisitionfunct": [12, 16], "acquisition_funct": [12, 14, 16, 17, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 54, 55, 124], "margin": [12, 16, 59, 60, 61, 63, 78, 79, 81], "over": [12, 14, 16, 17, 18, 19, 29, 36, 45, 46, 47, 50, 54, 55, 57, 59, 60, 61, 71, 78, 79, 81, 87, 90, 91, 92, 105, 106, 110, 126, 127, 136], "integr": [12, 16, 61, 71, 124, 144], "practic": [12, 16, 136], "machin": [12, 16, 126, 127, 136, 140, 141], "learn": [12, 16, 124, 128, 138, 140, 145], "jasper": [12, 16], "snoek": [12, 16, 61, 71], "et": [12, 16, 17, 45, 48, 52, 61, 71, 137, 145], "al": [12, 16, 17, 45, 48, 52, 61, 71, 137, 145], "paper": [12, 16, 140, 145], "nip": [12, 16, 61, 63, 71, 73], "cc": [12, 16], "4522": [12, 16], "pdf": [12, 14, 16, 45, 52, 83, 86, 145], "lcb": [12, 14, 144], "beta": [12, 14, 124], "lower": [12, 14, 72, 77, 92, 105, 124, 144], "confid": [12, 14, 29, 37, 45, 50, 144], "bound": [12, 14, 72, 77, 92, 105, 113, 116, 144], "mu": [12, 14, 18, 19, 124], "sqrt": [12, 14, 132], "beta_t": [12, 14], "sigma": [12, 14, 18, 19, 72, 76, 124], "d": [12, 14], "text": [12, 14, 140], "input": [12, 14, 49, 53, 59, 60, 61, 63, 73, 78, 79, 81, 94, 96, 98, 115, 121, 123, 139, 143, 144], "dimens": [12, 14, 59, 60, 121, 122, 123], "point": [12, 14, 20, 21, 24, 59, 60, 61, 63, 78, 79, 81, 132], "tradeoff": [12, 14], "refer": [12, 14, 38, 44, 45, 48, 52, 136, 137, 139, 140], "ucb": [12, 14], "arxiv": [12, 14, 140, 145], "org": [12, 14, 121, 122, 123, 124, 128, 129, 132, 140, 142, 145], "0912": [12, 14], "3995": [12, 14], "pi": [12, 18, 144], "probabl": [12, 18, 29, 35, 54, 55, 72, 73, 77, 87, 89, 91, 144], "p": [12, 18, 72, 74], "geq": [12, 18], "phi": [12, 18], "incumb": [12, 18, 29, 30, 35, 36, 37, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 92, 93, 105, 121, 122, 123, 124, 128, 129, 132, 139], "cdf": [12, 18], "standard": [12, 18, 59, 60, 72, 76, 124], "normal": [12, 18, 45, 50, 61, 63, 71, 72, 76, 83, 84, 85, 86, 92, 105, 116, 124], "prioracquisitionfunct": [12, 17, 124], "decay_beta": [12, 17, 124], "prior_floor": [12, 17], "1e": [12, 17, 65, 66, 67, 68, 69, 70, 79, 81, 124, 138], "12": [12, 17, 45, 50], "discret": [12, 17, 124], "discrete_bins_factor": [12, 17], "10": [12, 17, 20, 24, 25, 29, 31, 32, 35, 36, 38, 39, 40, 41, 42, 43, 45, 50, 61, 63, 79, 81, 121, 122, 123, 124, 128, 132, 141, 143], "prior": [12, 17, 20, 24, 65, 66, 67, 68, 69, 70, 126, 127, 136], "optimum": [12, 17, 94, 95, 126, 127, 136], "pibo": [12, 17, 145], "augment": [12, 17], "belief": [12, 17, 124], "carl": [12, 17], "hvarfner": [12, 17, 145], "_": [12, 17, 29, 34, 123, 129], "decai": [12, 17], "factor": [12, 17, 45, 48, 52, 87, 91], "solid": [12, 17, 124], "empir": [12, 17, 45, 46, 47, 49, 50, 53, 54, 55, 92, 105, 139], "found": [12, 17, 29, 30, 54, 55, 87, 90, 121, 137, 140], "n_trial": [12, 17, 38, 39, 111, 121, 122, 123, 124, 128, 129, 132], "lowest": [12, 17, 92, 105], "non": [12, 17, 45, 48, 52, 65, 66, 128, 129, 137], "neg": [12, 17], "bin": [12, 17], "densiti": [12, 17], "contin": [12, 17], "trigger": [12, 17, 45, 50, 106, 109], "avoid": [12, 17], "patholog": [12, 17], "remov": [12, 17, 20, 24], "rf": [12, 17, 139], "surrog": [12, 17, 27, 29, 30, 31, 32, 35, 36, 37, 54, 55, 57, 59, 60, 78, 94, 95, 111, 121, 122, 138, 139, 144], "piecewis": [12, 17], "constant": [12, 17, 87, 90, 128, 129], "well": [12, 17, 45, 46, 106, 107, 121, 122, 123, 124, 144], "behav": [12, 17, 137], "multipl": [12, 17, 29, 30, 35, 37, 38, 39, 45, 48, 52, 59, 78, 92, 105, 111, 124, 130, 131, 136, 137, 138, 139, 144], "allow": [12, 17, 45, 48, 111], "thompson": [12, 144], "randomsearch": [12, 19, 20, 26, 29, 37], "localandsortedrandomsearch": [12, 19, 20, 24, 29, 31, 32, 35, 36], "math": [12, 19, 73], "mathcal": [12, 19], "consist": [12, 19, 20, 21, 124, 128, 129, 140], "abstractacquisitionmaxim": [20, 21, 22, 24, 25, 26, 29, 30], "configspac": [20, 21, 22, 23, 24, 25, 26, 59, 60, 61, 62, 63, 71, 79, 81, 82, 92, 105, 111, 121, 122, 123, 124, 128, 129, 132, 138, 143], "challeng": [20, 21, 22, 23, 24, 25, 26, 29, 30, 32, 35, 36, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 87, 88, 106, 107, 121, 122, 123, 124, 128, 129, 132], "5000": [20, 21, 22, 24, 25, 26, 129], "order": [20, 21, 45, 47, 48, 52, 94, 95, 111], "subclass": [20, 21, 29, 30, 65, 66], "_maxim": [20, 21], "must": [20, 21, 23, 59, 60, 65, 66, 72, 73, 74, 77, 78, 106, 107, 111, 128, 138, 141], "configurationspac": [20, 21, 23, 24, 25, 59, 60, 61, 62, 63, 71, 92, 105, 121, 122, 123, 124, 128, 129, 132, 139, 143, 144], "previous_config": [20, 21], "n_point": [20, 21], "random_design": [20, 21, 23, 29, 30, 31, 32, 34, 35, 36, 37, 54, 55], "previou": [20, 21, 24, 29, 30, 92, 105, 121, 124, 137], "_challeng": [20, 21], "abstractrandomdesign": [20, 21, 23, 29, 30, 37, 54, 55, 87, 88, 89, 90, 91], "challengerlist": [20, 21, 23], "interleav": [20, 21, 23, 24, 29, 30, 31, 32, 35, 87, 88, 89, 90, 91], "scheme": [20, 21, 106, 107], "next_iter": [20, 21, 87, 88, 89, 90, 91], "end": [20, 21, 27, 45, 50], "differentialevolut": [20, 22], "get": [20, 22, 26, 45, 47, 65, 66, 106, 108, 115, 121, 122, 123, 124, 128, 129, 141], "candid": [20, 22, 26, 29, 30, 36, 45, 52, 54, 55, 57], "solut": [20, 22, 26, 29, 30, 54, 55, 57, 137], "differentialevolutionsolv": [20, 22], "scipi": [20, 22, 38, 44], "localandsortedpriorrandomsearch": [20, 24], "uniform_configspac": [20, 24], "max_step": [20, 24, 25], "n_steps_plateau_walk": [20, 24, 25], "local_search_iter": [20, 24, 29, 32, 35], "prior_sampling_fract": [20, 24], "5": [20, 24, 29, 31, 32, 35, 36, 37, 45, 50, 65, 68, 79, 81, 94, 95, 96, 97, 98, 100, 101, 102, 106, 108, 121, 122, 123, 124, 128, 129, 132, 140, 143], "local": [20, 24, 25, 29, 35, 45, 47, 94, 96, 106, 108], "accord": [20, 24, 87, 89, 91], "sort": [20, 24, 29, 35], "main": [20, 24, 29, 37, 106, 108, 140], "one": [20, 23, 24, 29, 37, 45, 52, 54, 55, 61, 71, 92, 94, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 123, 124, 129, 137, 144], "normalfloathp": [20, 24], "uniform": [20, 24, 124], "version": [20, 24, 137, 141], "origin": [20, 24, 45, 47, 72, 73, 77, 92, 93, 105, 137, 140], "localsearch": [20, 24, 25], "maximum": [20, 24, 25, 45, 46, 47, 49, 50, 53, 79, 81, 87, 89, 90, 111], "step": [20, 24, 25, 29, 36, 61, 71, 106, 110, 128, 129], "dure": [20, 24, 25, 29, 37, 45, 50, 79, 81, 92, 104, 137], "plateau": [20, 24, 25], "walk": [20, 24, 25], "termin": [20, 24, 25, 29, 36, 106, 108], "ratio": [20, 24, 79, 81], "taken": [20, 24, 94, 95], "oppos": [20, 24], "defaut": [20, 24], "vectorization_min_obtain": [20, 25], "vectorization_max_obtain": [20, 25], "64": [20, 25, 141], "minim": [20, 25, 45, 46, 48, 50, 52, 87, 89, 138], "neighbor": [20, 25], "obtain": [20, 25, 61, 63, 73], "onc": [20, 25, 29, 37, 45, 48, 52, 124, 128, 141], "vector": [20, 25, 94, 95, 96, 126, 127, 136], "tune": [20, 25, 45, 50, 61, 71, 124], "reduc": [20, 23, 25, 59, 60, 61, 62, 63, 71, 79, 81, 106, 108, 123], "overhead": [20, 25], "challenger_callback": 23, "modulus_design": 23, "modulusrandomdesign": [23, 87, 90], "second": [23, 54, 55, 57, 106, 108, 110, 111, 114, 121, 122, 123, 124, 125, 128, 129, 132], "necessari": [23, 29, 36, 45, 46, 47, 49, 50, 53], "hundr": 23, "never": [23, 138], "look": [23, 29, 37, 137], "callabl": [23, 29, 30, 45, 46, 47, 49, 50, 53, 106, 107], "without": [23, 142, 144], "closur": 23, "www": [23, 83, 86], "programiz": 23, "com": [23, 140, 141], "python": [23, 61, 63, 71, 73, 106, 110, 121, 122, 123, 124, 125, 128, 129, 132, 136, 137, 140, 141, 144], "program": [23, 92, 104, 142], "modulu": [23, 54, 55, 87, 90], "stage": [27, 45, 46, 47, 49, 50, 53], "on_ask_end": 27, "intent": [27, 45, 50], "on_ask_start": 27, "on_next_configurations_end": 27, "essenti": 27, "acquisit": [27, 29, 30, 31, 32, 35, 36, 37, 54, 55, 57, 61, 71, 94, 97, 124, 144], "on_next_configurations_start": 27, "on_tell_end": 27, "stat": [27, 29, 30, 38, 44, 54, 55, 57, 106, 107, 123], "ad": [27, 65, 66, 92, 105, 113, 128, 141], "gracefulli": 27, "stop": [27, 111, 128], "on_tell_start": 27, "abstractfacad": [29, 30, 31, 32, 35, 37, 132], "target_funct": [29, 30, 31, 32, 34, 35, 36, 37, 106, 107, 132, 138], "acquisition_maxim": [29, 30, 31, 32, 34, 35, 36, 37, 54, 55], "initial_design": [29, 30, 31, 32, 34, 35, 36, 37, 54, 55, 122, 124, 128], "runhistory_encod": [29, 30, 31, 32, 34, 35, 36, 37, 54, 55], "logging_level": [29, 30, 31, 32, 34, 35, 36, 37], "top": [29, 30, 45, 49, 52, 53], "backend": [29, 30], "organ": [29, 30], "separ": [29, 30], "manner": [29, 30], "suit": [29, 30], "variou": [29, 30], "pipelin": [29, 30, 138], "With": [29, 30], "either": [29, 30, 61, 71, 92, 105, 106, 110, 137, 138, 141], "explicitli": [29, 30, 106, 108], "get_": [29, 30], "bo": [29, 30, 31, 32, 35, 37, 94, 96, 139, 144], "them": [29, 30, 94, 99, 101, 102, 103, 106, 108, 128, 139], "latter": [29, 30], "svm_cv": [29, 30], "py": [29, 30, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 134], "abstractrunn": [29, 30, 54, 55, 106, 107, 108, 110], "basemodel": [29, 30], "initialdesign": [29, 30, 54, 55], "randomdesign": [29, 30, 31], "abstractintensifi": [29, 30, 45, 46, 47, 50, 53], "abstractmultiobjectivealgorithm": [29, 30, 37, 83, 84, 85, 86], "runhistoryencod": [29, 30, 31, 32, 37, 94, 96, 98, 99, 100, 101, 102, 103], "path": [29, 30, 111, 115, 138], "yaml": [29, 30], "yml": [29, 30], "inconsist": [29, 30, 121], "setup": [29, 30, 37, 137], "behaviour": [29, 30], "trialinfo": [29, 30, 45, 46, 47, 49, 50, 53, 54, 55, 57, 92, 93, 106, 107, 108, 110], "static": [29, 30, 31, 32, 34, 35, 36, 37, 111], "get_acquisition_funct": [29, 30, 31, 32, 35, 37, 124], "trade": [29, 30, 138], "get_acquisition_maxim": [29, 30, 31, 32, 35, 37], "get_initial_design": [29, 30, 31, 32, 35, 36, 37, 122, 124, 128], "warm": [29, 30], "abstractinitialdesign": [29, 30, 38, 39, 40, 41, 42, 43, 44], "get_intensifi": [29, 30, 31, 32, 34, 35, 36, 37, 123, 124], "hash": [29, 30, 111], "continu": [29, 30, 32, 36, 92, 105, 121, 122, 123, 124, 128, 140, 144], "get_model": [29, 30, 31, 32, 35, 37], "get_multi_objective_algorithm": [29, 30, 31, 32, 35, 37], "get_next_configur": [29, 30, 45, 46, 47, 49, 50, 53, 54, 55, 57], "choos": [29, 30, 32, 45, 46, 49, 53, 54, 55, 57, 61, 71, 128], "suggest": [29, 30, 54, 55, 57, 106, 109], "get_random_design": [29, 30, 31, 32, 35, 37], "get_runhistory_encod": [29, 30, 31, 32, 35, 37], "encod": [29, 30, 31, 32, 35, 37], "prepar": [29, 30, 31, 32, 35, 37, 45, 46, 94, 95], "abstractrunhistoryencod": [29, 30, 94, 95, 97, 98], "get_target_function_budget": [29, 30, 45, 46, 50, 52, 53], "get_target_function_inst": [29, 30, 45, 46, 50, 52, 53], "get_target_function_se": [29, 30, 45, 46, 50, 52, 53], "tell": [29, 30, 54, 55, 57, 126, 127, 136], "save": [29, 30, 54, 55, 57, 92, 104, 105, 111, 138], "describ": [29, 30, 54, 55, 57], "trialvalu": [29, 30, 45, 46, 47, 49, 50, 53, 54, 55, 57, 92, 93, 105, 106, 107, 108, 110, 123], "relev": [29, 30, 54, 55, 57], "regard": [29, 30, 54, 55, 57], "than": [29, 30, 37, 45, 50, 54, 55, 72, 73, 74, 79, 81, 111, 121, 122, 123, 124, 128, 129, 132], "highest": [29, 30, 36, 45, 48, 52, 54, 55, 92, 105], "real": [29, 30, 45, 48, 52, 54, 55, 106, 107, 108, 110], "averag": [29, 30, 54, 55, 92, 105, 128], "algorithmconfigurationfacad": [29, 31, 138], "check": [29, 31, 32, 35, 36, 45, 50, 87, 88, 89, 90, 91, 92, 105, 106, 107, 111, 141], "additional_config": [29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 124], "defaultinitialdesign": [29, 31, 37, 38, 40], "min_challeng": [29, 31, 32, 34, 35, 36, 37, 45, 46, 47, 48, 50, 52], "min_config_cal": [29, 31, 32, 35, 37, 45, 46, 50], "max_config_cal": [29, 31, 32, 35, 37, 45, 46, 50, 123, 124], "2000": [29, 31, 45, 46, 50], "intensify_percentag": [29, 31, 32, 35, 37, 45, 50], "n_tree": [29, 31, 35, 79, 81], "bootstrap": [29, 31, 35, 79, 81], "ratio_featur": [29, 31, 35, 79, 81], "8333333333333334": [29, 31, 79, 81], "min_samples_split": [29, 31, 35, 79, 81], "min_samples_leaf": [29, 31, 35, 79, 81], "max_depth": [29, 31, 35, 79, 81, 143], "20": [29, 31, 61, 71, 79, 81, 121, 123, 143], "pca_compon": [29, 31, 59, 60, 61, 62, 63, 71, 79, 81, 82], "randomforestwithinst": [29, 31, 35], "randomforest": [29, 31, 35, 36, 79, 81], "multiobjectivealgorithm": [29, 31], "meanaggregationstrategi": [29, 31, 32, 35, 83, 85, 132], "random_prob": [29, 31, 32], "probabilityrandomdesign": [29, 31, 32, 35, 87, 91], "blackboxfacad": [29, 32, 121, 138], "black": [29, 32, 121, 138, 139, 144], "box": [29, 32, 121, 138, 139, 144], "1000": [29, 32, 121, 122], "detial": [29, 32], "n_config": [29, 32, 35, 36, 38, 39, 40, 41, 42, 43, 122, 128], "n_configs_per_hyperparamt": [29, 32, 35, 36], "max_ratio": [29, 32, 35, 36, 38, 39, 40, 41, 42, 43, 123], "sobol": [29, 32, 35, 38, 44], "sobolinitialdesign": [29, 32, 35, 38, 44, 122], "get_kernel": [29, 32], "kernel": [29, 32, 61, 62, 63, 71, 122], "composit": [29, 32], "hammingkernel": [29, 32, 65, 67], "matern": [29, 32, 65, 68], "nois": [29, 32], "white": [29, 32, 65, 70], "model_typ": [29, 32], "vanilla": [29, 32], "abstractgaussianprocess": [29, 32, 61, 62, 63, 71], "08447232371720552": [29, 32], "deriv": [29, 32, 35, 124, 143], "hyperbandfacad": [29, 34, 37, 138], "randomfacad": [29, 34, 37], "free": [29, 34, 137, 139, 142], "hyperband": [29, 34, 36, 45, 49, 52, 128, 129, 138, 139, 144, 145], "roar": [29, 34, 37, 139], "aggress": [29, 34, 37, 128, 140, 144], "onlin": [29, 34, 37, 139], "race": [29, 34, 37, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 128, 139, 140, 144], "compar": [29, 34, 37, 114, 139], "eta": [29, 34, 36, 45, 48, 52, 128, 129], "That": [29, 34, 45, 47], "10000": [29, 35], "1048576": [29, 35, 79, 81], "ones": [29, 35], "runhistorylogscaledencod": [29, 35, 94, 96, 101], "form": [29, 36, 72, 74], "randominitialdesign": [29, 36, 38, 43], "fashion": [29, 36, 45, 47, 106, 108, 110], "_collect_data": [29, 36], "notabl": [29, 36], "through": [29, 36, 92, 105], "least": [29, 36, 128], "_min_samples_model": [29, 36], "against": [29, 36, 45, 48, 50, 52, 54, 55, 137, 139], "exist": [29, 36, 92, 105, 122], "observ": [29, 36, 54, 55, 92, 105, 113, 139], "until": [29, 36, 106, 107, 108, 110], "surviv": [29, 36], "inquir": [29, 36], "about": [29, 36, 45, 48, 65, 66, 106, 107, 122, 124, 137], "known": [29, 36, 121, 139], "yet": [29, 36, 137, 141], "unseen": [29, 36, 139], "criterion": [29, 36, 45, 52, 54, 55], "reach": [29, 36, 87, 90], "intersect": [29, 36], "common": [29, 36, 45, 47, 106, 107, 108, 124], "abstract_intensifi": [29, 36, 121, 122, 123, 124, 128, 129, 132], "_compare_config": [29, 36], "avail": [29, 36, 45, 46, 47, 48, 49, 50, 52, 53, 92, 105, 106, 107, 108, 110], "datapoint": [29, 36], "disambigu": [29, 36], "featur": [29, 36, 59, 60, 61, 62, 63, 71, 78, 79, 81, 92, 94, 95, 96, 104, 111, 113, 129, 137], "index": [29, 36], "replac": [29, 36, 37, 93, 106, 110, 128], "25": [29, 36, 128], "n_seed": [29, 36, 45, 48, 52, 111, 128, 129], "\u03b8": [29, 37, 45, 50], "approach": [29, 37, 94, 96, 145], "unpromis": [29, 37], "promis": [29, 37, 45, 46, 47, 49, 50, 53, 138, 139], "enough": [29, 37, 45, 46, 106, 107, 139], "reject": [29, 37], "veri": [29, 37], "earli": [29, 37, 137, 144], "uniformli": [29, 37, 45, 50, 139], "accept": [29, 37, 128, 137, 138], "therefor": [29, 37, 65, 66, 111, 128, 138, 139, 141], "dummi": [29, 37], "neither": [29, 37, 92, 105], "nor": [29, 37, 92, 105], "first": [29, 37, 45, 49, 50, 52, 53, 65, 66, 106, 109, 110, 114, 121, 122, 123, 124, 128, 129, 132, 137, 138], "incorpor": [29, 37, 59, 60, 61, 62, 63, 71, 79, 81, 111, 124], "consid": [29, 37, 45, 46, 48, 50, 52, 79, 81, 94, 95, 96, 106, 110, 128, 129], "increas": [29, 37, 87, 90, 128, 129], "randommodel": [29, 37, 59, 82], "like": [29, 37, 124, 138], "n_configs_per_hyperparamet": [38, 39, 40, 41, 42, 43], "disabl": [38, 39, 94, 96, 111], "my": [38, 39, 137], "cover": [38, 39], "50": [38, 39, 61, 71, 122], "most": [38, 39, 92, 105, 124, 128, 138], "select_configur": [38, 39], "_select_configur": [38, 39], "child": [38, 39, 106, 107, 122, 128, 137], "factorialinitialdesign": [38, 41], "factori": [38, 41, 92, 93], "corner": [38, 41], "middl": [38, 41], "latinhypercubeinitialdesign": [38, 42], "latin": [38, 42], "hypercub": [38, 42], "arg": [38, 44, 54, 57, 79, 80, 94, 99, 103, 106, 110], "sequenc": [38, 44, 45, 50], "scrambl": [38, 44], "github": [38, 44, 137, 140, 141], "io": [38, 44], "devdoc": [38, 44], "qmc": [38, 44], "html": [38, 44, 145], "pair": [45, 46, 50, 92, 105], "associ": [45, 46, 111], "worker": [45, 46, 47, 48, 49, 50, 52, 53, 106, 107, 108, 110, 111, 128, 129, 138], "produc": [45, 46, 106, 107, 108, 110], "minimum": [45, 46, 47, 50, 54, 55, 79, 81, 92, 105, 111, 121, 139], "exhaust": [45, 46, 48, 50, 52], "earlier": [45, 46, 48, 50, 52], "get_next_run": [45, 46, 47, 49, 50, 53], "repeat_config": [45, 46, 47, 49, 50, 53], "n_worker": [45, 46, 47, 49, 50, 53, 106, 108, 111, 128, 138], "issu": [45, 46, 137, 140], "runinfoint": [45, 46], "again": [45, 46, 47, 49, 50, 53], "tupl": [45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 65, 66, 78, 79, 81, 92, 94, 95, 96, 105, 106, 107, 108, 110, 113, 116, 129, 132], "trialinfoint": [45, 46, 47, 49, 50, 53, 54, 55, 57, 92, 104], "indic": [45, 46, 47, 49, 50, 53, 87, 88, 90, 92, 104, 106, 109, 129], "consum": [45, 46, 47, 49, 50, 53, 106, 107], "encapsul": [45, 46, 47, 49, 50, 53, 106, 107], "properti": [45, 46, 47, 49, 50, 52, 53, 59, 61, 65, 66, 67, 71, 78, 92, 105, 121, 122, 123, 124, 128, 129], "iteration_don": [45, 46], "done": [45, 46, 47, 50, 106, 107, 108, 110], "num_trial": [45, 46, 93], "trial_info": [45, 46, 47, 49, 50, 53, 106, 107, 108, 110], "trial_valu": [45, 46, 47, 49, 50, 53], "log_trajectori": [45, 46, 47, 49, 50, 53], "seen": [45, 46, 47, 49, 50, 53], "sec": [45, 46, 47, 49, 50, 53], "trajectori": [45, 46, 47, 49, 50, 53], "mayb": [45, 46, 47, 49, 50, 53], "incumbent_cost": [45, 46, 47, 49, 50, 53, 121, 122, 123, 124, 128, 129, 132], "repeat": [45, 46], "uses_budget": [45, 46, 49, 50, 52, 53], "uses_inst": [45, 46, 49, 50, 52, 53], "uses_se": [45, 46, 47, 49, 50, 53], "abstractparallelintensifi": [45, 47, 52], "racer": [45, 47, 50], "schedul": [45, 47, 87, 89], "parallel": [45, 47, 48, 106, 107, 108, 110, 111, 144], "basi": [45, 47, 52], "prevent": [45, 47, 50, 52, 65, 66], "being": [45, 47, 52, 65, 66, 106, 110, 139, 144], "idl": [45, 47, 48, 52], "decid": [45, 47, 106, 107, 140], "pick": [45, 47, 49, 53], "up": [45, 47, 92, 105, 115, 121, 128, 129, 137, 144], "send": [45, 47], "request": [45, 47, 92, 104], "redirect": [45, 47], "respect": [45, 47, 52, 65, 66, 72, 73, 77], "histori": [45, 47], "reli": [45, 47], "go": [45, 47, 124], "instance_seed_pair": [45, 48, 52], "instance_ord": [45, 48, 52, 111], "shuffle_onc": [45, 48, 52, 111], "incumbent_select": [45, 48, 52, 129], "highest_executed_budget": [45, 48, 52], "n_initial_challeng": [45, 48, 52], "successivehalv": [45, 48, 52, 53, 138], "robust": [45, 48, 52, 61, 63, 71, 73, 144], "effici": [45, 48, 52, 92, 105, 140, 144], "scale": [45, 48, 52, 65, 67, 72, 73, 74, 75, 77, 94, 95, 99, 101, 102, 103, 122], "falkner": [45, 48, 52, 61, 63, 71, 73], "2018": [45, 48, 52], "extens": [45, 48, 139], "success": [45, 48, 52, 53, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 105, 128, 129, 139, 144], "halv": [45, 48, 52, 53, 128, 129, 139, 144], "hyperbandwork": [45, 48, 49], "actual": [45, 48, 52, 61, 71, 106, 107], "logic": [45, 48, 52], "shuffl": [45, 48, 52, 111, 124, 128, 129], "highest_budget": [45, 48, 52], "any_budget": [45, 48, 52], "regardless": [45, 48, 52], "determinist": [45, 48, 52, 111, 123, 128, 129, 137], "race_against": [45, 50], "\u03b8_new": [45, 50], "\u03b8_inc": [45, 50], "m": [45, 50], "t_intensifi": [45, 50], "\u03c0": [45, 50], "c_hat": [45, 50], "denot": [45, 50], "length": [45, 50, 61, 65, 67, 71], "run_incumb": [45, 50], "less": [45, 50], "equal": [45, 50, 92, 105], "drawn": [45, 50, 61, 63, 73, 87, 91], "7": [45, 50, 59, 60, 61, 62, 63, 71, 79, 81, 82, 121, 140], "executerun": [45, 50], "8": [45, 50, 79, 81, 122, 124, 128, 138, 140, 141], "run_challeng": [45, 50], "while": [45, 49, 50, 53], "s_miss": [45, 50], "11": [45, 50], "s_torun": [45, 50], "size": [45, 50, 111, 124, 128, 138, 139, 143], "min": [45, 50, 116, 128, 129], "foreach": [45, 50], "13": [45, 50], "14": [45, 50], "\u03c0_common": [45, 50], "previous": [45, 49, 50, 53, 139], "ran": [45, 50], "15": [45, 50, 129], "break": [45, 50], "16": [45, 50, 124, 145], "els": [45, 50, 122, 128], "17": [45, 50], "18": [45, 50, 145], "spent": [45, 50], "exce": [45, 50], "19": [45, 50], "much": [45, 50, 54, 55, 57, 92, 105, 106, 108, 128], "percentag": [45, 50], "higher": [45, 50, 122], "alwai": [45, 50, 121, 123, 137, 138], "sometim": [45, 50], "get_next_challeng": [45, 50], "exercis": [45, 50, 106, 107, 108, 110], "though": [45, 50], "popul": [45, 50, 106, 107, 108, 110], "_configs_to_run": [45, 50], "pool": [45, 50], "within": [45, 50, 106, 108, 137, 144], "regist": [45, 50], "_to_run": [45, 50], "brand": [45, 50], "_next_iter": [45, 50], "mark": [45, 50], "transit": [45, 50], "epm": [45, 50, 54, 55, 57, 92, 104, 139], "new_challeng": [45, 50], "charg": [45, 50], "compli": [45, 50, 106, 108], "job": [45, 50, 106, 108], "nevertheless": [45, 50, 106, 108, 137], "happen": [45, 50, 137], "try": [45, 50, 129, 137, 138], "circumv": [45, 50], "particular": [45, 50, 142], "cap": [45, 50], "post": [45, 50], "intensifierstag": [45, 50, 51], "process_incumbent_run": [45, 50], "process_first_config_run": [45, 50], "At": [45, 50], "move": [45, 50, 87, 89, 92, 105], "supplementari": [45, 52], "proceed": [45, 52, 140], "mlr": [45, 52], "press": [45, 52], "v80": [45, 52], "falkner18a": [45, 52], "supp": [45, 52], "oper": [45, 52, 65, 66], "kind": [45, 52, 54, 55], "min_budget": [45, 52, 111, 128, 129], "max_budget": [45, 52, 111, 128, 129], "thei": [45, 52], "total": [45, 52, 79, 81, 106, 108, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 134], "posit": [45, 52, 83, 86, 106, 107, 108, 110], "anyth": [45, 52, 65, 66, 115], "eg": [45, 52], "epoch": [45, 52, 111, 130, 131, 136, 138, 139], "neural": [45, 52, 128, 138], "network": [45, 52, 124, 128, 138], "successivehalvingwork": [45, 49, 52, 53], "li": [45, 52, 145], "rather": [45, 52, 73], "calculate_budget": [45, 52], "max_iter": [45, 52], "stand": [49, 53], "alon": [49, 53], "numer": [49, 53, 121], "tag": [49, 53], "logger": [49, 53, 115], "messag": [49, 53], "properli": [49, 53, 106, 110], "enum": [51, 92, 104], "successive_halv": [53, 128, 129], "_all_budget": 53, "_n_configs_in_stag": 53, "_min_budget": 53, "_max_budget": 53, "hb": [53, 139], "sub": [53, 94, 95], "rout": 53, "basesmbo": [54, 55, 57], "runner": [54, 55, 137], "statist": [54, 55], "abstractrunhistory_encod": [54, 55], "convert": [54, 55], "baseepm": [54, 55], "acquisitionfunctionmaxim": [54, 55], "acquisitionfunct": [54, 55], "infil": [54, 55], "restore_incumb": [54, 55], "restor": [54, 55, 137], "rng": [54, 55], "randomst": [54, 55], "executor": [54, 55], "chooser": [54, 55], "choosernocooldown": [54, 55], "chooserlinearcooldown": [54, 55], "start_modulu": [54, 55, 87, 90], "modulus_incr": [54, 55, 87, 90], "end_modulu": [54, 55, 87, 90], "predict_x_best": [54, 55], "x_best": [54, 55], "min_samples_model": [54, 55], "build": [54, 55, 92, 104, 122, 124, 128, 129, 141], "configuration_chooser_kwarg": [54, 55], "epmchoos": [54, 55], "config_spac": [54, 55], "initial_design_config": [54, 55], "arrai": [54, 55, 61, 63, 65, 66, 115], "h": [54, 55, 140], "time_left": [54, 55, 57], "update_acquisition_funct": [54, 55], "assosi": [54, 55], "update_model": [54, 55], "dimension": [59, 60, 61, 62, 63, 71, 79, 81, 121, 123, 144], "y": [59, 60, 65, 66, 79, 81, 94, 95, 96, 113], "predict": [59, 60, 78, 79, 81, 138, 139], "concret": [59, 60], "keep": [59, 60, 61, 62, 63, 71, 79, 81, 106, 107, 108, 110], "pca": [59, 60, 61, 62, 63, 71, 79, 81], "covariance_typ": [59, 60], "diagon": [59, 60], "varianc": [59, 60, 61, 63, 71, 78, 79, 81, 129], "_predict": [59, 60], "what": [59, 60, 92, 105, 106, 107, 108, 137], "along": [59, 60, 142], "appli": [59, 60, 73, 94, 96, 121], "take": [59, 60, 79, 81, 106, 108, 128, 137, 138], "four": [59, 60, 138], "std": [59, 60], "deviat": [59, 60, 72, 76, 124], "test": [59, 60, 61, 63, 92, 105, 140, 141], "covari": [59, 60], "full": [59, 60, 92, 105, 121, 122, 123, 124, 126, 127, 128, 129, 132, 136], "whole": [59, 60], "var": [59, 60, 78, 79, 81, 111, 129], "predict_margin": [59, 60, 78, 79, 81], "includ": [59, 60, 78, 124, 129, 139, 140], "_train": [59, 60], "correspond": [59, 60, 72, 74, 116], "multiobjectivemodel": [59, 78], "wrapper": [59, 78, 106, 107, 108, 110], "abstract_model": [59, 78], "gaussianprocess": [61, 63, 71], "n_restart": [61, 63], "normalize_i": [61, 63, 71], "likelihood": [61, 63], "robo": [61, 63, 71, 73], "klein": [61, 63, 71, 73], "mansur": [61, 63, 71, 73], "hutter": [61, 63, 71, 73, 137, 140], "framework": [61, 63, 71, 73, 138, 139, 144], "2017": [61, 63, 71, 73, 145], "workshop": [61, 63, 71, 73], "restart": [61, 63, 87, 89], "zero": [61, 63, 71, 94, 99, 101, 102, 103, 121, 123], "unit": [61, 63, 71, 124], "sample_funct": [61, 63], "x_test": [61, 63], "n_func": [61, 63], "posterior": [61, 63], "function_sampl": [61, 63], "mcmcgaussianprocess": [61, 71], "n_mcmc_walker": [61, 71], "chain_length": [61, 71], "burning_step": [61, 71], "mcmc_sampler": [61, 71], "emce": [61, 71], "average_sampl": [61, 71], "out": [61, 71], "markow": [61, 71], "chain": [61, 71, 139], "mont": [61, 71, 139], "carlo": [61, 71, 139], "propos": [61, 71], "walker": [61, 71], "last": [61, 71, 122], "burnin": [61, 71], "sampler": [61, 71], "nut": [61, 71], "abstractkernel": [65, 66, 67, 68, 69, 70], "operate_on": [65, 66, 67, 68, 69, 70], "has_condit": [65, 66, 67, 68, 69, 70], "mixin": [65, 66], "overrid": [65, 66, 121, 122], "place": [65, 66, 124], "hierarchi": [65, 66], "instantiat": [65, 66], "mypi": [65, 66], "won": [65, 66], "know": [65, 66, 123], "relat": [65, 66], "superclass": [65, 66], "statement": [65, 66], "member": [65, 66], "declar": [65, 66], "_call": [65, 66], "super": [65, 66], "get_param": [65, 66, 67], "etc": [65, 66, 111], "numpi": [65, 66, 94, 96, 115, 122, 124, 128, 129, 132, 143], "abstractprior": [65, 66, 72, 73, 74, 75, 76, 77], "might": [65, 66, 92, 105, 106, 107, 108, 110, 137, 138], "primarili": [65, 66], "sklearn": [65, 66, 122, 124, 128, 129, 143], "eval_gradi": [65, 66], "deep": [65, 66, 128], "estim": [65, 66, 79, 81, 94, 95, 121, 122, 123, 124, 128, 129, 132], "subobject": [65, 66], "param": [65, 66], "map": [65, 66, 92, 105], "n_dim": [65, 66], "fix": [65, 66], "constantkernel": [65, 66], "constant_valu": [65, 66], "constant_value_bound": [65, 66], "05": [65, 66, 67, 68, 69, 70, 83, 86, 129], "100000": [65, 66, 67, 68, 69, 70], "k": [65, 66, 92, 105, 140], "gradient": [65, 66, 72, 73, 77, 130, 131, 136], "shape": [65, 66, 72, 74], "n_samples_x": [65, 66], "n_featur": [65, 66], "n_samples_i": [65, 66], "boolean": [65, 66], "k_gradient": [65, 66], "opt": [65, 66], "length_scal": [65, 67, 68, 69], "length_scale_bound": [65, 67, 68, 69], "stationarykernelmixin": [65, 67], "normalizedkernelmixin": [65, 67], "ham": [65, 67], "hyperparameter_length_scal": [65, 67], "maternkernel": [65, 68], "nu": [65, 68], "productkernel": [65, 66], "k1": [65, 66], "k2": [65, 66], "product": [65, 66], "rbfkernel": [65, 69], "rbf": [65, 69, 122], "sumkernel": [65, 66], "whitekernel": [65, 70], "noise_level": [65, 70], "noise_level_bound": [65, 70], "gammaprior": [72, 74], "loc": [72, 74], "gamma": [72, 74, 122], "greater": [72, 74, 111], "canon": [72, 74], "greather": [72, 74, 111], "horseshoeprior": [72, 75], "horsesho": [72, 75], "spearmint": [72, 75, 77], "lognormalprior": [72, 76], "softtophatprior": [72, 77], "lower_bound": [72, 77], "upper_bound": [72, 77], "expon": [72, 77], "soft": [72, 77], "tophat": [72, 77], "upper": [72, 77, 92, 105, 124], "get_gradi": [72, 73, 77], "theta": [72, 73, 77], "hi": [72, 73, 77], "_get_gradi": [72, 73, 77], "get_log_prob": [72, 73, 77], "exponenti": [72, 73, 77], "_get_log_prob": [72, 73, 77], "tophatprior": [72, 77], "adapt": [73, 128, 129, 139], "whenev": 73, "lnprob": 73, "sample_from_prior": 73, "n_sampl": 73, "_sample_from_prior": 73, "abstractrandomforest": [79, 80, 81], "n_points_per_tre": [79, 81], "eps_pur": [79, 81], "08": [79, 81], "max_nod": [79, 81], "log_i": [79, 81], "account": [79, 81, 94, 95, 128], "tree": [79, 81], "smaller": [79, 81, 113, 138], "split": [79, 81, 124, 128, 129], "leaf": [79, 81], "depth": [79, 81, 143], "node": [79, 81, 106, 108], "enabl": [79, 81, 92, 105, 141], "smac2": [79, 81, 137], "assumpt": [79, 81], "uncertainti": [79, 81], "abc": [83, 84, 106, 107], "update_on_iteration_start": [83, 84, 86], "rho": [83, 86], "c": [83, 86, 121, 122, 123, 124, 128, 129, 132, 138, 140, 143], "bham": [83, 86], "ac": [83, 86], "uk": [83, 86], "jdk": [83, 86], "ukci": [83, 86], "small": [83, 86], "helper": [87, 88], "th": [87, 88, 89, 90, 91], "begin": [87, 88, 90], "cosineannealingrandomdesign": [87, 89], "min_prob": [87, 89], "max_prob": [87, 89], "restart_iter": [87, 89], "decreas": [87, 89, 90, 91], "cosin": [87, 89], "anneal": [87, 89], "final": [87, 89, 121, 122, 123, 124, 128, 129, 132], "_probabl": [87, 89], "dynamicmodulusrandomdesign": [87, 90], "inf": [87, 90, 111], "fraction": [87, 90], "amount": [87, 90, 106, 108], "ever": [87, 90], "adjust": [87, 90], "integ": [87, 90, 115, 122, 124, 128], "dynamicprobabilityrandomdesign": [87, 91], "multipli": [87, 91], "dataorigin": [92, 104, 105], "definit": [92, 104], "gather": [92, 104], "external_same_inst": [92, 104, 105], "extern": [92, 104, 105], "anoth": [92, 104, 122, 139], "external_different_inst": [92, 104], "due": [92, 104, 129], "Will": [92, 104, 106, 108], "instanceseedbudgetkei": [92, 93, 105], "instanceseedkei": [92, 93], "overwrite_existing_tri": [92, 105], "trialkei": [92, 93, 105], "importantli": [92, 105], "theoret": [92, 105], "picklabl": [92, 105], "__contains__": [92, 105], "semant": [92, 105], "__eq__": [92, 105], "__getitem__": [92, 105], "v": [92, 105, 106, 108, 129], "__iter__": [92, 105], "__len__": [92, 105], "len": [92, 105], "statustyp": [92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110], "force_upd": [92, 105], "average_cost": [92, 105], "instance_seed_budget_kei": [92, 105], "queri": [92, 105], "wrt": [92, 105], "warn": [92, 105, 124, 128, 129], "configuration_spac": [92, 105], "empti": [92, 105, 106, 107, 108, 110], "get_config": [92, 105], "get_configs_per_budget": [92, 105], "budget_subset": [92, 94, 95, 96, 105], "get_cost": [92, 105], "docstr": [92, 105], "re": [92, 105, 145], "cach": [92, 105], "get_incumb": [92, 105], "get_min_cost": [92, 105], "min_cost": [92, 105], "get_trial": [92, 105], "only_max_observed_budget": [92, 105], "incremental_update_cost": [92, 105], "increment": [92, 105], "load_json": [92, 105], "filenam": [92, 105], "json": [92, 105], "represent": [92, 94, 95, 96, 105], "objective_bound": [92, 105], "reset": [92, 105], "save_json": [92, 105], "save_extern": [92, 105], "sum_cost": [92, 105], "external_ful": [92, 105], "structur": [92, 105], "_config_id_to_inst_seed_budget": [92, 105], "update_cost": [92, 105], "_cost_per_config": [92, 105], "_num_trials_per_config": [92, 105], "scratch": [92, 105], "accordingli": [92, 105, 124], "update_from_json": [92, 105], "intenum": [92, 104], "run_info": [92, 104], "trajectoryitem": 93, "walltime_us": 93, "trajentri": 93, "considered_st": [94, 95, 96, 97, 98, 100, 101, 102], "crash": [94, 95, 96, 97, 98, 100, 101, 102, 106, 109, 137], "memoryout": [94, 95, 96, 97, 98, 100, 101, 102], "donotadv": [94, 95, 96, 97, 98, 100, 101, 102], "lower_budget_st": [94, 95, 96, 97, 98, 100, 101, 102], "scale_percentag": [94, 95, 96, 97, 98, 100, 101, 102], "noqa": [94, 95], "e501": [94, 95], "percentil": [94, 95], "distanc": [94, 95], "rais": [94, 95, 124, 128, 137], "typeerror": [94, 95], "get_configur": [94, 95], "append": [94, 95, 132], "configs_arrai": [94, 95], "defaul": [94, 95], "transform_response_valu": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "respons": [94, 95, 97, 99, 100, 101, 102, 103], "transformed_valu": [94, 95], "runhistoryeipsencod": [94, 97], "runhistoryinversescaledencod": [94, 99], "linearli": [94, 99, 101, 102, 103], "invers": [94, 99], "runhistorylogencod": [94, 100], "runhistoryrawencod": [94, 96], "runhistroi": [94, 96], "raw": [94, 96], "transform_raw_valu": [94, 96], "transform_with_raw": [94, 96], "imput": [94, 96, 113], "censor": [94, 96], "timeout": [94, 96], "cutoff": [94, 96], "y_raw": [94, 96], "runhistoryrawscaledencod": [94, 96], "runhistoryscaledencod": [94, 102], "runhistorysqrtscaledencod": [94, 103], "squar": [94, 103, 132], "root": [94, 103, 114, 137], "required_argu": [106, 107], "interact": [106, 107], "complex": [106, 107, 144], "perspect": [106, 107], "launch": [106, 107, 108, 110], "submit": [106, 107, 108, 110], "submit_run": [106, 107, 108], "run_wrapp": [106, 107, 108], "among": [106, 107], "realli": [106, 107], "translat": [106, 107], "iter_result": [106, 107, 108, 110], "mechan": [106, 107, 128, 139, 140], "decis": [106, 107, 108, 110], "abl": [106, 107, 122], "count_available_work": [106, 107, 108, 110], "is_run": [106, 107, 108, 110], "serial": [106, 107, 108, 110], "instantli": [106, 107, 108, 110], "pend": [106, 107, 108, 110], "_results_queu": [106, 107, 108, 110], "get_finish": [106, 107, 108, 110], "aka": [106, 107, 108], "repres": [106, 107, 108, 110, 115, 129, 140], "arbitrari": [106, 107, 108, 110, 121, 123, 138, 140], "around": [106, 107], "simplifi": [106, 107], "isol": [106, 107], "submit_tri": [106, 107, 108, 110], "embed": [106, 107, 108], "eventu": [106, 107], "fifo": [106, 107], "dictat": [106, 107, 108], "submiss": [106, 107], "endeavor": [106, 107], "daskparallelrunn": [106, 108], "single_work": [106, 108], "patienc": [106, 108], "dask_client": [106, 108], "bridg": [106, 108], "pattern": [106, 108], "wrap": [106, 108, 137], "baserunn": [106, 108], "construct": [106, 108], "capabl": [106, 108, 144], "neext": [106, 108], "dask": [106, 108, 111], "precis": [106, 108], "task": [106, 108, 110, 111, 124, 138], "receiv": [106, 108, 142], "pickl": [106, 108], "come": [106, 108], "Such": [106, 108], "futur": [106, 108], "manag": [106, 108, 111], "client": [106, 108], "fail": [106, 108, 109, 111], "cluster": [106, 108], "attach": [106, 108], "close": [106, 108, 137], "manual": [106, 108, 124], "upon": [106, 108], "__del__": [106, 108], "forc": [106, 108], "dynam": [106, 108], "alloc": [106, 108, 128], "otherwis": [106, 108, 110, 111], "firstruncrashedexcept": [106, 109], "targetalgorithmabortexcept": [106, 109], "abort": [106, 109], "assum": [106, 109, 121, 122, 123, 124, 128, 129, 132, 137], "targetfunctionrunn": [106, 110], "element": [106, 110, 115], "algorithm_kwarg": [106, 110], "pynish": [106, 110, 111, 137], "walltim": [106, 110], "memori": [106, 110, 111, 137], "directli": [106, 110, 141], "fill": [106, 110], "immedi": [106, 110], "posixpath": 111, "smac3_output": 111, "crash_cost": 111, "termination_cost_threshold": 111, "walltime_limit": [111, 128, 129, 138], "cputime_limit": 111, "trial_walltime_limit": 111, "trial_memory_limit": 111, "100": [111, 121, 123, 143, 144], "environ": [111, 121, 124, 128, 138, 141], "variabl": [111, 124, 128, 138], "context": 111, "frame": 111, "threshold": 111, "cross": [111, 124, 126, 127, 128, 129, 136, 139], "constraint": [111, 129], "enforc": [111, 137], "spawn": 111, "mb": [111, 127, 131, 134], "reproduc": [111, 137], "__post_init__": 111, "count_instance_featur": 111, "count": 111, "count_object": 111, "convert_configurations_to_arrai": 113, "inact": 113, "get_conditional_hyperparamet": 113, "get_typ": 113, "recursively_compare_dict": 114, "d1": 114, "d2": 114, "diff": 114, "recurs": 114, "string": [114, 115], "format": [114, 115], "format_arrai": 115, "format_v": 115, "hold": [115, 122], "serializ": 115, "get_logg": 115, "logger_nam": 115, "setup_log": 115, "modul": 115, "own": 115, "normalize_cost": 116, "By": [116, 128, 144], "unnorm": 116, "normalized_cost": 116, "click": [121, 122, 123, 124, 125, 128, 129, 132], "download": [121, 122, 123, 124, 125, 128, 129, 132, 136], "2d": [121, 133, 134, 136], "rosenbrock": [121, 123], "larg": 121, "abstract_initial_design": [121, 122, 123, 124, 128, 129, 132], "273": [121, 122, 123, 124, 132], "444": [121, 122, 123, 124, 132], "564": [121, 122, 123, 124, 132], "1102": [121, 123], "7878": [121, 123], "336": [121, 122, 123, 124, 129, 132], "4656": 121, "360": [121, 122, 123, 124, 128, 129, 132], "363": [121, 122, 123, 124, 128, 129, 132], "x0": [121, 123], "9968221839517355": [121, 123], "03135360777378082": 121, "x1": [121, 123], "30847043171525": [121, 123], "21179260686039925": 121, "4314": 121, "6502527847737536": 121, "154531223148483": 121, "0818": 121, "47602048278586295": 121, "13155812805683098": 121, "8351": 121, "7031544591929872": 121, "842364243857716": 121, "abstract_facad": [121, 122, 123, 124, 128, 129, 132], "288": [121, 122, 123, 124, 128, 129, 132], "289": [121, 122, 123, 124, 128, 129, 132], "8351420167215506": 121, "16916": [121, 123], "__copyright__": [121, 122, 123, 124, 128, 129, 132], "copyright": [121, 122, 123, 124, 128, 129, 132], "2021": [121, 122, 123, 124, 128, 129, 132, 137, 140], "automl": [121, 122, 123, 124, 128, 129, 132, 137, 140, 141], "freiburg": [121, 122, 123, 124, 128, 129, 132], "hannov": [121, 122, 123, 124, 128, 129, 132], "__license__": [121, 122, 123, 124, 128, 129, 132], "claus": [121, 122, 123, 124, 128, 129, 132, 142], "bsd": [121, 122, 123, 124, 128, 129, 132, 142], "rosenbrock2d": [121, 123], "add_hyperparamet": [121, 122, 123, 124, 128, 129, 143], "toi": [121, 123], "serv": [121, 123], "x_i": [121, 123], "domain": [121, 123], "interv": [121, 123], "x2": [121, 123], "__name__": [121, 122, 123, 124, 128, 129, 132, 143], "__main__": [121, 122, 123, 124, 128, 129, 132, 143], "synthetic_funct": 121, "300": [121, 128], "default_cost": [121, 122, 123, 124, 128, 129, 132], "get_default_configur": [121, 122, 123, 124, 128, 129, 132], "let": [121, 122, 123, 124, 128], "script": [121, 122, 123, 124, 125, 128, 129, 132], "minut": [121, 122, 123, 124, 125, 128, 129, 132, 138], "114": [121, 127], "1_synthetic_funct": [121, 127], "jupyt": [121, 122, 123, 124, 125, 128, 129, 132, 136], "notebook": [121, 122, 123, 124, 125, 128, 129, 132, 136], "ipynb": [121, 122, 123, 124, 125, 128, 129, 132], "iri": 122, "mix": 122, "0667": 122, "0133": 122, "03992740880515713": 122, "2760639488343621": 122, "linear": 122, "shrink": 122, "013333333333333308": 122, "03333333333333344": 122, "incondit": [122, 128], "svm": 122, "model_select": [122, 124, 128, 129], "cross_val_scor": [122, 124, 128, 129], "wide": [122, 124], "benchmark": [122, 139], "load_iri": 122, "rang": [122, 123, 124, 128, 129, 138], "poli": 122, "sigmoid": 122, "001": [122, 128], "degre": 122, "coef": 122, "coef0": 122, "auto": 122, "gamma_valu": 122, "0001": [122, 128], "Then": 122, "use_degre": 122, "parent": [122, 128], "use_coef": 122, "use_gamma": 122, "use_gamma_valu": 122, "add_condit": [122, 128], "config_dict": 122, "get_dictionari": 122, "pop": 122, "classifi": [122, 124, 128, 129], "svc": 122, "random_st": [122, 124, 128, 129], "score": [122, 124, 128, 129, 143], "alter": 122, "996": [122, 127], "2_svm_cv": [122, 127], "81": 123, "700": 123, "6438": 123, "0801787059894652": 123, "6511913893559456": 123, "692": 123, "266": 123, "11841909303497555": 123, "642739687876742": 123, "664": 123, "4209": 123, "23190729051219083": 123, "6284718736435133": 123, "631": 123, "3981": 123, "42553725563416656": 123, "68979871241151": 123, "556": 123, "8875": 123, "5047246675538846": 123, "60979112499804": 123, "550": 123, "0838": 123, "5669451075267817": 123, "6615730174631764": 123, "72": 123, "1425": 123, "7153215381459042": 123, "3605748848483428": 123, "14246196585546": 123, "dataclass": 123, "minimium": 123, "assert": 123, "734": [123, 127], "3_ask_and_tel": [123, 127], "layer": [124, 129, 130, 131, 136], "perceptron": [124, 129, 130, 131, 136], "mlp": [124, 128, 129], "knowledg": 124, "similar": 124, "intuit": 124, "gain": 124, "categoricalhyperparamet": 124, "optimizt": 124, "stick": 124, "prior_acqusition_funct": 124, "92": 124, "8987": 124, "039": 124, "logist": [124, 128], "relu": [124, 128], "batch_siz": [124, 128], "324": 124, "128": 124, "learning_rate_init": [124, 128], "1134996369914405": 124, "0010000000000000002": 124, "n_layer": [124, 128], "n_neuron": [124, 128], "157": 124, "108": 124, "sgd": [124, 128, 129], "adam": [124, 128], "0267": 124, "83": 124, "001682337847169736": 124, "0245": 124, "63": 124, "024487774682760866": 124, "05787991333952347": 124, "03506344784896309": 124, "betaintegerhyperparamet": 124, "normalfloathyperparamet": 124, "uniformintegerhyperparamet": [124, 143], "load_digit": [124, 128, 129], "convergencewarn": 124, "stratifiedkfold": [124, 128, 129], "neural_network": [124, 128], "mlpclassifi": [124, 128], "digit": [124, 128, 129], "illustr": [124, 128], "educ": 124, "beforehand": 124, "hp": 124, "believ": 124, "rel": 124, "And": 124, "skew": 124, "toward": 124, "wider": 124, "256": [124, 128], "alpha": [124, 129, 132], "60": 124, "tanh": [124, 128], "default_valu": 124, "moreov": 124, "opinion": 124, "batch": [124, 128], "leav": 124, "512": 124, "rate": [124, 128, 138], "center": 124, "catch_warn": [124, 128, 129], "filterwarn": [124, 128, 129], "categori": 124, "hidden_layer_s": [124, 128], "solver": [124, 128], "max_it": [124, 128, 129], "fold": [124, 128], "accuraci": [124, 128, 138, 143], "n_split": [124, 128, 129], "error_scor": [124, 128], "default_config": 124, "40": [124, 128, 129], "conduct": 124, "proven": 124, "34": [124, 127], "442": [124, 127], "4_prior": [124, 127], "000": [125, 127], "5_full_custom": [125, 127], "synthet": [126, 127, 136], "00": [127, 128, 129, 131, 134], "39": 127, "286": 127, "examples_1_bas": 127, "03": 127, "advantag": [128, 137], "good": 128, "impli": [128, 142], "123": [128, 129], "197": [128, 129], "abstract_parallel_intensifi": [128, 129], "98": [128, 129], "system": [128, 129, 141], "hyperband_work": [128, 129], "164": [128, 129], "successive_halving_work": [128, 129], "395": [128, 129], "611": 128, "0495": 128, "0568": 128, "3333": 128, "155": 128, "006677306766018313": 128, "56": 128, "lbfg": 128, "244": [128, 129], "33": 128, "0345": 128, "0406": 128, "0000": 128, "117": 128, "learning_r": [128, 129, 138], "008282754423021153": 128, "52": [128, 145], "0189": 128, "91": 128, "006390670908394775": 128, "183": 128, "01892138656762621": 128, "4307319715258433": 128, "025047972763850068": 128, "equalscondit": 128, "30": [128, 129], "invscal": [128, 129], "restrict": 128, "use_lr": 128, "use_lr_init": 128, "use_batch_s": 128, "deactiv": 128, "virtu": 128, "placehold": 128, "lr": 128, "lr_init": 128, "ceil": 128, "223": [128, 131], "1_mlp_epoch": [128, 131], "wlog": 129, "had": 129, "binari": 129, "longer": 129, "But": 129, "217": 129, "0137": 129, "0164": 129, "5488135039273248": 129, "11827442586893322": 129, "eta0": 129, "0006273927602293597": 129, "614170248896958e": 129, "l1_ratio": 129, "317983179393976": 129, "24875314351995803": 129, "67": 129, "27": 129, "008231389269086701": 129, "13423167867113728": 129, "007983889335257179": 129, "__future__": [129, 132], "annot": [129, 132], "itertool": 129, "linear_model": 129, "sgdclassifi": 129, "digitsdataset": 129, "__init__": 129, "_data": 129, "get_inst": 129, "classa": 129, "classb": 129, "target_nam": 129, "get_instance_featur": 129, "get_instance_data": 129, "logical_or": 129, "00001": 129, "clf": 129, "penalti": 129, "elasticnet": 129, "early_stop": 129, "32": [129, 131], "846": [129, 131], "2_sgd_dataset": [129, 131], "descent": [130, 131, 136], "01": [131, 134], "21": 131, "069": 131, "examples_2_multi_fidel": 131, "shown": 132, "3059": 132, "3062": 132, "9324859157204628": 132, "8640956835343081": 132, "2866": 132, "8640174051851504": 132, "8639784171134841": 132, "8621703607018727": 132, "2865": 132, "8613802024158463": 132, "8607574654896779": 132, "86057300810144": 132, "8602103898606681": 132, "859905318504627": 132, "8598739916684282": 132, "8597295956781026": 132, "859520085979836": 132, "8593199836090943": 132, "8587705866744733": 132, "8574074961764109": 132, "8571993851749746": 132, "8569651981964457": 132, "856959899407526": 132, "8567608637383648": 132, "8562151402955451": 132, "2864": 132, "8557358664458059": 132, "2527": 132, "2558": 132, "0849066921609452": 132, "25271859054525136": 132, "17702253": 132, "83739576": 132, "matplotlib": 132, "pyplot": 132, "plt": 132, "aggregation_strategi": 132, "f1": 132, "f2": 132, "metric1": 132, "metric2": 132, "all_x": 132, "figur": [132, 144], "scatter": 132, "blue": 132, "zorder": 132, "3000": 132, "vline": 132, "linestyl": 132, "color": 132, "red": 132, "hline": 132, "plot_from_smac": 132, "trial_kei": 132, "150": 132, "671": [132, 134], "1_schaffer": [132, 134], "schaffer": [133, 134, 136], "examples_3_multi_object": 134, "were": 136, "varieti": 136, "examples_python": 136, "zip": 136, "examples_jupyt": 136, "reimplement": 137, "tool": [137, 140, 144], "sequenti": [137, 139, 140], "slightli": 137, "comparison": 137, "stabl": 137, "releas": 137, "v2": 137, "java": 137, "maintain": 137, "applic": 137, "cannot": 137, "instal": 137, "pyrfr": 137, "cryptic": 137, "error": 137, "gcc": 137, "compil": 137, "link": 137, "anaconda": 137, "commandlin": [137, 144], "tri": [137, 138], "hpbandster": [137, 144], "discov": 137, "bug": 137, "report": 137, "hasn": 137, "tracker": 137, "latest": 137, "u": 137, "help": 137, "resolv": 137, "packag": [137, 140], "feel": 137, "screenshot": 137, "contribut": [137, 140], "discuss": 137, "care": 137, "question": 137, "feedback": 137, "prefer": 137, "ongo": 137, "guid": 137, "flag": 137, "don": 137, "realiz": 137, "tfe": [137, 139], "signific": 137, "necessarili": 137, "wors": 137, "discard": [137, 144], "lead": 137, "speed": [137, 144], "why": 137, "colab": 137, "mac": [137, 141], "mai": 137, "overcom": 137, "limit_resourc": 137, "explain": 138, "page": [138, 140], "tunabl": 138, "legal": 138, "would": 138, "potenti": 138, "multilayerperceptron": 138, "did": 138, "120": 138, "eight": 138, "satisfi": 138, "region": 138, "hyperparamt": 138, "emphas": 138, "highli": 138, "modular": 138, "weigh": 139, "novel": [139, 145], "bandit": [139, 145], "extend": 139, "bb": 139, "mf": 139, "therebi": 139, "prematur": 139, "markov": 139, "metric": [139, 143], "word": 139, "pc": 139, "written": [139, 140, 141], "regress": 139, "character": 139, "untest": 139, "analyz": 139, "under": [139, 142], "govern": 139, "trust": 139, "cli": [139, 144], "Its": 140, "mention": 140, "cite": 140, "jmlr": [140, 145], "inproceed": 140, "lindauer": 140, "arxiv21a": 140, "author": 140, "mariu": 140, "katharina": 140, "eggensperg": 140, "matthia": 140, "feurer": 140, "andr\u00e9": 140, "biedenkapp": 140, "difan": 140, "deng": 140, "carolin": 140, "benjamin": 140, "tim": 140, "ruhkopf": 140, "ren\u00e9": 140, "sass": 140, "frank": 140, "titl": 140, "versatil": 140, "booktitl": 140, "2109": 140, "09831": 140, "year": 140, "url": 140, "ab": 140, "hoo": 140, "leyton": 140, "brown": 140, "confer": 140, "intellig": 140, "lion": 140, "develop": 140, "visit": 140, "guidelin": 140, "furthermor": 141, "swig": 141, "linux": 141, "apt": 141, "intel": 141, "haven": 141, "gxx_linux": 141, "gcc_linux": 141, "pypi": 141, "pip": 141, "Or": 141, "clone": 141, "git": 141, "cd": 141, "dev": 141, "channel": 141, "channel_prior": 141, "strict": 141, "instruct": 141, "offici": 141, "feedstock": 141, "redistribut": 142, "modifi": 142, "term": 142, "hope": 142, "warranti": 142, "merchant": 142, "FOR": 142, "copi": 142, "opensourc": 142, "ensembl": 143, "randomforestclassifi": 143, "smac_bb_facad": 143, "x_train": 143, "y_train": 143, "randint": 143, "x_val": 143, "y_val": 143, "train_random_forest": 143, "measur": 143, "runcount": 143, "tae_runn": 143, "best_found_config": 143, "pre": 144, "typic": 144, "solv": 144, "artifici": 144, "global": 144, "characterist": 144, "awar": 144, "agnost": 144, "hierarch": 144, "oject": 144, "judg": 144, "unsuit": 144, "massiv": 144, "consequ": 144, "languag": 144, "tabl": 144, "hypermapp": 144, "optuna": 144, "hyperopt": 144, "botorch": 144, "openbox": 144, "lisha": 145, "kevin": 145, "jamieson": 145, "giulia": 145, "desalvo": 145, "afshin": 145, "rostamizadeh": 145, "ameet": 145, "talwalkar": 145, "j": 145, "mach": 145, "185": 145, "v18": 145, "558": 145, "2022": 145, "2204": 145, "11051": 145}, "objects": {"smac": [[11, 0, 0, "-", "acquisition"], [27, 0, 0, "-", "callback"], [28, 0, 0, "-", "constants"], [29, 0, 0, "-", "facade"], [38, 0, 0, "-", "initial_design"], [45, 0, 0, "-", "intensifier"], [54, 0, 0, "-", "main"], [59, 0, 0, "-", "model"], [83, 0, 0, "-", "multi_objective"], [87, 0, 0, "-", "random_design"], [92, 0, 0, "-", "runhistory"], [106, 0, 0, "-", "runner"], [111, 0, 0, "-", "scenario"], [112, 0, 0, "-", "utils"]], "smac.acquisition": [[12, 0, 0, "-", "functions"], [20, 0, 0, "-", "maximizers"]], "smac.acquisition.functions": [[12, 1, 1, "", "AbstractAcquisitionFunction"], [12, 1, 1, "", "EI"], [12, 1, 1, "", "EIPS"], [12, 1, 1, "", "IntegratedAcquisitionFunction"], [12, 1, 1, "", "LCB"], [12, 1, 1, "", "PI"], [12, 1, 1, "", "PriorAcquisitionFunction"], [12, 1, 1, "", "TS"], [13, 0, 0, "-", "abstract_acquisition_function"], [14, 0, 0, "-", "confidence_bound"], [15, 0, 0, "-", "expected_improvement"], [16, 0, 0, "-", "integrated_acquisition_function"], [17, 0, 0, "-", "prior_acqusition_function"], [18, 0, 0, "-", "probability_improvement"], [19, 0, 0, "-", "thompson"]], "smac.acquisition.functions.AbstractAcquisitionFunction": [[12, 2, 1, "", "__call__"], [12, 2, 1, "", "get_meta"], [12, 2, 1, "", "update"]], "smac.acquisition.functions.EI": [[12, 2, 1, "", "get_meta"]], "smac.acquisition.functions.IntegratedAcquisitionFunction": [[12, 2, 1, "", "get_meta"]], "smac.acquisition.functions.LCB": [[12, 2, 1, "", "get_meta"]], "smac.acquisition.functions.PI": [[12, 2, 1, "", "get_meta"]], "smac.acquisition.functions.PriorAcquisitionFunction": [[12, 2, 1, "", "get_meta"]], "smac.acquisition.functions.abstract_acquisition_function": [[13, 1, 1, "", "AbstractAcquisitionFunction"]], "smac.acquisition.functions.abstract_acquisition_function.AbstractAcquisitionFunction": [[13, 2, 1, "", "__call__"], [13, 2, 1, "", "get_meta"], [13, 2, 1, "", "update"]], "smac.acquisition.functions.confidence_bound": [[14, 1, 1, "", "LCB"]], "smac.acquisition.functions.confidence_bound.LCB": [[14, 2, 1, "", "get_meta"]], "smac.acquisition.functions.expected_improvement": [[15, 1, 1, "", "EI"], [15, 1, 1, "", "EIPS"]], "smac.acquisition.functions.expected_improvement.EI": [[15, 2, 1, "", "get_meta"]], "smac.acquisition.functions.integrated_acquisition_function": [[16, 1, 1, "", "IntegratedAcquisitionFunction"]], "smac.acquisition.functions.integrated_acquisition_function.IntegratedAcquisitionFunction": [[16, 2, 1, "", "get_meta"]], "smac.acquisition.functions.prior_acqusition_function": [[17, 1, 1, "", "PriorAcquisitionFunction"]], "smac.acquisition.functions.prior_acqusition_function.PriorAcquisitionFunction": [[17, 2, 1, "", "get_meta"]], "smac.acquisition.functions.probability_improvement": [[18, 1, 1, "", "PI"]], "smac.acquisition.functions.probability_improvement.PI": [[18, 2, 1, "", "get_meta"]], "smac.acquisition.functions.thompson": [[19, 1, 1, "", "TS"]], "smac.acquisition.maximizers": [[20, 1, 1, "", "AbstractAcquisitionMaximizer"], [20, 1, 1, "", "DifferentialEvolution"], [20, 1, 1, "", "LocalAndSortedPriorRandomSearch"], [20, 1, 1, "", "LocalAndSortedRandomSearch"], [20, 1, 1, "", "LocalSearch"], [20, 1, 1, "", "RandomSearch"], [21, 0, 0, "-", "abstract_acqusition_maximizer"], [22, 0, 0, "-", "differential_evolution"], [23, 0, 0, "-", "helpers"], [24, 0, 0, "-", "local_and_random_search"], [25, 0, 0, "-", "local_search"], [26, 0, 0, "-", "random_search"]], "smac.acquisition.maximizers.AbstractAcquisitionMaximizer": [[20, 2, 1, "", "get_meta"], [20, 2, 1, "", "maximize"]], "smac.acquisition.maximizers.LocalAndSortedRandomSearch": [[20, 2, 1, "", "get_meta"]], "smac.acquisition.maximizers.LocalSearch": [[20, 2, 1, "", "get_meta"]], "smac.acquisition.maximizers.abstract_acqusition_maximizer": [[21, 1, 1, "", "AbstractAcquisitionMaximizer"]], "smac.acquisition.maximizers.abstract_acqusition_maximizer.AbstractAcquisitionMaximizer": [[21, 2, 1, "", "get_meta"], [21, 2, 1, "", "maximize"]], "smac.acquisition.maximizers.differential_evolution": [[22, 1, 1, "", "DifferentialEvolution"]], "smac.acquisition.maximizers.helpers": [[23, 1, 1, "", "ChallengerList"]], "smac.acquisition.maximizers.local_and_random_search": [[24, 1, 1, "", "LocalAndSortedPriorRandomSearch"], [24, 1, 1, "", "LocalAndSortedRandomSearch"]], "smac.acquisition.maximizers.local_and_random_search.LocalAndSortedRandomSearch": [[24, 2, 1, "", "get_meta"]], "smac.acquisition.maximizers.local_search": [[25, 1, 1, "", "LocalSearch"]], "smac.acquisition.maximizers.local_search.LocalSearch": [[25, 2, 1, "", "get_meta"]], "smac.acquisition.maximizers.random_search": [[26, 1, 1, "", "RandomSearch"]], "smac.callback": [[27, 1, 1, "", "Callback"]], "smac.callback.Callback": [[27, 2, 1, "", "on_ask_end"], [27, 2, 1, "", "on_ask_start"], [27, 2, 1, "", "on_end"], [27, 2, 1, "", "on_iteration_end"], [27, 2, 1, "", "on_iteration_start"], [27, 2, 1, "", "on_next_configurations_end"], [27, 2, 1, "", "on_next_configurations_start"], [27, 2, 1, "", "on_start"], [27, 2, 1, "", "on_tell_end"], [27, 2, 1, "", "on_tell_start"]], "smac.facade": [[29, 1, 1, "", "AbstractFacade"], [29, 1, 1, "", "AlgorithmConfigurationFacade"], [29, 1, 1, "", "BlackBoxFacade"], [29, 1, 1, "", "HyperbandFacade"], [29, 1, 1, "", "HyperparameterFacade"], [29, 1, 1, "", "MultiFidelityFacade"], [29, 1, 1, "", "RandomFacade"], [30, 0, 0, "-", "abstract_facade"], [31, 0, 0, "-", "algorithm_configuration_facade"], [32, 0, 0, "-", "blackbox_facade"], [33, 0, 0, "-", "boing_facade"], [34, 0, 0, "-", "hyperband_facade"], [35, 0, 0, "-", "hyperparameter_facade"], [36, 0, 0, "-", "multi_fidelity_facade"], [37, 0, 0, "-", "random_facade"]], "smac.facade.AbstractFacade": [[29, 2, 1, "", "ask"], [29, 2, 1, "", "get_acquisition_function"], [29, 2, 1, "", "get_acquisition_maximizer"], [29, 2, 1, "", "get_initial_design"], [29, 2, 1, "", "get_intensifier"], [29, 2, 1, "", "get_meta"], [29, 2, 1, "", "get_model"], [29, 2, 1, "", "get_multi_objective_algorithm"], [29, 2, 1, "", "get_next_configurations"], [29, 2, 1, "", "get_random_design"], [29, 2, 1, "", "get_runhistory_encoder"], [29, 2, 1, "", "get_target_function_budgets"], [29, 2, 1, "", "get_target_function_instances"], [29, 2, 1, "", "get_target_function_seeds"], [29, 2, 1, "", "optimize"], [29, 2, 1, "", "tell"], [29, 2, 1, "", "validate"]], "smac.facade.AlgorithmConfigurationFacade": [[29, 2, 1, "", "get_acquisition_function"], [29, 2, 1, "", "get_acquisition_maximizer"], [29, 2, 1, "", "get_initial_design"], [29, 2, 1, "", "get_intensifier"], [29, 2, 1, "", "get_model"], [29, 2, 1, "", "get_multi_objective_algorithm"], [29, 2, 1, "", "get_random_design"], [29, 2, 1, "", "get_runhistory_encoder"]], "smac.facade.BlackBoxFacade": [[29, 2, 1, "", "get_acquisition_function"], [29, 2, 1, "", "get_acquisition_maximizer"], [29, 2, 1, "", "get_initial_design"], [29, 2, 1, "", "get_intensifier"], [29, 2, 1, "", "get_kernel"], [29, 2, 1, "", "get_model"], [29, 2, 1, "", "get_multi_objective_algorithm"], [29, 2, 1, "", "get_random_design"], [29, 2, 1, "", "get_runhistory_encoder"]], "smac.facade.HyperbandFacade": [[29, 2, 1, "", "get_intensifier"]], "smac.facade.HyperparameterFacade": [[29, 2, 1, "", "get_acquisition_function"], [29, 2, 1, "", "get_acquisition_maximizer"], [29, 2, 1, "", "get_initial_design"], [29, 2, 1, "", "get_intensifier"], [29, 2, 1, "", "get_model"], [29, 2, 1, "", "get_multi_objective_algorithm"], [29, 2, 1, "", "get_random_design"], [29, 2, 1, "", "get_runhistory_encoder"]], "smac.facade.MultiFidelityFacade": [[29, 2, 1, "", "get_initial_design"], [29, 2, 1, "", "get_intensifier"]], "smac.facade.RandomFacade": [[29, 2, 1, "", "get_acquisition_function"], [29, 2, 1, "", "get_acquisition_maximizer"], [29, 2, 1, "", "get_initial_design"], [29, 2, 1, "", "get_intensifier"], [29, 2, 1, "", "get_model"], [29, 2, 1, "", "get_multi_objective_algorithm"], [29, 2, 1, "", "get_random_design"], [29, 2, 1, "", "get_runhistory_encoder"]], "smac.facade.abstract_facade": [[30, 1, 1, "", "AbstractFacade"]], "smac.facade.abstract_facade.AbstractFacade": [[30, 2, 1, "", "ask"], [30, 2, 1, "", "get_acquisition_function"], [30, 2, 1, "", "get_acquisition_maximizer"], [30, 2, 1, "", "get_initial_design"], [30, 2, 1, "", "get_intensifier"], [30, 2, 1, "", "get_meta"], [30, 2, 1, "", "get_model"], [30, 2, 1, "", "get_multi_objective_algorithm"], [30, 2, 1, "", "get_next_configurations"], [30, 2, 1, "", "get_random_design"], [30, 2, 1, "", "get_runhistory_encoder"], [30, 2, 1, "", "get_target_function_budgets"], [30, 2, 1, "", "get_target_function_instances"], [30, 2, 1, "", "get_target_function_seeds"], [30, 2, 1, "", "optimize"], [30, 2, 1, "", "tell"], [30, 2, 1, "", "validate"]], "smac.facade.algorithm_configuration_facade": [[31, 1, 1, "", "AlgorithmConfigurationFacade"]], "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade": [[31, 2, 1, "", "get_acquisition_function"], [31, 2, 1, "", "get_acquisition_maximizer"], [31, 2, 1, "", "get_initial_design"], [31, 2, 1, "", "get_intensifier"], [31, 2, 1, "", "get_model"], [31, 2, 1, "", "get_multi_objective_algorithm"], [31, 2, 1, "", "get_random_design"], [31, 2, 1, "", "get_runhistory_encoder"]], "smac.facade.blackbox_facade": [[32, 1, 1, "", "BlackBoxFacade"]], "smac.facade.blackbox_facade.BlackBoxFacade": [[32, 2, 1, "", "get_acquisition_function"], [32, 2, 1, "", "get_acquisition_maximizer"], [32, 2, 1, "", "get_initial_design"], [32, 2, 1, "", "get_intensifier"], [32, 2, 1, "", "get_kernel"], [32, 2, 1, "", "get_model"], [32, 2, 1, "", "get_multi_objective_algorithm"], [32, 2, 1, "", "get_random_design"], [32, 2, 1, "", "get_runhistory_encoder"]], "smac.facade.hyperband_facade": [[34, 1, 1, "", "HyperbandFacade"]], "smac.facade.hyperband_facade.HyperbandFacade": [[34, 2, 1, "", "get_intensifier"]], "smac.facade.hyperparameter_facade": [[35, 1, 1, "", "HyperparameterFacade"]], "smac.facade.hyperparameter_facade.HyperparameterFacade": [[35, 2, 1, "", "get_acquisition_function"], [35, 2, 1, "", "get_acquisition_maximizer"], [35, 2, 1, "", "get_initial_design"], [35, 2, 1, "", "get_intensifier"], [35, 2, 1, "", "get_model"], [35, 2, 1, "", "get_multi_objective_algorithm"], [35, 2, 1, "", "get_random_design"], [35, 2, 1, "", "get_runhistory_encoder"]], "smac.facade.multi_fidelity_facade": [[36, 1, 1, "", "MultiFidelityFacade"]], "smac.facade.multi_fidelity_facade.MultiFidelityFacade": [[36, 2, 1, "", "get_initial_design"], [36, 2, 1, "", "get_intensifier"]], "smac.facade.random_facade": [[37, 1, 1, "", "RandomFacade"]], "smac.facade.random_facade.RandomFacade": [[37, 2, 1, "", "get_acquisition_function"], [37, 2, 1, "", "get_acquisition_maximizer"], [37, 2, 1, "", "get_initial_design"], [37, 2, 1, "", "get_intensifier"], [37, 2, 1, "", "get_model"], [37, 2, 1, "", "get_multi_objective_algorithm"], [37, 2, 1, "", "get_random_design"], [37, 2, 1, "", "get_runhistory_encoder"]], "smac.initial_design": [[38, 1, 1, "", "AbstractInitialDesign"], [38, 1, 1, "", "DefaultInitialDesign"], [38, 1, 1, "", "FactorialInitialDesign"], [38, 1, 1, "", "LatinHypercubeInitialDesign"], [38, 1, 1, "", "RandomInitialDesign"], [38, 1, 1, "", "SobolInitialDesign"], [39, 0, 0, "-", "abstract_initial_design"], [40, 0, 0, "-", "default_design"], [41, 0, 0, "-", "factorial_design"], [42, 0, 0, "-", "latin_hypercube_design"], [43, 0, 0, "-", "random_design"], [44, 0, 0, "-", "sobol_design"]], "smac.initial_design.AbstractInitialDesign": [[38, 2, 1, "", "get_meta"], [38, 2, 1, "", "select_configurations"]], "smac.initial_design.abstract_initial_design": [[39, 1, 1, "", "AbstractInitialDesign"]], "smac.initial_design.abstract_initial_design.AbstractInitialDesign": [[39, 2, 1, "", "get_meta"], [39, 2, 1, "", "select_configurations"]], "smac.initial_design.default_design": [[40, 1, 1, "", "DefaultInitialDesign"]], "smac.initial_design.factorial_design": [[41, 1, 1, "", "FactorialInitialDesign"]], "smac.initial_design.latin_hypercube_design": [[42, 1, 1, "", "LatinHypercubeInitialDesign"]], "smac.initial_design.random_design": [[43, 1, 1, "", "RandomInitialDesign"]], "smac.initial_design.sobol_design": [[44, 1, 1, "", "SobolInitialDesign"]], "smac.intensifier": [[45, 1, 1, "", "AbstractIntensifier"], [45, 1, 1, "", "AbstractParallelIntensifier"], [45, 1, 1, "", "Hyperband"], [45, 1, 1, "", "Intensifier"], [45, 1, 1, "", "SuccessiveHalving"], [46, 0, 0, "-", "abstract_intensifier"], [47, 0, 0, "-", "abstract_parallel_intensifier"], [48, 0, 0, "-", "hyperband"], [49, 0, 0, "-", "hyperband_worker"], [50, 0, 0, "-", "intensifier"], [51, 0, 0, "-", "stages"], [52, 0, 0, "-", "successive_halving"], [53, 0, 0, "-", "successive_halving_worker"]], "smac.intensifier.AbstractIntensifier": [[45, 2, 1, "", "get_meta"], [45, 2, 1, "", "get_next_run"], [45, 2, 1, "", "get_target_function_budgets"], [45, 2, 1, "", "get_target_function_instances"], [45, 2, 1, "", "get_target_function_seeds"], [45, 3, 1, "", "iteration_done"], [45, 3, 1, "", "num_trials"], [45, 2, 1, "", "process_results"], [45, 3, 1, "", "repeat_configs"], [45, 3, 1, "", "uses_budgets"], [45, 3, 1, "", "uses_instances"], [45, 3, 1, "", "uses_seeds"]], "smac.intensifier.AbstractParallelIntensifier": [[45, 2, 1, "", "get_meta"], [45, 2, 1, "", "get_next_run"], [45, 2, 1, "", "process_results"], [45, 3, 1, "", "uses_seeds"]], "smac.intensifier.Intensifier": [[45, 2, 1, "", "get_meta"], [45, 2, 1, "", "get_next_challenger"], [45, 2, 1, "", "get_next_run"], [45, 2, 1, "", "get_target_function_budgets"], [45, 2, 1, "", "get_target_function_instances"], [45, 2, 1, "", "get_target_function_seeds"], [45, 3, 1, "", "intensify_percentage"], [45, 2, 1, "", "process_results"], [45, 3, 1, "", "uses_budgets"], [45, 3, 1, "", "uses_instances"], [45, 3, 1, "", "uses_seeds"]], "smac.intensifier.SuccessiveHalving": [[45, 2, 1, "", "calculate_budgets"], [45, 2, 1, "", "get_meta"], [45, 2, 1, "", "get_target_function_budgets"], [45, 2, 1, "", "get_target_function_instances"], [45, 2, 1, "", "get_target_function_seeds"], [45, 3, 1, "", "uses_budgets"], [45, 3, 1, "", "uses_instances"]], "smac.intensifier.abstract_intensifier": [[46, 1, 1, "", "AbstractIntensifier"]], "smac.intensifier.abstract_intensifier.AbstractIntensifier": [[46, 2, 1, "", "get_meta"], [46, 2, 1, "", "get_next_run"], [46, 2, 1, "", "get_target_function_budgets"], [46, 2, 1, "", "get_target_function_instances"], [46, 2, 1, "", "get_target_function_seeds"], [46, 3, 1, "", "iteration_done"], [46, 3, 1, "", "num_trials"], [46, 2, 1, "", "process_results"], [46, 3, 1, "", "repeat_configs"], [46, 3, 1, "", "uses_budgets"], [46, 3, 1, "", "uses_instances"], [46, 3, 1, "", "uses_seeds"]], "smac.intensifier.abstract_parallel_intensifier": [[47, 1, 1, "", "AbstractParallelIntensifier"]], "smac.intensifier.abstract_parallel_intensifier.AbstractParallelIntensifier": [[47, 2, 1, "", "get_meta"], [47, 2, 1, "", "get_next_run"], [47, 2, 1, "", "process_results"], [47, 3, 1, "", "uses_seeds"]], "smac.intensifier.hyperband": [[48, 1, 1, "", "Hyperband"]], "smac.intensifier.hyperband_worker": [[49, 1, 1, "", "HyperbandWorker"]], "smac.intensifier.hyperband_worker.HyperbandWorker": [[49, 2, 1, "", "get_next_run"], [49, 2, 1, "", "process_results"], [49, 3, 1, "", "uses_budgets"], [49, 3, 1, "", "uses_instances"], [49, 3, 1, "", "uses_seeds"]], "smac.intensifier.intensifier": [[50, 1, 1, "", "Intensifier"]], "smac.intensifier.intensifier.Intensifier": [[50, 2, 1, "", "get_meta"], [50, 2, 1, "", "get_next_challenger"], [50, 2, 1, "", "get_next_run"], [50, 2, 1, "", "get_target_function_budgets"], [50, 2, 1, "", "get_target_function_instances"], [50, 2, 1, "", "get_target_function_seeds"], [50, 3, 1, "", "intensify_percentage"], [50, 2, 1, "", "process_results"], [50, 3, 1, "", "uses_budgets"], [50, 3, 1, "", "uses_instances"], [50, 3, 1, "", "uses_seeds"]], "smac.intensifier.stages": [[51, 1, 1, "", "IntensifierStage"]], "smac.intensifier.successive_halving": [[52, 1, 1, "", "SuccessiveHalving"]], "smac.intensifier.successive_halving.SuccessiveHalving": [[52, 2, 1, "", "calculate_budgets"], [52, 2, 1, "", "get_meta"], [52, 2, 1, "", "get_target_function_budgets"], [52, 2, 1, "", "get_target_function_instances"], [52, 2, 1, "", "get_target_function_seeds"], [52, 3, 1, "", "uses_budgets"], [52, 3, 1, "", "uses_instances"]], "smac.intensifier.successive_halving_worker": [[53, 1, 1, "", "SuccessiveHalvingWorker"]], "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker": [[53, 2, 1, "", "get_next_run"], [53, 2, 1, "", "get_target_function_budgets"], [53, 2, 1, "", "get_target_function_instances"], [53, 2, 1, "", "get_target_function_seeds"], [53, 2, 1, "", "process_results"], [53, 3, 1, "", "uses_budgets"], [53, 3, 1, "", "uses_instances"], [53, 3, 1, "", "uses_seeds"]], "smac.main": [[54, 1, 1, "", "BaseSMBO"], [54, 1, 1, "", "SMBO"], [55, 0, 0, "-", "base_smbo"], [56, 0, 0, "-", "boing"], [57, 0, 0, "-", "smbo"], [58, 0, 0, "-", "turbo"]], "smac.main.BaseSMBO": [[54, 2, 1, "", "ask"], [54, 4, 1, "", "config"], [54, 4, 1, "", "config_space"], [54, 2, 1, "", "get_next_configurations"], [54, 4, 1, "", "incumbent"], [54, 4, 1, "", "initial_design"], [54, 4, 1, "", "initial_design_configs"], [54, 4, 1, "", "intensifier"], [54, 4, 1, "", "rng"], [54, 2, 1, "", "run"], [54, 4, 1, "", "runhistory"], [54, 4, 1, "", "runner"], [54, 2, 1, "", "save"], [54, 4, 1, "", "stats"], [54, 2, 1, "", "tell"], [54, 2, 1, "", "update_acquisition_function"], [54, 2, 1, "", "update_model"], [54, 2, 1, "", "validate"]], "smac.main.SMBO": [[54, 2, 1, "", "ask"], [54, 2, 1, "", "get_next_configurations"], [54, 2, 1, "", "tell"]], "smac.main.base_smbo": [[55, 1, 1, "", "BaseSMBO"]], "smac.main.base_smbo.BaseSMBO": [[55, 2, 1, "", "ask"], [55, 4, 1, "", "config"], [55, 4, 1, "", "config_space"], [55, 2, 1, "", "get_next_configurations"], [55, 4, 1, "", "incumbent"], [55, 4, 1, "", "initial_design"], [55, 4, 1, "", "initial_design_configs"], [55, 4, 1, "", "intensifier"], [55, 4, 1, "", "rng"], [55, 2, 1, "", "run"], [55, 4, 1, "", "runhistory"], [55, 4, 1, "", "runner"], [55, 2, 1, "", "save"], [55, 4, 1, "", "stats"], [55, 2, 1, "", "tell"], [55, 2, 1, "", "update_acquisition_function"], [55, 2, 1, "", "update_model"], [55, 2, 1, "", "validate"]], "smac.main.smbo": [[57, 1, 1, "", "SMBO"]], "smac.main.smbo.SMBO": [[57, 2, 1, "", "ask"], [57, 2, 1, "", "get_next_configurations"], [57, 2, 1, "", "tell"]], "smac.model": [[59, 1, 1, "", "AbstractModel"], [59, 1, 1, "", "MultiObjectiveModel"], [59, 1, 1, "", "RandomModel"], [60, 0, 0, "-", "abstract_model"], [61, 0, 0, "-", "gaussian_process"], [78, 0, 0, "-", "multi_objective_model"], [79, 0, 0, "-", "random_forest"], [82, 0, 0, "-", "random_model"]], "smac.model.AbstractModel": [[59, 2, 1, "", "get_meta"], [59, 2, 1, "", "predict"], [59, 2, 1, "", "predict_marginalized"], [59, 2, 1, "", "train"]], "smac.model.MultiObjectiveModel": [[59, 3, 1, "", "models"], [59, 2, 1, "", "predict_marginalized"]], "smac.model.abstract_model": [[60, 1, 1, "", "AbstractModel"]], "smac.model.abstract_model.AbstractModel": [[60, 2, 1, "", "get_meta"], [60, 2, 1, "", "predict"], [60, 2, 1, "", "predict_marginalized"], [60, 2, 1, "", "train"]], "smac.model.gaussian_process": [[61, 1, 1, "", "AbstractGaussianProcess"], [61, 1, 1, "", "GaussianProcess"], [61, 1, 1, "", "MCMCGaussianProcess"], [62, 0, 0, "-", "abstract_gaussian_process"], [63, 0, 0, "-", "gaussian_process"], [64, 0, 0, "-", "gpytorch_gaussian_process"], [65, 0, 0, "-", "kernels"], [71, 0, 0, "-", "mcmc_gaussian_process"], [72, 0, 0, "-", "priors"]], "smac.model.gaussian_process.AbstractGaussianProcess": [[61, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.GaussianProcess": [[61, 2, 1, "", "get_meta"], [61, 2, 1, "", "sample_functions"]], "smac.model.gaussian_process.MCMCGaussianProcess": [[61, 2, 1, "", "get_meta"], [61, 3, 1, "", "models"]], "smac.model.gaussian_process.abstract_gaussian_process": [[62, 1, 1, "", "AbstractGaussianProcess"]], "smac.model.gaussian_process.abstract_gaussian_process.AbstractGaussianProcess": [[62, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.gaussian_process": [[63, 1, 1, "", "GaussianProcess"]], "smac.model.gaussian_process.gaussian_process.GaussianProcess": [[63, 2, 1, "", "get_meta"], [63, 2, 1, "", "sample_functions"]], "smac.model.gaussian_process.kernels": [[65, 1, 1, "", "AbstractKernel"], [65, 1, 1, "", "ConstantKernel"], [65, 1, 1, "", "HammingKernel"], [65, 1, 1, "", "MaternKernel"], [65, 1, 1, "", "ProductKernel"], [65, 1, 1, "", "RBFKernel"], [65, 1, 1, "", "SumKernel"], [65, 1, 1, "", "WhiteKernel"], [66, 0, 0, "-", "base_kernels"], [67, 0, 0, "-", "hamming_kernel"], [68, 0, 0, "-", "matern_kernel"], [69, 0, 0, "-", "rbf_kernel"], [70, 0, 0, "-", "white_kernel"]], "smac.model.gaussian_process.kernels.AbstractKernel": [[65, 2, 1, "", "__call__"], [65, 2, 1, "", "get_meta"], [65, 2, 1, "", "get_params"], [65, 4, 1, "", "has_conditions"], [65, 3, 1, "", "hyperparameters"], [65, 3, 1, "", "n_dims"], [65, 4, 1, "", "operate_on"], [65, 4, 1, "", "prior"]], "smac.model.gaussian_process.kernels.ConstantKernel": [[65, 2, 1, "", "__call__"]], "smac.model.gaussian_process.kernels.HammingKernel": [[65, 2, 1, "", "get_meta"], [65, 3, 1, "", "hyperparameter_length_scale"]], "smac.model.gaussian_process.kernels.ProductKernel": [[65, 2, 1, "", "__call__"]], "smac.model.gaussian_process.kernels.SumKernel": [[65, 2, 1, "", "__call__"]], "smac.model.gaussian_process.kernels.base_kernels": [[66, 1, 1, "", "AbstractKernel"], [66, 1, 1, "", "ConstantKernel"], [66, 1, 1, "", "ProductKernel"], [66, 1, 1, "", "SumKernel"]], "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel": [[66, 2, 1, "", "__call__"], [66, 2, 1, "", "get_meta"], [66, 2, 1, "", "get_params"], [66, 4, 1, "", "has_conditions"], [66, 3, 1, "", "hyperparameters"], [66, 3, 1, "", "n_dims"], [66, 4, 1, "", "operate_on"], [66, 4, 1, "", "prior"]], "smac.model.gaussian_process.kernels.base_kernels.ConstantKernel": [[66, 2, 1, "", "__call__"]], "smac.model.gaussian_process.kernels.base_kernels.ProductKernel": [[66, 2, 1, "", "__call__"]], "smac.model.gaussian_process.kernels.base_kernels.SumKernel": [[66, 2, 1, "", "__call__"]], "smac.model.gaussian_process.kernels.hamming_kernel": [[67, 1, 1, "", "HammingKernel"]], "smac.model.gaussian_process.kernels.hamming_kernel.HammingKernel": [[67, 2, 1, "", "get_meta"], [67, 3, 1, "", "hyperparameter_length_scale"]], "smac.model.gaussian_process.kernels.matern_kernel": [[68, 1, 1, "", "MaternKernel"]], "smac.model.gaussian_process.kernels.rbf_kernel": [[69, 1, 1, "", "RBFKernel"]], "smac.model.gaussian_process.kernels.white_kernel": [[70, 1, 1, "", "WhiteKernel"]], "smac.model.gaussian_process.mcmc_gaussian_process": [[71, 1, 1, "", "MCMCGaussianProcess"]], "smac.model.gaussian_process.mcmc_gaussian_process.MCMCGaussianProcess": [[71, 2, 1, "", "get_meta"], [71, 3, 1, "", "models"]], "smac.model.gaussian_process.priors": [[72, 1, 1, "", "GammaPrior"], [72, 1, 1, "", "HorseshoePrior"], [72, 1, 1, "", "LogNormalPrior"], [72, 1, 1, "", "SoftTopHatPrior"], [72, 1, 1, "", "TophatPrior"], [73, 0, 0, "-", "abstract_prior"], [74, 0, 0, "-", "gamma_prior"], [75, 0, 0, "-", "horseshoe_prior"], [76, 0, 0, "-", "log_normal_prior"], [77, 0, 0, "-", "tophat_prior"]], "smac.model.gaussian_process.priors.GammaPrior": [[72, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.priors.HorseshoePrior": [[72, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.priors.LogNormalPrior": [[72, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.priors.SoftTopHatPrior": [[72, 2, 1, "", "get_gradient"], [72, 2, 1, "", "get_log_probability"], [72, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.priors.TophatPrior": [[72, 2, 1, "", "get_gradient"], [72, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.priors.abstract_prior": [[73, 1, 1, "", "AbstractPrior"]], "smac.model.gaussian_process.priors.abstract_prior.AbstractPrior": [[73, 2, 1, "", "get_gradient"], [73, 2, 1, "", "get_log_probability"], [73, 2, 1, "", "get_meta"], [73, 2, 1, "", "sample_from_prior"]], "smac.model.gaussian_process.priors.gamma_prior": [[74, 1, 1, "", "GammaPrior"]], "smac.model.gaussian_process.priors.gamma_prior.GammaPrior": [[74, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.priors.horseshoe_prior": [[75, 1, 1, "", "HorseshoePrior"]], "smac.model.gaussian_process.priors.horseshoe_prior.HorseshoePrior": [[75, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.priors.log_normal_prior": [[76, 1, 1, "", "LogNormalPrior"]], "smac.model.gaussian_process.priors.log_normal_prior.LogNormalPrior": [[76, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.priors.tophat_prior": [[77, 1, 1, "", "SoftTopHatPrior"], [77, 1, 1, "", "TophatPrior"]], "smac.model.gaussian_process.priors.tophat_prior.SoftTopHatPrior": [[77, 2, 1, "", "get_gradient"], [77, 2, 1, "", "get_log_probability"], [77, 2, 1, "", "get_meta"]], "smac.model.gaussian_process.priors.tophat_prior.TophatPrior": [[77, 2, 1, "", "get_gradient"], [77, 2, 1, "", "get_meta"]], "smac.model.multi_objective_model": [[78, 1, 1, "", "MultiObjectiveModel"]], "smac.model.multi_objective_model.MultiObjectiveModel": [[78, 3, 1, "", "models"], [78, 2, 1, "", "predict_marginalized"]], "smac.model.random_forest": [[79, 1, 1, "", "AbstractRandomForest"], [79, 1, 1, "", "RandomForest"], [80, 0, 0, "-", "abstract_random_forest"], [81, 0, 0, "-", "random_forest"]], "smac.model.random_forest.RandomForest": [[79, 2, 1, "", "get_meta"], [79, 2, 1, "", "predict_marginalized"]], "smac.model.random_forest.abstract_random_forest": [[80, 1, 1, "", "AbstractRandomForest"]], "smac.model.random_forest.random_forest": [[81, 1, 1, "", "RandomForest"]], "smac.model.random_forest.random_forest.RandomForest": [[81, 2, 1, "", "get_meta"], [81, 2, 1, "", "predict_marginalized"]], "smac.model.random_model": [[82, 1, 1, "", "RandomModel"]], "smac.multi_objective": [[83, 1, 1, "", "AbstractMultiObjectiveAlgorithm"], [83, 1, 1, "", "MeanAggregationStrategy"], [83, 1, 1, "", "ParEGO"], [84, 0, 0, "-", "abstract_multi_objective_algorithm"], [85, 0, 0, "-", "aggregation_strategy"], [86, 0, 0, "-", "parego"]], "smac.multi_objective.AbstractMultiObjectiveAlgorithm": [[83, 2, 1, "", "__call__"], [83, 2, 1, "", "get_meta"], [83, 2, 1, "", "update_on_iteration_start"]], "smac.multi_objective.MeanAggregationStrategy": [[83, 2, 1, "", "__call__"]], "smac.multi_objective.ParEGO": [[83, 2, 1, "", "__call__"], [83, 2, 1, "", "get_meta"], [83, 2, 1, "", "update_on_iteration_start"]], "smac.multi_objective.abstract_multi_objective_algorithm": [[84, 1, 1, "", "AbstractMultiObjectiveAlgorithm"]], "smac.multi_objective.abstract_multi_objective_algorithm.AbstractMultiObjectiveAlgorithm": [[84, 2, 1, "", "__call__"], [84, 2, 1, "", "get_meta"], [84, 2, 1, "", "update_on_iteration_start"]], "smac.multi_objective.aggregation_strategy": [[85, 1, 1, "", "MeanAggregationStrategy"]], "smac.multi_objective.aggregation_strategy.MeanAggregationStrategy": [[85, 2, 1, "", "__call__"]], "smac.multi_objective.parego": [[86, 1, 1, "", "ParEGO"]], "smac.multi_objective.parego.ParEGO": [[86, 2, 1, "", "__call__"], [86, 2, 1, "", "get_meta"], [86, 2, 1, "", "update_on_iteration_start"]], "smac.random_design": [[87, 1, 1, "", "AbstractRandomDesign"], [87, 1, 1, "", "CosineAnnealingRandomDesign"], [87, 1, 1, "", "DynamicModulusRandomDesign"], [87, 1, 1, "", "DynamicProbabilityRandomDesign"], [87, 1, 1, "", "ModulusRandomDesign"], [87, 1, 1, "", "ProbabilityRandomDesign"], [88, 0, 0, "-", "abstract_random_design"], [89, 0, 0, "-", "annealing_design"], [90, 0, 0, "-", "modulus_design"], [91, 0, 0, "-", "probability_design"]], "smac.random_design.AbstractRandomDesign": [[87, 2, 1, "", "check"], [87, 2, 1, "", "get_meta"], [87, 2, 1, "", "next_iteration"]], "smac.random_design.CosineAnnealingRandomDesign": [[87, 2, 1, "", "check"], [87, 2, 1, "", "get_meta"], [87, 2, 1, "", "next_iteration"]], "smac.random_design.DynamicModulusRandomDesign": [[87, 2, 1, "", "check"], [87, 2, 1, "", "get_meta"], [87, 2, 1, "", "next_iteration"]], "smac.random_design.DynamicProbabilityRandomDesign": [[87, 2, 1, "", "check"], [87, 2, 1, "", "get_meta"], [87, 2, 1, "", "next_iteration"]], "smac.random_design.ModulusRandomDesign": [[87, 2, 1, "", "check"], [87, 2, 1, "", "get_meta"]], "smac.random_design.ProbabilityRandomDesign": [[87, 2, 1, "", "check"], [87, 2, 1, "", "get_meta"]], "smac.random_design.abstract_random_design": [[88, 1, 1, "", "AbstractRandomDesign"]], "smac.random_design.abstract_random_design.AbstractRandomDesign": [[88, 2, 1, "", "check"], [88, 2, 1, "", "get_meta"], [88, 2, 1, "", "next_iteration"]], "smac.random_design.annealing_design": [[89, 1, 1, "", "CosineAnnealingRandomDesign"]], "smac.random_design.annealing_design.CosineAnnealingRandomDesign": [[89, 2, 1, "", "check"], [89, 2, 1, "", "get_meta"], [89, 2, 1, "", "next_iteration"]], "smac.random_design.modulus_design": [[90, 1, 1, "", "DynamicModulusRandomDesign"], [90, 1, 1, "", "ModulusRandomDesign"]], "smac.random_design.modulus_design.DynamicModulusRandomDesign": [[90, 2, 1, "", "check"], [90, 2, 1, "", "get_meta"], [90, 2, 1, "", "next_iteration"]], "smac.random_design.modulus_design.ModulusRandomDesign": [[90, 2, 1, "", "check"], [90, 2, 1, "", "get_meta"]], "smac.random_design.probability_design": [[91, 1, 1, "", "DynamicProbabilityRandomDesign"], [91, 1, 1, "", "ProbabilityRandomDesign"]], "smac.random_design.probability_design.DynamicProbabilityRandomDesign": [[91, 2, 1, "", "check"], [91, 2, 1, "", "get_meta"], [91, 2, 1, "", "next_iteration"]], "smac.random_design.probability_design.ProbabilityRandomDesign": [[91, 2, 1, "", "check"], [91, 2, 1, "", "get_meta"]], "smac.runhistory": [[92, 1, 1, "", "DataOrigin"], [92, 1, 1, "", "InstanceSeedBudgetKey"], [92, 1, 1, "", "InstanceSeedKey"], [92, 1, 1, "", "RunHistory"], [92, 1, 1, "", "StatusType"], [92, 1, 1, "", "TrialInfo"], [92, 1, 1, "", "TrialInfoIntent"], [92, 1, 1, "", "TrialKey"], [92, 1, 1, "", "TrialValue"], [93, 0, 0, "-", "dataclasses"], [94, 0, 0, "-", "encoder"], [104, 0, 0, "-", "enumerations"], [105, 0, 0, "-", "runhistory"]], "smac.runhistory.RunHistory": [[92, 2, 1, "", "__contains__"], [92, 2, 1, "", "__eq__"], [92, 2, 1, "", "__getitem__"], [92, 2, 1, "", "__iter__"], [92, 2, 1, "", "__len__"], [92, 2, 1, "", "add"], [92, 2, 1, "", "average_cost"], [92, 3, 1, "", "config_ids"], [92, 2, 1, "", "empty"], [92, 2, 1, "", "get_configs"], [92, 2, 1, "", "get_configs_per_budget"], [92, 2, 1, "", "get_cost"], [92, 2, 1, "", "get_incumbent"], [92, 2, 1, "", "get_min_cost"], [92, 2, 1, "", "get_trials"], [92, 3, 1, "", "ids_config"], [92, 2, 1, "", "incremental_update_cost"], [92, 2, 1, "", "load_json"], [92, 2, 1, "", "min_cost"], [92, 3, 1, "", "objective_bounds"], [92, 2, 1, "", "reset"], [92, 2, 1, "", "save_json"], [92, 2, 1, "", "sum_cost"], [92, 2, 1, "", "update"], [92, 2, 1, "", "update_cost"], [92, 2, 1, "", "update_costs"], [92, 2, 1, "", "update_from_json"]], "smac.runhistory.dataclasses": [[93, 1, 1, "", "InstanceSeedBudgetKey"], [93, 1, 1, "", "InstanceSeedKey"], [93, 1, 1, "", "TrajectoryItem"], [93, 1, 1, "", "TrialInfo"], [93, 1, 1, "", "TrialKey"], [93, 1, 1, "", "TrialValue"]], "smac.runhistory.encoder": [[94, 1, 1, "", "AbstractRunHistoryEncoder"], [94, 1, 1, "", "RunHistoryEIPSEncoder"], [94, 1, 1, "", "RunHistoryEncoder"], [94, 1, 1, "", "RunHistoryInverseScaledEncoder"], [94, 1, 1, "", "RunHistoryLogEncoder"], [94, 1, 1, "", "RunHistoryLogScaledEncoder"], [94, 1, 1, "", "RunHistoryRawEncoder"], [94, 1, 1, "", "RunHistoryRawScaledEncoder"], [94, 1, 1, "", "RunHistoryScaledEncoder"], [94, 1, 1, "", "RunHistorySqrtScaledEncoder"], [95, 0, 0, "-", "abstract_encoder"], [96, 0, 0, "-", "boing_encoder"], [97, 0, 0, "-", "eips_encoder"], [98, 0, 0, "-", "encoder"], [99, 0, 0, "-", "inverse_scaled_encoder"], [100, 0, 0, "-", "log_encoder"], [101, 0, 0, "-", "log_scaled_encoder"], [102, 0, 0, "-", "scaled_encoder"], [103, 0, 0, "-", "sqrt_scaled_encoder"]], "smac.runhistory.encoder.AbstractRunHistoryEncoder": [[94, 2, 1, "", "get_configurations"], [94, 2, 1, "", "get_meta"], [94, 2, 1, "", "transform"], [94, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.RunHistoryEIPSEncoder": [[94, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.RunHistoryEncoder": [[94, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.RunHistoryInverseScaledEncoder": [[94, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.RunHistoryLogEncoder": [[94, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.RunHistoryLogScaledEncoder": [[94, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.RunHistoryRawEncoder": [[94, 2, 1, "", "transform_raw_values"], [94, 2, 1, "", "transform_response_values"], [94, 2, 1, "", "transform_with_raw"]], "smac.runhistory.encoder.RunHistoryRawScaledEncoder": [[94, 2, 1, "", "transform_raw_values"]], "smac.runhistory.encoder.RunHistoryScaledEncoder": [[94, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.RunHistorySqrtScaledEncoder": [[94, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.abstract_encoder": [[95, 1, 1, "", "AbstractRunHistoryEncoder"]], "smac.runhistory.encoder.abstract_encoder.AbstractRunHistoryEncoder": [[95, 2, 1, "", "get_configurations"], [95, 2, 1, "", "get_meta"], [95, 2, 1, "", "transform"], [95, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.boing_encoder": [[96, 1, 1, "", "RunHistoryRawEncoder"], [96, 1, 1, "", "RunHistoryRawScaledEncoder"]], "smac.runhistory.encoder.boing_encoder.RunHistoryRawEncoder": [[96, 2, 1, "", "transform_raw_values"], [96, 2, 1, "", "transform_response_values"], [96, 2, 1, "", "transform_with_raw"]], "smac.runhistory.encoder.boing_encoder.RunHistoryRawScaledEncoder": [[96, 2, 1, "", "transform_raw_values"]], "smac.runhistory.encoder.eips_encoder": [[97, 1, 1, "", "RunHistoryEIPSEncoder"]], "smac.runhistory.encoder.eips_encoder.RunHistoryEIPSEncoder": [[97, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.encoder": [[98, 1, 1, "", "RunHistoryEncoder"]], "smac.runhistory.encoder.encoder.RunHistoryEncoder": [[98, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.inverse_scaled_encoder": [[99, 1, 1, "", "RunHistoryInverseScaledEncoder"]], "smac.runhistory.encoder.inverse_scaled_encoder.RunHistoryInverseScaledEncoder": [[99, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.log_encoder": [[100, 1, 1, "", "RunHistoryLogEncoder"]], "smac.runhistory.encoder.log_encoder.RunHistoryLogEncoder": [[100, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.log_scaled_encoder": [[101, 1, 1, "", "RunHistoryLogScaledEncoder"]], "smac.runhistory.encoder.log_scaled_encoder.RunHistoryLogScaledEncoder": [[101, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.scaled_encoder": [[102, 1, 1, "", "RunHistoryScaledEncoder"]], "smac.runhistory.encoder.scaled_encoder.RunHistoryScaledEncoder": [[102, 2, 1, "", "transform_response_values"]], "smac.runhistory.encoder.sqrt_scaled_encoder": [[103, 1, 1, "", "RunHistorySqrtScaledEncoder"]], "smac.runhistory.encoder.sqrt_scaled_encoder.RunHistorySqrtScaledEncoder": [[103, 2, 1, "", "transform_response_values"]], "smac.runhistory.enumerations": [[104, 1, 1, "", "DataOrigin"], [104, 1, 1, "", "StatusType"], [104, 1, 1, "", "TrialInfoIntent"]], "smac.runhistory.runhistory": [[105, 1, 1, "", "RunHistory"]], "smac.runhistory.runhistory.RunHistory": [[105, 2, 1, "", "__contains__"], [105, 2, 1, "", "__eq__"], [105, 2, 1, "", "__getitem__"], [105, 2, 1, "", "__iter__"], [105, 2, 1, "", "__len__"], [105, 2, 1, "", "add"], [105, 2, 1, "", "average_cost"], [105, 3, 1, "", "config_ids"], [105, 2, 1, "", "empty"], [105, 2, 1, "", "get_configs"], [105, 2, 1, "", "get_configs_per_budget"], [105, 2, 1, "", "get_cost"], [105, 2, 1, "", "get_incumbent"], [105, 2, 1, "", "get_min_cost"], [105, 2, 1, "", "get_trials"], [105, 3, 1, "", "ids_config"], [105, 2, 1, "", "incremental_update_cost"], [105, 2, 1, "", "load_json"], [105, 2, 1, "", "min_cost"], [105, 3, 1, "", "objective_bounds"], [105, 2, 1, "", "reset"], [105, 2, 1, "", "save_json"], [105, 2, 1, "", "sum_cost"], [105, 2, 1, "", "update"], [105, 2, 1, "", "update_cost"], [105, 2, 1, "", "update_costs"], [105, 2, 1, "", "update_from_json"]], "smac.runner": [[106, 1, 1, "", "AbstractRunner"], [106, 1, 1, "", "DaskParallelRunner"], [106, 5, 1, "", "FirstRunCrashedException"], [106, 5, 1, "", "TargetAlgorithmAbortException"], [106, 1, 1, "", "TargetFunctionRunner"], [107, 0, 0, "-", "abstract_runner"], [108, 0, 0, "-", "dask_runner"], [109, 0, 0, "-", "exceptions"], [110, 0, 0, "-", "target_function_runner"]], "smac.runner.AbstractRunner": [[106, 2, 1, "", "count_available_workers"], [106, 2, 1, "", "get_meta"], [106, 2, 1, "", "is_running"], [106, 2, 1, "", "iter_results"], [106, 2, 1, "", "run"], [106, 2, 1, "", "run_wrapper"], [106, 2, 1, "", "submit_trial"], [106, 2, 1, "", "wait"]], "smac.runner.DaskParallelRunner": [[106, 2, 1, "", "__del__"], [106, 2, 1, "", "close"], [106, 2, 1, "", "count_available_workers"], [106, 2, 1, "", "is_running"], [106, 2, 1, "", "iter_results"], [106, 2, 1, "", "run"], [106, 2, 1, "", "submit_trial"], [106, 2, 1, "", "wait"]], "smac.runner.TargetFunctionRunner": [[106, 2, 1, "", "__call__"], [106, 2, 1, "", "count_available_workers"], [106, 2, 1, "", "is_running"], [106, 2, 1, "", "iter_results"], [106, 2, 1, "", "run"], [106, 2, 1, "", "submit_trial"], [106, 2, 1, "", "wait"]], "smac.runner.abstract_runner": [[107, 1, 1, "", "AbstractRunner"]], "smac.runner.abstract_runner.AbstractRunner": [[107, 2, 1, "", "count_available_workers"], [107, 2, 1, "", "get_meta"], [107, 2, 1, "", "is_running"], [107, 2, 1, "", "iter_results"], [107, 2, 1, "", "run"], [107, 2, 1, "", "run_wrapper"], [107, 2, 1, "", "submit_trial"], [107, 2, 1, "", "wait"]], "smac.runner.dask_runner": [[108, 1, 1, "", "DaskParallelRunner"]], "smac.runner.dask_runner.DaskParallelRunner": [[108, 2, 1, "", "__del__"], [108, 2, 1, "", "close"], [108, 2, 1, "", "count_available_workers"], [108, 2, 1, "", "is_running"], [108, 2, 1, "", "iter_results"], [108, 2, 1, "", "run"], [108, 2, 1, "", "submit_trial"], [108, 2, 1, "", "wait"]], "smac.runner.exceptions": [[109, 5, 1, "", "FirstRunCrashedException"], [109, 5, 1, "", "TargetAlgorithmAbortException"]], "smac.runner.target_function_runner": [[110, 1, 1, "", "TargetFunctionRunner"]], "smac.runner.target_function_runner.TargetFunctionRunner": [[110, 2, 1, "", "__call__"], [110, 2, 1, "", "count_available_workers"], [110, 2, 1, "", "is_running"], [110, 2, 1, "", "iter_results"], [110, 2, 1, "", "run"], [110, 2, 1, "", "submit_trial"], [110, 2, 1, "", "wait"]], "smac.scenario": [[111, 1, 1, "", "Scenario"]], "smac.scenario.Scenario": [[111, 2, 1, "", "__post_init__"], [111, 2, 1, "", "count_instance_features"], [111, 2, 1, "", "count_objectives"], [111, 2, 1, "", "get_meta"], [111, 2, 1, "", "load"], [111, 2, 1, "", "save"]], "smac.utils": [[113, 0, 0, "-", "configspace"], [114, 0, 0, "-", "data_structures"], [115, 0, 0, "-", "logging"], [116, 0, 0, "-", "multi_objective"], [117, 0, 0, "-", "subspaces"]], "smac.utils.configspace": [[113, 6, 1, "", "convert_configurations_to_array"], [113, 6, 1, "", "get_conditional_hyperparameters"], [113, 6, 1, "", "get_types"]], "smac.utils.data_structures": [[114, 6, 1, "", "recursively_compare_dicts"]], "smac.utils.logging": [[115, 6, 1, "", "format_array"], [115, 6, 1, "", "get_logger"], [115, 6, 1, "", "setup_logging"]], "smac.utils.multi_objective": [[116, 6, 1, "", "normalize_costs"]], "smac.utils.subspaces": [[118, 0, 0, "-", "boing_subspace"], [119, 0, 0, "-", "turbo_subspace"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"ask": [0, 123], "tell": [0, 123], "interfac": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123], "call": 0, "without": 0, "callback": [1, 27], "exampl": [1, 136, 143], "facad": [2, 29, 30, 31, 32, 33, 34, 35, 36, 37, 138], "inherit": 2, "advanc": 3, "usag": [3, 6], "instanc": [4, 130, 136], "featur": [4, 144], "multi": [5, 128, 130, 133, 136], "object": [5, 133, 136], "optim": 5, "parallel": 6, "commandlin": [6, 135, 136], "python": 6, "reproduc": 7, "resumpt": 8, "run": 9, "histori": 9, "iter": 9, "over": [9, 124], "api": 10, "refer": [10, 145], "smac": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], "acquisit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "modul": [11, 12, 20, 29, 38, 45, 54, 59, 61, 65, 72, 79, 83, 87, 92, 94, 106, 112, 117], "function": [12, 13, 14, 15, 16, 17, 18, 19, 113, 114, 115, 116, 121, 132, 138], "abstract_acquisition_funct": 13, "class": [13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 60, 62, 63, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111], "confidence_bound": 14, "expected_improv": 15, "integrated_acquisition_funct": 16, "prior_acqusition_funct": 17, "probability_improv": 18, "thompson": 19, "maxim": [20, 21, 22, 23, 24, 25, 26], "abstract_acqusition_maxim": 21, "differential_evolut": 22, "helper": 23, "local_and_random_search": 24, "local_search": 25, "random_search": 26, "constant": 28, "abstract_facad": 30, "algorithm_configuration_facad": 31, "blackbox_facad": 32, "boing_facad": 33, "hyperband_facad": 34, "hyperparameter_facad": 35, "multi_fidelity_facad": 36, "random_facad": 37, "initial_design": [38, 39, 40, 41, 42, 43, 44], "abstract_initial_design": 39, "default_design": 40, "factorial_design": 41, "latin_hypercube_design": 42, "random_design": [43, 87, 88, 89, 90, 91], "sobol_design": 44, "intensifi": [45, 46, 47, 48, 49, 50, 51, 52, 53], "abstract_intensifi": 46, "abstract_parallel_intensifi": 47, "hyperband": 48, "hyperband_work": 49, "stage": 51, "successive_halv": 52, "successive_halving_work": 53, "main": [54, 55, 56, 57, 58], "base_smbo": 55, "bo": 56, "smbo": 57, "turbo": 58, "model": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "abstract_model": 60, "gaussian_process": [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "abstract_gaussian_process": 62, "gpytorch_gaussian_process": 64, "kernel": [65, 66, 67, 68, 69, 70], "base_kernel": 66, "hamming_kernel": 67, "matern_kernel": 68, "rbf_kernel": 69, "white_kernel": 70, "mcmc_gaussian_process": 71, "prior": [72, 73, 74, 75, 76, 77, 124], "abstract_prior": 73, "gamma_prior": 74, "horseshoe_prior": 75, "log_normal_prior": 76, "tophat_prior": 77, "multi_objective_model": 78, "random_forest": [79, 80, 81], "abstract_random_forest": 80, "random_model": 82, "multi_object": [83, 84, 85, 86, 116], "abstract_multi_objective_algorithm": 84, "aggregation_strategi": 85, "parego": 86, "abstract_random_design": 88, "annealing_design": 89, "modulus_design": 90, "probability_design": 91, "runhistori": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "dataclass": 93, "encod": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "abstract_encod": 95, "boing_encod": 96, "eips_encod": 97, "inverse_scaled_encod": 99, "log_encod": 100, "log_scaled_encod": 101, "scaled_encod": 102, "sqrt_scaled_encod": 103, "enumer": 104, "runner": [106, 107, 108, 109, 110], "abstract_runn": 107, "dask_runn": 108, "except": 109, "target_function_runn": 110, "scenario": [111, 138], "util": [112, 113, 114, 115, 116, 117, 118, 119], "configspac": 113, "data_structur": 114, "log": 115, "subspac": [117, 118, 119], "boing_subspac": 118, "turbo_subspac": 119, "synthet": 121, "support": 122, "vector": 122, "machin": 122, "cross": 122, "valid": 122, "user": 124, "optimum": 124, "full": 125, "custom": 125, "basic": [126, 136], "comput": [127, 131, 134], "time": [127, 131, 134], "layer": 128, "perceptron": 128, "us": 128, "multipl": [128, 129], "epoch": 128, "stochast": 129, "gradient": 129, "descent": 129, "On": 129, "dataset": 129, "fidel": [130, 136], "2d": 132, "schaffer": 132, "f": 137, "A": 137, "q": 137, "get": 138, "start": 138, "configur": 138, "space": 138, "target": 138, "glossari": 139, "home": 140, "contact": 140, "instal": 141, "requir": 141, "anaconda": 141, "conda": 141, "forg": 141, "licens": 142, "minim": 143, "packag": 144, "overview": 144, "compon": 144, "comparison": 144}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Ask-and-Tell Interface": [[0, "ask-and-tell-interface"], [123, "ask-and-tell-interface"]], "Calling Tell without Ask": [[0, "calling-tell-without-ask"]], "Callbacks": [[1, "callbacks"]], "Example": [[1, "example"]], "Facades": [[2, "facades"]], "Inheritance": [[2, "inheritance"]], "Advanced Usage": [[3, "advanced-usage"]], "Instances and Features": [[4, "instances-and-features"]], "Multi-Objective Optimization": [[5, "multi-objective-optimization"]], "Parallelism": [[6, "parallelism"]], "Commandline": [[6, "commandline"], [135, "commandline"], [136, "commandline"]], "Usage in Python": [[6, "usage-in-python"]], "Reproducability": [[7, "reproducability"]], "Resumption": [[8, "resumption"]], "Run-History": [[9, "run-history"]], "Iterating over Run-History": [[9, "iterating-over-run-history"]], "API References": [[10, "api-references"]], "smac.acquisition": [[11, "module-smac.acquisition"]], "Interfaces": [[11, "interfaces"], [12, "interfaces"], [13, "interfaces"], [14, "interfaces"], [15, "interfaces"], [16, "interfaces"], [17, "interfaces"], [18, "interfaces"], [19, "interfaces"], [20, "interfaces"], [21, "interfaces"], [22, "interfaces"], [23, "interfaces"], [24, "interfaces"], [25, "interfaces"], [26, "interfaces"], [27, "interfaces"], [28, "interfaces"], [29, "interfaces"], [30, "interfaces"], [31, "interfaces"], [32, "interfaces"], [33, "interfaces"], [34, "interfaces"], [35, "interfaces"], [36, "interfaces"], [37, "interfaces"], [38, "interfaces"], [39, "interfaces"], [40, "interfaces"], [41, "interfaces"], [42, "interfaces"], [43, "interfaces"], [44, "interfaces"], [45, "interfaces"], [46, "interfaces"], [47, "interfaces"], [48, "interfaces"], [49, "interfaces"], [50, "interfaces"], [51, "interfaces"], [52, "interfaces"], [53, "interfaces"], [54, "interfaces"], [55, "interfaces"], [56, "interfaces"], [57, "interfaces"], [58, "interfaces"], [59, "interfaces"], [60, "interfaces"], [61, "interfaces"], [62, "interfaces"], [63, "interfaces"], [64, "interfaces"], [65, "interfaces"], [66, "interfaces"], [67, "interfaces"], [68, "interfaces"], [69, "interfaces"], [70, "interfaces"], [71, "interfaces"], [72, "interfaces"], [73, "interfaces"], [74, "interfaces"], [75, "interfaces"], [76, "interfaces"], [77, "interfaces"], [78, "interfaces"], [79, "interfaces"], [80, "interfaces"], [81, "interfaces"], [82, "interfaces"], [83, "interfaces"], [84, "interfaces"], [85, "interfaces"], [86, "interfaces"], [87, "interfaces"], [88, "interfaces"], [89, "interfaces"], [90, "interfaces"], [91, "interfaces"], [92, "interfaces"], [93, "interfaces"], [94, "interfaces"], [95, "interfaces"], [96, "interfaces"], [97, "interfaces"], [98, "interfaces"], [99, "interfaces"], [100, "interfaces"], [101, "interfaces"], [102, "interfaces"], [103, "interfaces"], [104, "interfaces"], [105, "interfaces"], [106, "interfaces"], [107, "interfaces"], [108, "interfaces"], [109, "interfaces"], [110, "interfaces"], [111, "interfaces"], [112, "interfaces"], [113, "interfaces"], [114, "interfaces"], [115, "interfaces"], [116, "interfaces"], [117, "interfaces"], [118, "interfaces"], [119, "interfaces"]], "Modules": [[11, "modules"], [12, "modules"], [20, "modules"], [29, "modules"], [38, "modules"], [45, "modules"], [54, "modules"], [59, "modules"], [61, "modules"], [65, "modules"], [72, "modules"], [79, "modules"], [83, "modules"], [87, "modules"], [92, "modules"], [94, "modules"], [106, "modules"], [112, "modules"], [117, "modules"]], "smac.acquisition.functions": [[12, "module-smac.acquisition.functions"]], "smac.acquisition.functions.abstract_acquisition_function": [[13, "module-smac.acquisition.functions.abstract_acquisition_function"]], "Classes": [[13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [55, "classes"], [57, "classes"], [60, "classes"], [62, "classes"], [63, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [110, "classes"], [111, "classes"]], "smac.acquisition.functions.confidence_bound": [[14, "module-smac.acquisition.functions.confidence_bound"]], "smac.acquisition.functions.expected_improvement": [[15, "module-smac.acquisition.functions.expected_improvement"]], "smac.acquisition.functions.integrated_acquisition_function": [[16, "module-smac.acquisition.functions.integrated_acquisition_function"]], "smac.acquisition.functions.prior_acqusition_function": [[17, "module-smac.acquisition.functions.prior_acqusition_function"]], "smac.acquisition.functions.probability_improvement": [[18, "module-smac.acquisition.functions.probability_improvement"]], "smac.acquisition.functions.thompson": [[19, "module-smac.acquisition.functions.thompson"]], "smac.acquisition.maximizers": [[20, "module-smac.acquisition.maximizers"]], "smac.acquisition.maximizers.abstract_acqusition_maximizer": [[21, "module-smac.acquisition.maximizers.abstract_acqusition_maximizer"]], "smac.acquisition.maximizers.differential_evolution": [[22, "module-smac.acquisition.maximizers.differential_evolution"]], "smac.acquisition.maximizers.helpers": [[23, "module-smac.acquisition.maximizers.helpers"]], "smac.acquisition.maximizers.local_and_random_search": [[24, "module-smac.acquisition.maximizers.local_and_random_search"]], "smac.acquisition.maximizers.local_search": [[25, "module-smac.acquisition.maximizers.local_search"]], "smac.acquisition.maximizers.random_search": [[26, "module-smac.acquisition.maximizers.random_search"]], "smac.callback": [[27, "module-smac.callback"]], "smac.constants": [[28, "module-smac.constants"]], "smac.facade": [[29, "module-smac.facade"]], "smac.facade.abstract_facade": [[30, "module-smac.facade.abstract_facade"]], "smac.facade.algorithm_configuration_facade": [[31, "module-smac.facade.algorithm_configuration_facade"]], "smac.facade.blackbox_facade": [[32, "module-smac.facade.blackbox_facade"]], "smac.facade.boing_facade": [[33, "module-smac.facade.boing_facade"]], "smac.facade.hyperband_facade": [[34, "module-smac.facade.hyperband_facade"]], "smac.facade.hyperparameter_facade": [[35, "module-smac.facade.hyperparameter_facade"]], "smac.facade.multi_fidelity_facade": [[36, "module-smac.facade.multi_fidelity_facade"]], "smac.facade.random_facade": [[37, "module-smac.facade.random_facade"]], "smac.initial_design": [[38, "module-smac.initial_design"]], "smac.initial_design.abstract_initial_design": [[39, "module-smac.initial_design.abstract_initial_design"]], "smac.initial_design.default_design": [[40, "module-smac.initial_design.default_design"]], "smac.initial_design.factorial_design": [[41, "module-smac.initial_design.factorial_design"]], "smac.initial_design.latin_hypercube_design": [[42, "module-smac.initial_design.latin_hypercube_design"]], "smac.initial_design.random_design": [[43, "module-smac.initial_design.random_design"]], "smac.initial_design.sobol_design": [[44, "module-smac.initial_design.sobol_design"]], "smac.intensifier": [[45, "module-smac.intensifier"]], "smac.intensifier.abstract_intensifier": [[46, "module-smac.intensifier.abstract_intensifier"]], "smac.intensifier.abstract_parallel_intensifier": [[47, "module-smac.intensifier.abstract_parallel_intensifier"]], "smac.intensifier.hyperband": [[48, "module-smac.intensifier.hyperband"]], "smac.intensifier.hyperband_worker": [[49, "module-smac.intensifier.hyperband_worker"]], "smac.intensifier.intensifier": [[50, "module-smac.intensifier.intensifier"]], "smac.intensifier.stages": [[51, "module-smac.intensifier.stages"]], "smac.intensifier.successive_halving": [[52, "module-smac.intensifier.successive_halving"]], "smac.intensifier.successive_halving_worker": [[53, "module-smac.intensifier.successive_halving_worker"]], "smac.main": [[54, "module-smac.main"]], "smac.main.base_smbo": [[55, "module-smac.main.base_smbo"]], "smac.main.boing": [[56, "module-smac.main.boing"]], "smac.main.smbo": [[57, "module-smac.main.smbo"]], "smac.main.turbo": [[58, "module-smac.main.turbo"]], "smac.model": [[59, "module-smac.model"]], "smac.model.abstract_model": [[60, "module-smac.model.abstract_model"]], "smac.model.gaussian_process": [[61, "module-smac.model.gaussian_process"]], "smac.model.gaussian_process.abstract_gaussian_process": [[62, "module-smac.model.gaussian_process.abstract_gaussian_process"]], "smac.model.gaussian_process.gaussian_process": [[63, "module-smac.model.gaussian_process.gaussian_process"]], "smac.model.gaussian_process.gpytorch_gaussian_process": [[64, "module-smac.model.gaussian_process.gpytorch_gaussian_process"]], "smac.model.gaussian_process.kernels": [[65, "module-smac.model.gaussian_process.kernels"]], "smac.model.gaussian_process.kernels.base_kernels": [[66, "module-smac.model.gaussian_process.kernels.base_kernels"]], "smac.model.gaussian_process.kernels.hamming_kernel": [[67, "module-smac.model.gaussian_process.kernels.hamming_kernel"]], "smac.model.gaussian_process.kernels.matern_kernel": [[68, "module-smac.model.gaussian_process.kernels.matern_kernel"]], "smac.model.gaussian_process.kernels.rbf_kernel": [[69, "module-smac.model.gaussian_process.kernels.rbf_kernel"]], "smac.model.gaussian_process.kernels.white_kernel": [[70, "module-smac.model.gaussian_process.kernels.white_kernel"]], "smac.model.gaussian_process.mcmc_gaussian_process": [[71, "module-smac.model.gaussian_process.mcmc_gaussian_process"]], "smac.model.gaussian_process.priors": [[72, "module-smac.model.gaussian_process.priors"]], "smac.model.gaussian_process.priors.abstract_prior": [[73, "module-smac.model.gaussian_process.priors.abstract_prior"]], "smac.model.gaussian_process.priors.gamma_prior": [[74, "module-smac.model.gaussian_process.priors.gamma_prior"]], "smac.model.gaussian_process.priors.horseshoe_prior": [[75, "module-smac.model.gaussian_process.priors.horseshoe_prior"]], "smac.model.gaussian_process.priors.log_normal_prior": [[76, "module-smac.model.gaussian_process.priors.log_normal_prior"]], "smac.model.gaussian_process.priors.tophat_prior": [[77, "module-smac.model.gaussian_process.priors.tophat_prior"]], "smac.model.multi_objective_model": [[78, "module-smac.model.multi_objective_model"]], "smac.model.random_forest": [[79, "module-smac.model.random_forest"]], "smac.model.random_forest.abstract_random_forest": [[80, "module-smac.model.random_forest.abstract_random_forest"]], "smac.model.random_forest.random_forest": [[81, "module-smac.model.random_forest.random_forest"]], "smac.model.random_model": [[82, "module-smac.model.random_model"]], "smac.multi_objective": [[83, "module-smac.multi_objective"]], "smac.multi_objective.abstract_multi_objective_algorithm": [[84, "module-smac.multi_objective.abstract_multi_objective_algorithm"]], "smac.multi_objective.aggregation_strategy": [[85, "module-smac.multi_objective.aggregation_strategy"]], "smac.multi_objective.parego": [[86, "module-smac.multi_objective.parego"]], "smac.random_design": [[87, "module-smac.random_design"]], "smac.random_design.abstract_random_design": [[88, "module-smac.random_design.abstract_random_design"]], "smac.random_design.annealing_design": [[89, "module-smac.random_design.annealing_design"]], "smac.random_design.modulus_design": [[90, "module-smac.random_design.modulus_design"]], "smac.random_design.probability_design": [[91, "module-smac.random_design.probability_design"]], "smac.runhistory": [[92, "module-smac.runhistory"]], "smac.runhistory.dataclasses": [[93, "module-smac.runhistory.dataclasses"]], "smac.runhistory.encoder": [[94, "module-smac.runhistory.encoder"]], "smac.runhistory.encoder.abstract_encoder": [[95, "module-smac.runhistory.encoder.abstract_encoder"]], "smac.runhistory.encoder.boing_encoder": [[96, "module-smac.runhistory.encoder.boing_encoder"]], "smac.runhistory.encoder.eips_encoder": [[97, "module-smac.runhistory.encoder.eips_encoder"]], "smac.runhistory.encoder.encoder": [[98, "module-smac.runhistory.encoder.encoder"]], "smac.runhistory.encoder.inverse_scaled_encoder": [[99, "module-smac.runhistory.encoder.inverse_scaled_encoder"]], "smac.runhistory.encoder.log_encoder": [[100, "module-smac.runhistory.encoder.log_encoder"]], "smac.runhistory.encoder.log_scaled_encoder": [[101, "module-smac.runhistory.encoder.log_scaled_encoder"]], "smac.runhistory.encoder.scaled_encoder": [[102, "module-smac.runhistory.encoder.scaled_encoder"]], "smac.runhistory.encoder.sqrt_scaled_encoder": [[103, "module-smac.runhistory.encoder.sqrt_scaled_encoder"]], "smac.runhistory.enumerations": [[104, "module-smac.runhistory.enumerations"]], "smac.runhistory.runhistory": [[105, "module-smac.runhistory.runhistory"]], "smac.runner": [[106, "module-smac.runner"]], "smac.runner.abstract_runner": [[107, "module-smac.runner.abstract_runner"]], "smac.runner.dask_runner": [[108, "module-smac.runner.dask_runner"]], "smac.runner.exceptions": [[109, "module-smac.runner.exceptions"]], "Exceptions": [[109, "exceptions"]], "smac.runner.target_function_runner": [[110, "module-smac.runner.target_function_runner"]], "smac.scenario": [[111, "module-smac.scenario"]], "smac.utils": [[112, "module-smac.utils"]], "smac.utils.configspace": [[113, "module-smac.utils.configspace"]], "Functions": [[113, "functions"], [114, "functions"], [115, "functions"], [116, "functions"]], "smac.utils.data_structures": [[114, "module-smac.utils.data_structures"]], "smac.utils.logging": [[115, "module-smac.utils.logging"]], "smac.utils.multi_objective": [[116, "module-smac.utils.multi_objective"]], "smac.utils.subspaces": [[117, "module-smac.utils.subspaces"]], "smac.utils.subspaces.boing_subspace": [[118, "module-smac.utils.subspaces.boing_subspace"]], "smac.utils.subspaces.turbo_subspace": [[119, "module-smac.utils.subspaces.turbo_subspace"]], "Synthetic Function": [[121, "synthetic-function"]], "Support Vector Machine with Cross-Validation": [[122, "support-vector-machine-with-cross-validation"]], "User Priors over the Optimum": [[124, "user-priors-over-the-optimum"]], "Full Customization": [[125, "full-customization"]], "Basics": [[126, "basics"], [136, "basics"]], "Computation times": [[127, "computation-times"], [131, "computation-times"], [134, "computation-times"]], "Multi-Layer Perceptron Using Multiple Epochs": [[128, "multi-layer-perceptron-using-multiple-epochs"]], "Stochastic Gradient Descent On Multiple Datasets": [[129, "stochastic-gradient-descent-on-multiple-datasets"]], "Multi-Fidelity and Multi-Instances": [[130, "multi-fidelity-and-multi-instances"], [136, "multi-fidelity-and-multi-instances"]], "2D Schaffer Function": [[132, "d-schaffer-function"]], "Multi-Objective": [[133, "multi-objective"], [136, "multi-objective"]], "Examples": [[136, "examples"]], "F.A.Q.": [[137, "f-a-q"]], "Getting Started": [[138, "getting-started"]], "Configuration Space": [[138, "configuration-space"]], "Target Function": [[138, "target-function"]], "Scenario": [[138, "scenario"]], "Facade": [[138, "facade"]], "Glossary": [[139, "glossary"]], "Home": [[140, "home"]], "Contact": [[140, "contact"]], "Installation": [[141, "installation"]], "Requirements": [[141, "requirements"]], "Anaconda": [[141, "anaconda"]], "Conda-forge": [[141, "conda-forge"]], "License": [[142, "license"]], "Minimal Example": [[143, "minimal-example"]], "Package Overview": [[144, "package-overview"]], "Features": [[144, "features"]], "Components": [[144, "components"]], "Comparison": [[144, "comparison"]], "References": [[145, "references"]]}, "indexentries": {"module": [[11, "module-smac.acquisition"], [12, "module-smac.acquisition.functions"], [13, "module-smac.acquisition.functions.abstract_acquisition_function"], [14, "module-smac.acquisition.functions.confidence_bound"], [15, "module-smac.acquisition.functions.expected_improvement"], [16, "module-smac.acquisition.functions.integrated_acquisition_function"], [17, "module-smac.acquisition.functions.prior_acqusition_function"], [18, "module-smac.acquisition.functions.probability_improvement"], [19, "module-smac.acquisition.functions.thompson"], [20, "module-smac.acquisition.maximizers"], [21, "module-smac.acquisition.maximizers.abstract_acqusition_maximizer"], [22, "module-smac.acquisition.maximizers.differential_evolution"], [23, "module-smac.acquisition.maximizers.helpers"], [24, "module-smac.acquisition.maximizers.local_and_random_search"], [25, "module-smac.acquisition.maximizers.local_search"], [26, "module-smac.acquisition.maximizers.random_search"], [27, "module-smac.callback"], [28, "module-smac.constants"], [29, "module-smac.facade"], [30, "module-smac.facade.abstract_facade"], [31, "module-smac.facade.algorithm_configuration_facade"], [32, "module-smac.facade.blackbox_facade"], [33, "module-smac.facade.boing_facade"], [34, "module-smac.facade.hyperband_facade"], [35, "module-smac.facade.hyperparameter_facade"], [36, "module-smac.facade.multi_fidelity_facade"], [37, "module-smac.facade.random_facade"], [38, "module-smac.initial_design"], [39, "module-smac.initial_design.abstract_initial_design"], [40, "module-smac.initial_design.default_design"], [41, "module-smac.initial_design.factorial_design"], [42, "module-smac.initial_design.latin_hypercube_design"], [43, "module-smac.initial_design.random_design"], [44, "module-smac.initial_design.sobol_design"], [45, "module-smac.intensifier"], [46, "module-smac.intensifier.abstract_intensifier"], [47, "module-smac.intensifier.abstract_parallel_intensifier"], [48, "module-smac.intensifier.hyperband"], [49, "module-smac.intensifier.hyperband_worker"], [50, "module-smac.intensifier.intensifier"], [51, "module-smac.intensifier.stages"], [52, "module-smac.intensifier.successive_halving"], [53, "module-smac.intensifier.successive_halving_worker"], [54, "module-smac.main"], [55, "module-smac.main.base_smbo"], [56, "module-smac.main.boing"], [57, "module-smac.main.smbo"], [58, "module-smac.main.turbo"], [59, "module-smac.model"], [60, "module-smac.model.abstract_model"], [61, "module-smac.model.gaussian_process"], [62, "module-smac.model.gaussian_process.abstract_gaussian_process"], [63, "module-smac.model.gaussian_process.gaussian_process"], [64, "module-smac.model.gaussian_process.gpytorch_gaussian_process"], [65, "module-smac.model.gaussian_process.kernels"], [66, "module-smac.model.gaussian_process.kernels.base_kernels"], [67, "module-smac.model.gaussian_process.kernels.hamming_kernel"], [68, "module-smac.model.gaussian_process.kernels.matern_kernel"], [69, "module-smac.model.gaussian_process.kernels.rbf_kernel"], [70, "module-smac.model.gaussian_process.kernels.white_kernel"], [71, "module-smac.model.gaussian_process.mcmc_gaussian_process"], [72, "module-smac.model.gaussian_process.priors"], [73, "module-smac.model.gaussian_process.priors.abstract_prior"], [74, "module-smac.model.gaussian_process.priors.gamma_prior"], [75, "module-smac.model.gaussian_process.priors.horseshoe_prior"], [76, "module-smac.model.gaussian_process.priors.log_normal_prior"], [77, "module-smac.model.gaussian_process.priors.tophat_prior"], [78, "module-smac.model.multi_objective_model"], [79, "module-smac.model.random_forest"], [80, "module-smac.model.random_forest.abstract_random_forest"], [81, "module-smac.model.random_forest.random_forest"], [82, "module-smac.model.random_model"], [83, "module-smac.multi_objective"], [84, "module-smac.multi_objective.abstract_multi_objective_algorithm"], [85, "module-smac.multi_objective.aggregation_strategy"], [86, "module-smac.multi_objective.parego"], [87, "module-smac.random_design"], [88, "module-smac.random_design.abstract_random_design"], [89, "module-smac.random_design.annealing_design"], [90, "module-smac.random_design.modulus_design"], [91, "module-smac.random_design.probability_design"], [92, "module-smac.runhistory"], [93, "module-smac.runhistory.dataclasses"], [94, "module-smac.runhistory.encoder"], [95, "module-smac.runhistory.encoder.abstract_encoder"], [96, "module-smac.runhistory.encoder.boing_encoder"], [97, "module-smac.runhistory.encoder.eips_encoder"], [98, "module-smac.runhistory.encoder.encoder"], [99, "module-smac.runhistory.encoder.inverse_scaled_encoder"], [100, "module-smac.runhistory.encoder.log_encoder"], [101, "module-smac.runhistory.encoder.log_scaled_encoder"], [102, "module-smac.runhistory.encoder.scaled_encoder"], [103, "module-smac.runhistory.encoder.sqrt_scaled_encoder"], [104, "module-smac.runhistory.enumerations"], [105, "module-smac.runhistory.runhistory"], [106, "module-smac.runner"], [107, "module-smac.runner.abstract_runner"], [108, "module-smac.runner.dask_runner"], [109, "module-smac.runner.exceptions"], [110, "module-smac.runner.target_function_runner"], [111, "module-smac.scenario"], [112, "module-smac.utils"], [113, "module-smac.utils.configspace"], [114, "module-smac.utils.data_structures"], [115, "module-smac.utils.logging"], [116, "module-smac.utils.multi_objective"], [117, "module-smac.utils.subspaces"], [118, "module-smac.utils.subspaces.boing_subspace"], [119, "module-smac.utils.subspaces.turbo_subspace"]], "smac.acquisition": [[11, "module-smac.acquisition"]], "abstractacquisitionfunction (class in smac.acquisition.functions)": [[12, "smac.acquisition.functions.AbstractAcquisitionFunction"]], "ei (class in smac.acquisition.functions)": [[12, "smac.acquisition.functions.EI"]], "eips (class in smac.acquisition.functions)": [[12, "smac.acquisition.functions.EIPS"]], "integratedacquisitionfunction (class in smac.acquisition.functions)": [[12, "smac.acquisition.functions.IntegratedAcquisitionFunction"]], "lcb (class in smac.acquisition.functions)": [[12, "smac.acquisition.functions.LCB"]], "pi (class in smac.acquisition.functions)": [[12, "smac.acquisition.functions.PI"]], "prioracquisitionfunction (class in smac.acquisition.functions)": [[12, "smac.acquisition.functions.PriorAcquisitionFunction"]], "ts (class in smac.acquisition.functions)": [[12, "smac.acquisition.functions.TS"]], "__call__() (smac.acquisition.functions.abstractacquisitionfunction method)": [[12, "smac.acquisition.functions.AbstractAcquisitionFunction.__call__"]], "get_meta() (smac.acquisition.functions.abstractacquisitionfunction method)": [[12, "smac.acquisition.functions.AbstractAcquisitionFunction.get_meta"]], "get_meta() (smac.acquisition.functions.ei method)": [[12, "smac.acquisition.functions.EI.get_meta"]], "get_meta() (smac.acquisition.functions.integratedacquisitionfunction method)": [[12, "smac.acquisition.functions.IntegratedAcquisitionFunction.get_meta"]], "get_meta() (smac.acquisition.functions.lcb method)": [[12, "smac.acquisition.functions.LCB.get_meta"]], "get_meta() (smac.acquisition.functions.pi method)": [[12, "smac.acquisition.functions.PI.get_meta"]], "get_meta() (smac.acquisition.functions.prioracquisitionfunction method)": [[12, "smac.acquisition.functions.PriorAcquisitionFunction.get_meta"]], "smac.acquisition.functions": [[12, "module-smac.acquisition.functions"]], "update() (smac.acquisition.functions.abstractacquisitionfunction method)": [[12, "smac.acquisition.functions.AbstractAcquisitionFunction.update"]], "abstractacquisitionfunction (class in smac.acquisition.functions.abstract_acquisition_function)": [[13, "smac.acquisition.functions.abstract_acquisition_function.AbstractAcquisitionFunction"]], "__call__() (smac.acquisition.functions.abstract_acquisition_function.abstractacquisitionfunction method)": [[13, "smac.acquisition.functions.abstract_acquisition_function.AbstractAcquisitionFunction.__call__"]], "get_meta() (smac.acquisition.functions.abstract_acquisition_function.abstractacquisitionfunction method)": [[13, "smac.acquisition.functions.abstract_acquisition_function.AbstractAcquisitionFunction.get_meta"]], "smac.acquisition.functions.abstract_acquisition_function": [[13, "module-smac.acquisition.functions.abstract_acquisition_function"]], "update() (smac.acquisition.functions.abstract_acquisition_function.abstractacquisitionfunction method)": [[13, "smac.acquisition.functions.abstract_acquisition_function.AbstractAcquisitionFunction.update"]], "lcb (class in smac.acquisition.functions.confidence_bound)": [[14, "smac.acquisition.functions.confidence_bound.LCB"]], "get_meta() (smac.acquisition.functions.confidence_bound.lcb method)": [[14, "smac.acquisition.functions.confidence_bound.LCB.get_meta"]], "smac.acquisition.functions.confidence_bound": [[14, "module-smac.acquisition.functions.confidence_bound"]], "ei (class in smac.acquisition.functions.expected_improvement)": [[15, "smac.acquisition.functions.expected_improvement.EI"]], "eips (class in smac.acquisition.functions.expected_improvement)": [[15, "smac.acquisition.functions.expected_improvement.EIPS"]], "get_meta() (smac.acquisition.functions.expected_improvement.ei method)": [[15, "smac.acquisition.functions.expected_improvement.EI.get_meta"]], "smac.acquisition.functions.expected_improvement": [[15, "module-smac.acquisition.functions.expected_improvement"]], "integratedacquisitionfunction (class in smac.acquisition.functions.integrated_acquisition_function)": [[16, "smac.acquisition.functions.integrated_acquisition_function.IntegratedAcquisitionFunction"]], "get_meta() (smac.acquisition.functions.integrated_acquisition_function.integratedacquisitionfunction method)": [[16, "smac.acquisition.functions.integrated_acquisition_function.IntegratedAcquisitionFunction.get_meta"]], "smac.acquisition.functions.integrated_acquisition_function": [[16, "module-smac.acquisition.functions.integrated_acquisition_function"]], "prioracquisitionfunction (class in smac.acquisition.functions.prior_acqusition_function)": [[17, "smac.acquisition.functions.prior_acqusition_function.PriorAcquisitionFunction"]], "get_meta() (smac.acquisition.functions.prior_acqusition_function.prioracquisitionfunction method)": [[17, "smac.acquisition.functions.prior_acqusition_function.PriorAcquisitionFunction.get_meta"]], "smac.acquisition.functions.prior_acqusition_function": [[17, "module-smac.acquisition.functions.prior_acqusition_function"]], "pi (class in smac.acquisition.functions.probability_improvement)": [[18, "smac.acquisition.functions.probability_improvement.PI"]], "get_meta() (smac.acquisition.functions.probability_improvement.pi method)": [[18, "smac.acquisition.functions.probability_improvement.PI.get_meta"]], "smac.acquisition.functions.probability_improvement": [[18, "module-smac.acquisition.functions.probability_improvement"]], "ts (class in smac.acquisition.functions.thompson)": [[19, "smac.acquisition.functions.thompson.TS"]], "smac.acquisition.functions.thompson": [[19, "module-smac.acquisition.functions.thompson"]], "abstractacquisitionmaximizer (class in smac.acquisition.maximizers)": [[20, "smac.acquisition.maximizers.AbstractAcquisitionMaximizer"]], "differentialevolution (class in smac.acquisition.maximizers)": [[20, "smac.acquisition.maximizers.DifferentialEvolution"]], "localandsortedpriorrandomsearch (class in smac.acquisition.maximizers)": [[20, "smac.acquisition.maximizers.LocalAndSortedPriorRandomSearch"]], "localandsortedrandomsearch (class in smac.acquisition.maximizers)": [[20, "smac.acquisition.maximizers.LocalAndSortedRandomSearch"]], "localsearch (class in smac.acquisition.maximizers)": [[20, "smac.acquisition.maximizers.LocalSearch"]], "randomsearch (class in smac.acquisition.maximizers)": [[20, "smac.acquisition.maximizers.RandomSearch"]], "get_meta() (smac.acquisition.maximizers.abstractacquisitionmaximizer method)": [[20, "smac.acquisition.maximizers.AbstractAcquisitionMaximizer.get_meta"]], "get_meta() (smac.acquisition.maximizers.localandsortedrandomsearch method)": [[20, "smac.acquisition.maximizers.LocalAndSortedRandomSearch.get_meta"]], "get_meta() (smac.acquisition.maximizers.localsearch method)": [[20, "smac.acquisition.maximizers.LocalSearch.get_meta"]], "maximize() (smac.acquisition.maximizers.abstractacquisitionmaximizer method)": [[20, "smac.acquisition.maximizers.AbstractAcquisitionMaximizer.maximize"]], "smac.acquisition.maximizers": [[20, "module-smac.acquisition.maximizers"]], "abstractacquisitionmaximizer (class in smac.acquisition.maximizers.abstract_acqusition_maximizer)": [[21, "smac.acquisition.maximizers.abstract_acqusition_maximizer.AbstractAcquisitionMaximizer"]], "get_meta() (smac.acquisition.maximizers.abstract_acqusition_maximizer.abstractacquisitionmaximizer method)": [[21, "smac.acquisition.maximizers.abstract_acqusition_maximizer.AbstractAcquisitionMaximizer.get_meta"]], "maximize() (smac.acquisition.maximizers.abstract_acqusition_maximizer.abstractacquisitionmaximizer method)": [[21, "smac.acquisition.maximizers.abstract_acqusition_maximizer.AbstractAcquisitionMaximizer.maximize"]], "smac.acquisition.maximizers.abstract_acqusition_maximizer": [[21, "module-smac.acquisition.maximizers.abstract_acqusition_maximizer"]], "differentialevolution (class in smac.acquisition.maximizers.differential_evolution)": [[22, "smac.acquisition.maximizers.differential_evolution.DifferentialEvolution"]], "smac.acquisition.maximizers.differential_evolution": [[22, "module-smac.acquisition.maximizers.differential_evolution"]], "challengerlist (class in smac.acquisition.maximizers.helpers)": [[23, "smac.acquisition.maximizers.helpers.ChallengerList"]], "smac.acquisition.maximizers.helpers": [[23, "module-smac.acquisition.maximizers.helpers"]], "localandsortedpriorrandomsearch (class in smac.acquisition.maximizers.local_and_random_search)": [[24, "smac.acquisition.maximizers.local_and_random_search.LocalAndSortedPriorRandomSearch"]], "localandsortedrandomsearch (class in smac.acquisition.maximizers.local_and_random_search)": [[24, "smac.acquisition.maximizers.local_and_random_search.LocalAndSortedRandomSearch"]], "get_meta() (smac.acquisition.maximizers.local_and_random_search.localandsortedrandomsearch method)": [[24, "smac.acquisition.maximizers.local_and_random_search.LocalAndSortedRandomSearch.get_meta"]], "smac.acquisition.maximizers.local_and_random_search": [[24, "module-smac.acquisition.maximizers.local_and_random_search"]], "localsearch (class in smac.acquisition.maximizers.local_search)": [[25, "smac.acquisition.maximizers.local_search.LocalSearch"]], "get_meta() (smac.acquisition.maximizers.local_search.localsearch method)": [[25, "smac.acquisition.maximizers.local_search.LocalSearch.get_meta"]], "smac.acquisition.maximizers.local_search": [[25, "module-smac.acquisition.maximizers.local_search"]], "randomsearch (class in smac.acquisition.maximizers.random_search)": [[26, "smac.acquisition.maximizers.random_search.RandomSearch"]], "smac.acquisition.maximizers.random_search": [[26, "module-smac.acquisition.maximizers.random_search"]], "callback (class in smac.callback)": [[27, "smac.callback.Callback"]], "on_ask_end() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_ask_end"]], "on_ask_start() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_ask_start"]], "on_end() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_end"]], "on_iteration_end() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_iteration_end"]], "on_iteration_start() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_iteration_start"]], "on_next_configurations_end() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_next_configurations_end"]], "on_next_configurations_start() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_next_configurations_start"]], "on_start() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_start"]], "on_tell_end() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_tell_end"]], "on_tell_start() (smac.callback.callback method)": [[27, "smac.callback.Callback.on_tell_start"]], "smac.callback": [[27, "module-smac.callback"]], "smac.constants": [[28, "module-smac.constants"]], "abstractfacade (class in smac.facade)": [[29, "smac.facade.AbstractFacade"]], "algorithmconfigurationfacade (class in smac.facade)": [[29, "smac.facade.AlgorithmConfigurationFacade"]], "blackboxfacade (class in smac.facade)": [[29, "smac.facade.BlackBoxFacade"]], "hyperbandfacade (class in smac.facade)": [[29, "smac.facade.HyperbandFacade"]], "hyperparameterfacade (class in smac.facade)": [[29, "smac.facade.HyperparameterFacade"]], "multifidelityfacade (class in smac.facade)": [[29, "smac.facade.MultiFidelityFacade"]], "randomfacade (class in smac.facade)": [[29, "smac.facade.RandomFacade"]], "ask() (smac.facade.abstractfacade method)": [[29, "smac.facade.AbstractFacade.ask"]], "get_acquisition_function() (smac.facade.abstractfacade static method)": [[29, "smac.facade.AbstractFacade.get_acquisition_function"]], "get_acquisition_function() (smac.facade.algorithmconfigurationfacade static method)": [[29, "smac.facade.AlgorithmConfigurationFacade.get_acquisition_function"]], "get_acquisition_function() (smac.facade.blackboxfacade static method)": [[29, "smac.facade.BlackBoxFacade.get_acquisition_function"]], "get_acquisition_function() (smac.facade.hyperparameterfacade static method)": [[29, "smac.facade.HyperparameterFacade.get_acquisition_function"]], "get_acquisition_function() (smac.facade.randomfacade static method)": [[29, "smac.facade.RandomFacade.get_acquisition_function"]], "get_acquisition_maximizer() (smac.facade.abstractfacade static method)": [[29, "smac.facade.AbstractFacade.get_acquisition_maximizer"]], "get_acquisition_maximizer() (smac.facade.algorithmconfigurationfacade static method)": [[29, "smac.facade.AlgorithmConfigurationFacade.get_acquisition_maximizer"]], "get_acquisition_maximizer() (smac.facade.blackboxfacade static method)": [[29, "smac.facade.BlackBoxFacade.get_acquisition_maximizer"]], "get_acquisition_maximizer() (smac.facade.hyperparameterfacade static method)": [[29, "smac.facade.HyperparameterFacade.get_acquisition_maximizer"]], "get_acquisition_maximizer() (smac.facade.randomfacade static method)": [[29, "smac.facade.RandomFacade.get_acquisition_maximizer"]], "get_initial_design() (smac.facade.abstractfacade static method)": [[29, "smac.facade.AbstractFacade.get_initial_design"]], "get_initial_design() (smac.facade.algorithmconfigurationfacade static method)": [[29, "smac.facade.AlgorithmConfigurationFacade.get_initial_design"]], "get_initial_design() (smac.facade.blackboxfacade static method)": [[29, "smac.facade.BlackBoxFacade.get_initial_design"]], "get_initial_design() (smac.facade.hyperparameterfacade static method)": [[29, "smac.facade.HyperparameterFacade.get_initial_design"]], "get_initial_design() (smac.facade.multifidelityfacade static method)": [[29, "smac.facade.MultiFidelityFacade.get_initial_design"]], "get_initial_design() (smac.facade.randomfacade static method)": [[29, "smac.facade.RandomFacade.get_initial_design"]], "get_intensifier() (smac.facade.abstractfacade static method)": [[29, "smac.facade.AbstractFacade.get_intensifier"]], "get_intensifier() (smac.facade.algorithmconfigurationfacade static method)": [[29, "smac.facade.AlgorithmConfigurationFacade.get_intensifier"]], "get_intensifier() (smac.facade.blackboxfacade static method)": [[29, "smac.facade.BlackBoxFacade.get_intensifier"]], "get_intensifier() (smac.facade.hyperbandfacade static method)": [[29, "smac.facade.HyperbandFacade.get_intensifier"]], "get_intensifier() (smac.facade.hyperparameterfacade static method)": [[29, "smac.facade.HyperparameterFacade.get_intensifier"]], "get_intensifier() (smac.facade.multifidelityfacade static method)": [[29, "smac.facade.MultiFidelityFacade.get_intensifier"]], "get_intensifier() (smac.facade.randomfacade static method)": [[29, "smac.facade.RandomFacade.get_intensifier"]], "get_kernel() (smac.facade.blackboxfacade static method)": [[29, "smac.facade.BlackBoxFacade.get_kernel"]], "get_meta() (smac.facade.abstractfacade method)": [[29, "smac.facade.AbstractFacade.get_meta"]], "get_model() (smac.facade.abstractfacade static method)": [[29, "smac.facade.AbstractFacade.get_model"]], "get_model() (smac.facade.algorithmconfigurationfacade static method)": [[29, "smac.facade.AlgorithmConfigurationFacade.get_model"]], "get_model() (smac.facade.blackboxfacade static method)": [[29, "smac.facade.BlackBoxFacade.get_model"]], "get_model() (smac.facade.hyperparameterfacade static method)": [[29, "smac.facade.HyperparameterFacade.get_model"]], "get_model() (smac.facade.randomfacade static method)": [[29, "smac.facade.RandomFacade.get_model"]], "get_multi_objective_algorithm() (smac.facade.abstractfacade static method)": [[29, "smac.facade.AbstractFacade.get_multi_objective_algorithm"]], "get_multi_objective_algorithm() (smac.facade.algorithmconfigurationfacade static method)": [[29, "smac.facade.AlgorithmConfigurationFacade.get_multi_objective_algorithm"]], "get_multi_objective_algorithm() (smac.facade.blackboxfacade static method)": [[29, "smac.facade.BlackBoxFacade.get_multi_objective_algorithm"]], "get_multi_objective_algorithm() (smac.facade.hyperparameterfacade static method)": [[29, "smac.facade.HyperparameterFacade.get_multi_objective_algorithm"]], "get_multi_objective_algorithm() (smac.facade.randomfacade static method)": [[29, "smac.facade.RandomFacade.get_multi_objective_algorithm"]], "get_next_configurations() (smac.facade.abstractfacade method)": [[29, "smac.facade.AbstractFacade.get_next_configurations"]], "get_random_design() (smac.facade.abstractfacade static method)": [[29, "smac.facade.AbstractFacade.get_random_design"]], "get_random_design() (smac.facade.algorithmconfigurationfacade static method)": [[29, "smac.facade.AlgorithmConfigurationFacade.get_random_design"]], "get_random_design() (smac.facade.blackboxfacade static method)": [[29, "smac.facade.BlackBoxFacade.get_random_design"]], "get_random_design() (smac.facade.hyperparameterfacade static method)": [[29, "smac.facade.HyperparameterFacade.get_random_design"]], "get_random_design() (smac.facade.randomfacade static method)": [[29, "smac.facade.RandomFacade.get_random_design"]], "get_runhistory_encoder() (smac.facade.abstractfacade static method)": [[29, "smac.facade.AbstractFacade.get_runhistory_encoder"]], "get_runhistory_encoder() (smac.facade.algorithmconfigurationfacade static method)": [[29, "smac.facade.AlgorithmConfigurationFacade.get_runhistory_encoder"]], "get_runhistory_encoder() (smac.facade.blackboxfacade static method)": [[29, "smac.facade.BlackBoxFacade.get_runhistory_encoder"]], "get_runhistory_encoder() (smac.facade.hyperparameterfacade static method)": [[29, "smac.facade.HyperparameterFacade.get_runhistory_encoder"]], "get_runhistory_encoder() (smac.facade.randomfacade static method)": [[29, "smac.facade.RandomFacade.get_runhistory_encoder"]], "get_target_function_budgets() (smac.facade.abstractfacade method)": [[29, "smac.facade.AbstractFacade.get_target_function_budgets"]], "get_target_function_instances() (smac.facade.abstractfacade method)": [[29, "smac.facade.AbstractFacade.get_target_function_instances"]], "get_target_function_seeds() (smac.facade.abstractfacade method)": [[29, "smac.facade.AbstractFacade.get_target_function_seeds"]], "optimize() (smac.facade.abstractfacade method)": [[29, "smac.facade.AbstractFacade.optimize"]], "smac.facade": [[29, "module-smac.facade"]], "tell() (smac.facade.abstractfacade method)": [[29, "smac.facade.AbstractFacade.tell"]], "validate() (smac.facade.abstractfacade method)": [[29, "smac.facade.AbstractFacade.validate"]], "abstractfacade (class in smac.facade.abstract_facade)": [[30, "smac.facade.abstract_facade.AbstractFacade"]], "ask() (smac.facade.abstract_facade.abstractfacade method)": [[30, "smac.facade.abstract_facade.AbstractFacade.ask"]], "get_acquisition_function() (smac.facade.abstract_facade.abstractfacade static method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_acquisition_function"]], "get_acquisition_maximizer() (smac.facade.abstract_facade.abstractfacade static method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_acquisition_maximizer"]], "get_initial_design() (smac.facade.abstract_facade.abstractfacade static method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_initial_design"]], "get_intensifier() (smac.facade.abstract_facade.abstractfacade static method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_intensifier"]], "get_meta() (smac.facade.abstract_facade.abstractfacade method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_meta"]], "get_model() (smac.facade.abstract_facade.abstractfacade static method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_model"]], "get_multi_objective_algorithm() (smac.facade.abstract_facade.abstractfacade static method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_multi_objective_algorithm"]], "get_next_configurations() (smac.facade.abstract_facade.abstractfacade method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_next_configurations"]], "get_random_design() (smac.facade.abstract_facade.abstractfacade static method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_random_design"]], "get_runhistory_encoder() (smac.facade.abstract_facade.abstractfacade static method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_runhistory_encoder"]], "get_target_function_budgets() (smac.facade.abstract_facade.abstractfacade method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_target_function_budgets"]], "get_target_function_instances() (smac.facade.abstract_facade.abstractfacade method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_target_function_instances"]], "get_target_function_seeds() (smac.facade.abstract_facade.abstractfacade method)": [[30, "smac.facade.abstract_facade.AbstractFacade.get_target_function_seeds"]], "optimize() (smac.facade.abstract_facade.abstractfacade method)": [[30, "smac.facade.abstract_facade.AbstractFacade.optimize"]], "smac.facade.abstract_facade": [[30, "module-smac.facade.abstract_facade"]], "tell() (smac.facade.abstract_facade.abstractfacade method)": [[30, "smac.facade.abstract_facade.AbstractFacade.tell"]], "validate() (smac.facade.abstract_facade.abstractfacade method)": [[30, "smac.facade.abstract_facade.AbstractFacade.validate"]], "algorithmconfigurationfacade (class in smac.facade.algorithm_configuration_facade)": [[31, "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade"]], "get_acquisition_function() (smac.facade.algorithm_configuration_facade.algorithmconfigurationfacade static method)": [[31, "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade.get_acquisition_function"]], "get_acquisition_maximizer() (smac.facade.algorithm_configuration_facade.algorithmconfigurationfacade static method)": [[31, "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade.get_acquisition_maximizer"]], "get_initial_design() (smac.facade.algorithm_configuration_facade.algorithmconfigurationfacade static method)": [[31, "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade.get_initial_design"]], "get_intensifier() (smac.facade.algorithm_configuration_facade.algorithmconfigurationfacade static method)": [[31, "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade.get_intensifier"]], "get_model() (smac.facade.algorithm_configuration_facade.algorithmconfigurationfacade static method)": [[31, "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade.get_model"]], "get_multi_objective_algorithm() (smac.facade.algorithm_configuration_facade.algorithmconfigurationfacade static method)": [[31, "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade.get_multi_objective_algorithm"]], "get_random_design() (smac.facade.algorithm_configuration_facade.algorithmconfigurationfacade static method)": [[31, "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade.get_random_design"]], "get_runhistory_encoder() (smac.facade.algorithm_configuration_facade.algorithmconfigurationfacade static method)": [[31, "smac.facade.algorithm_configuration_facade.AlgorithmConfigurationFacade.get_runhistory_encoder"]], "smac.facade.algorithm_configuration_facade": [[31, "module-smac.facade.algorithm_configuration_facade"]], "blackboxfacade (class in smac.facade.blackbox_facade)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade"]], "get_acquisition_function() (smac.facade.blackbox_facade.blackboxfacade static method)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade.get_acquisition_function"]], "get_acquisition_maximizer() (smac.facade.blackbox_facade.blackboxfacade static method)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade.get_acquisition_maximizer"]], "get_initial_design() (smac.facade.blackbox_facade.blackboxfacade static method)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade.get_initial_design"]], "get_intensifier() (smac.facade.blackbox_facade.blackboxfacade static method)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade.get_intensifier"]], "get_kernel() (smac.facade.blackbox_facade.blackboxfacade static method)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade.get_kernel"]], "get_model() (smac.facade.blackbox_facade.blackboxfacade static method)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade.get_model"]], "get_multi_objective_algorithm() (smac.facade.blackbox_facade.blackboxfacade static method)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade.get_multi_objective_algorithm"]], "get_random_design() (smac.facade.blackbox_facade.blackboxfacade static method)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade.get_random_design"]], "get_runhistory_encoder() (smac.facade.blackbox_facade.blackboxfacade static method)": [[32, "smac.facade.blackbox_facade.BlackBoxFacade.get_runhistory_encoder"]], "smac.facade.blackbox_facade": [[32, "module-smac.facade.blackbox_facade"]], "smac.facade.boing_facade": [[33, "module-smac.facade.boing_facade"]], "hyperbandfacade (class in smac.facade.hyperband_facade)": [[34, "smac.facade.hyperband_facade.HyperbandFacade"]], "get_intensifier() (smac.facade.hyperband_facade.hyperbandfacade static method)": [[34, "smac.facade.hyperband_facade.HyperbandFacade.get_intensifier"]], "smac.facade.hyperband_facade": [[34, "module-smac.facade.hyperband_facade"]], "hyperparameterfacade (class in smac.facade.hyperparameter_facade)": [[35, "smac.facade.hyperparameter_facade.HyperparameterFacade"]], "get_acquisition_function() (smac.facade.hyperparameter_facade.hyperparameterfacade static method)": [[35, "smac.facade.hyperparameter_facade.HyperparameterFacade.get_acquisition_function"]], "get_acquisition_maximizer() (smac.facade.hyperparameter_facade.hyperparameterfacade static method)": [[35, "smac.facade.hyperparameter_facade.HyperparameterFacade.get_acquisition_maximizer"]], "get_initial_design() (smac.facade.hyperparameter_facade.hyperparameterfacade static method)": [[35, "smac.facade.hyperparameter_facade.HyperparameterFacade.get_initial_design"]], "get_intensifier() (smac.facade.hyperparameter_facade.hyperparameterfacade static method)": [[35, "smac.facade.hyperparameter_facade.HyperparameterFacade.get_intensifier"]], "get_model() (smac.facade.hyperparameter_facade.hyperparameterfacade static method)": [[35, "smac.facade.hyperparameter_facade.HyperparameterFacade.get_model"]], "get_multi_objective_algorithm() (smac.facade.hyperparameter_facade.hyperparameterfacade static method)": [[35, "smac.facade.hyperparameter_facade.HyperparameterFacade.get_multi_objective_algorithm"]], "get_random_design() (smac.facade.hyperparameter_facade.hyperparameterfacade static method)": [[35, "smac.facade.hyperparameter_facade.HyperparameterFacade.get_random_design"]], "get_runhistory_encoder() (smac.facade.hyperparameter_facade.hyperparameterfacade static method)": [[35, "smac.facade.hyperparameter_facade.HyperparameterFacade.get_runhistory_encoder"]], "smac.facade.hyperparameter_facade": [[35, "module-smac.facade.hyperparameter_facade"]], "multifidelityfacade (class in smac.facade.multi_fidelity_facade)": [[36, "smac.facade.multi_fidelity_facade.MultiFidelityFacade"]], "get_initial_design() (smac.facade.multi_fidelity_facade.multifidelityfacade static method)": [[36, "smac.facade.multi_fidelity_facade.MultiFidelityFacade.get_initial_design"]], "get_intensifier() (smac.facade.multi_fidelity_facade.multifidelityfacade static method)": [[36, "smac.facade.multi_fidelity_facade.MultiFidelityFacade.get_intensifier"]], "smac.facade.multi_fidelity_facade": [[36, "module-smac.facade.multi_fidelity_facade"]], "randomfacade (class in smac.facade.random_facade)": [[37, "smac.facade.random_facade.RandomFacade"]], "get_acquisition_function() (smac.facade.random_facade.randomfacade static method)": [[37, "smac.facade.random_facade.RandomFacade.get_acquisition_function"]], "get_acquisition_maximizer() (smac.facade.random_facade.randomfacade static method)": [[37, "smac.facade.random_facade.RandomFacade.get_acquisition_maximizer"]], "get_initial_design() (smac.facade.random_facade.randomfacade static method)": [[37, "smac.facade.random_facade.RandomFacade.get_initial_design"]], "get_intensifier() (smac.facade.random_facade.randomfacade static method)": [[37, "smac.facade.random_facade.RandomFacade.get_intensifier"]], "get_model() (smac.facade.random_facade.randomfacade static method)": [[37, "smac.facade.random_facade.RandomFacade.get_model"]], "get_multi_objective_algorithm() (smac.facade.random_facade.randomfacade static method)": [[37, "smac.facade.random_facade.RandomFacade.get_multi_objective_algorithm"]], "get_random_design() (smac.facade.random_facade.randomfacade static method)": [[37, "smac.facade.random_facade.RandomFacade.get_random_design"]], "get_runhistory_encoder() (smac.facade.random_facade.randomfacade static method)": [[37, "smac.facade.random_facade.RandomFacade.get_runhistory_encoder"]], "smac.facade.random_facade": [[37, "module-smac.facade.random_facade"]], "abstractinitialdesign (class in smac.initial_design)": [[38, "smac.initial_design.AbstractInitialDesign"]], "defaultinitialdesign (class in smac.initial_design)": [[38, "smac.initial_design.DefaultInitialDesign"]], "factorialinitialdesign (class in smac.initial_design)": [[38, "smac.initial_design.FactorialInitialDesign"]], "latinhypercubeinitialdesign (class in smac.initial_design)": [[38, "smac.initial_design.LatinHypercubeInitialDesign"]], "randominitialdesign (class in smac.initial_design)": [[38, "smac.initial_design.RandomInitialDesign"]], "sobolinitialdesign (class in smac.initial_design)": [[38, "smac.initial_design.SobolInitialDesign"]], "get_meta() (smac.initial_design.abstractinitialdesign method)": [[38, "smac.initial_design.AbstractInitialDesign.get_meta"]], "select_configurations() (smac.initial_design.abstractinitialdesign method)": [[38, "smac.initial_design.AbstractInitialDesign.select_configurations"]], "smac.initial_design": [[38, "module-smac.initial_design"]], "abstractinitialdesign (class in smac.initial_design.abstract_initial_design)": [[39, "smac.initial_design.abstract_initial_design.AbstractInitialDesign"]], "get_meta() (smac.initial_design.abstract_initial_design.abstractinitialdesign method)": [[39, "smac.initial_design.abstract_initial_design.AbstractInitialDesign.get_meta"]], "select_configurations() (smac.initial_design.abstract_initial_design.abstractinitialdesign method)": [[39, "smac.initial_design.abstract_initial_design.AbstractInitialDesign.select_configurations"]], "smac.initial_design.abstract_initial_design": [[39, "module-smac.initial_design.abstract_initial_design"]], "defaultinitialdesign (class in smac.initial_design.default_design)": [[40, "smac.initial_design.default_design.DefaultInitialDesign"]], "smac.initial_design.default_design": [[40, "module-smac.initial_design.default_design"]], "factorialinitialdesign (class in smac.initial_design.factorial_design)": [[41, "smac.initial_design.factorial_design.FactorialInitialDesign"]], "smac.initial_design.factorial_design": [[41, "module-smac.initial_design.factorial_design"]], "latinhypercubeinitialdesign (class in smac.initial_design.latin_hypercube_design)": [[42, "smac.initial_design.latin_hypercube_design.LatinHypercubeInitialDesign"]], "smac.initial_design.latin_hypercube_design": [[42, "module-smac.initial_design.latin_hypercube_design"]], "randominitialdesign (class in smac.initial_design.random_design)": [[43, "smac.initial_design.random_design.RandomInitialDesign"]], "smac.initial_design.random_design": [[43, "module-smac.initial_design.random_design"]], "sobolinitialdesign (class in smac.initial_design.sobol_design)": [[44, "smac.initial_design.sobol_design.SobolInitialDesign"]], "smac.initial_design.sobol_design": [[44, "module-smac.initial_design.sobol_design"]], "abstractintensifier (class in smac.intensifier)": [[45, "smac.intensifier.AbstractIntensifier"]], "abstractparallelintensifier (class in smac.intensifier)": [[45, "smac.intensifier.AbstractParallelIntensifier"]], "hyperband (class in smac.intensifier)": [[45, "smac.intensifier.Hyperband"]], "intensifier (class in smac.intensifier)": [[45, "smac.intensifier.Intensifier"]], "successivehalving (class in smac.intensifier)": [[45, "smac.intensifier.SuccessiveHalving"]], "calculate_budgets() (smac.intensifier.successivehalving method)": [[45, "smac.intensifier.SuccessiveHalving.calculate_budgets"]], "get_meta() (smac.intensifier.abstractintensifier method)": [[45, "smac.intensifier.AbstractIntensifier.get_meta"]], "get_meta() (smac.intensifier.abstractparallelintensifier method)": [[45, "smac.intensifier.AbstractParallelIntensifier.get_meta"]], "get_meta() (smac.intensifier.intensifier method)": [[45, "smac.intensifier.Intensifier.get_meta"]], "get_meta() (smac.intensifier.successivehalving method)": [[45, "smac.intensifier.SuccessiveHalving.get_meta"]], "get_next_challenger() (smac.intensifier.intensifier method)": [[45, "smac.intensifier.Intensifier.get_next_challenger"]], "get_next_run() (smac.intensifier.abstractintensifier method)": [[45, "smac.intensifier.AbstractIntensifier.get_next_run"]], "get_next_run() (smac.intensifier.abstractparallelintensifier method)": [[45, "smac.intensifier.AbstractParallelIntensifier.get_next_run"]], "get_next_run() (smac.intensifier.intensifier method)": [[45, "smac.intensifier.Intensifier.get_next_run"]], "get_target_function_budgets() (smac.intensifier.abstractintensifier method)": [[45, "smac.intensifier.AbstractIntensifier.get_target_function_budgets"]], "get_target_function_budgets() (smac.intensifier.intensifier method)": [[45, "smac.intensifier.Intensifier.get_target_function_budgets"]], "get_target_function_budgets() (smac.intensifier.successivehalving method)": [[45, "smac.intensifier.SuccessiveHalving.get_target_function_budgets"]], "get_target_function_instances() (smac.intensifier.abstractintensifier method)": [[45, "smac.intensifier.AbstractIntensifier.get_target_function_instances"]], "get_target_function_instances() (smac.intensifier.intensifier method)": [[45, "smac.intensifier.Intensifier.get_target_function_instances"]], "get_target_function_instances() (smac.intensifier.successivehalving method)": [[45, "smac.intensifier.SuccessiveHalving.get_target_function_instances"]], "get_target_function_seeds() (smac.intensifier.abstractintensifier method)": [[45, "smac.intensifier.AbstractIntensifier.get_target_function_seeds"]], "get_target_function_seeds() (smac.intensifier.intensifier method)": [[45, "smac.intensifier.Intensifier.get_target_function_seeds"]], "get_target_function_seeds() (smac.intensifier.successivehalving method)": [[45, "smac.intensifier.SuccessiveHalving.get_target_function_seeds"]], "intensify_percentage (smac.intensifier.intensifier property)": [[45, "smac.intensifier.Intensifier.intensify_percentage"]], "iteration_done (smac.intensifier.abstractintensifier property)": [[45, "smac.intensifier.AbstractIntensifier.iteration_done"]], "num_trials (smac.intensifier.abstractintensifier property)": [[45, "smac.intensifier.AbstractIntensifier.num_trials"]], "process_results() (smac.intensifier.abstractintensifier method)": [[45, "smac.intensifier.AbstractIntensifier.process_results"]], "process_results() (smac.intensifier.abstractparallelintensifier method)": [[45, "smac.intensifier.AbstractParallelIntensifier.process_results"]], "process_results() (smac.intensifier.intensifier method)": [[45, "smac.intensifier.Intensifier.process_results"]], "repeat_configs (smac.intensifier.abstractintensifier property)": [[45, "smac.intensifier.AbstractIntensifier.repeat_configs"]], "smac.intensifier": [[45, "module-smac.intensifier"]], "uses_budgets (smac.intensifier.abstractintensifier property)": [[45, "smac.intensifier.AbstractIntensifier.uses_budgets"]], "uses_budgets (smac.intensifier.intensifier property)": [[45, "smac.intensifier.Intensifier.uses_budgets"]], "uses_budgets (smac.intensifier.successivehalving property)": [[45, "smac.intensifier.SuccessiveHalving.uses_budgets"]], "uses_instances (smac.intensifier.abstractintensifier property)": [[45, "smac.intensifier.AbstractIntensifier.uses_instances"]], "uses_instances (smac.intensifier.intensifier property)": [[45, "smac.intensifier.Intensifier.uses_instances"]], "uses_instances (smac.intensifier.successivehalving property)": [[45, "smac.intensifier.SuccessiveHalving.uses_instances"]], "uses_seeds (smac.intensifier.abstractintensifier property)": [[45, "smac.intensifier.AbstractIntensifier.uses_seeds"]], "uses_seeds (smac.intensifier.abstractparallelintensifier property)": [[45, "smac.intensifier.AbstractParallelIntensifier.uses_seeds"]], "uses_seeds (smac.intensifier.intensifier property)": [[45, "smac.intensifier.Intensifier.uses_seeds"]], "abstractintensifier (class in smac.intensifier.abstract_intensifier)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier"]], "get_meta() (smac.intensifier.abstract_intensifier.abstractintensifier method)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.get_meta"]], "get_next_run() (smac.intensifier.abstract_intensifier.abstractintensifier method)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.get_next_run"]], "get_target_function_budgets() (smac.intensifier.abstract_intensifier.abstractintensifier method)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.get_target_function_budgets"]], "get_target_function_instances() (smac.intensifier.abstract_intensifier.abstractintensifier method)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.get_target_function_instances"]], "get_target_function_seeds() (smac.intensifier.abstract_intensifier.abstractintensifier method)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.get_target_function_seeds"]], "iteration_done (smac.intensifier.abstract_intensifier.abstractintensifier property)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.iteration_done"]], "num_trials (smac.intensifier.abstract_intensifier.abstractintensifier property)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.num_trials"]], "process_results() (smac.intensifier.abstract_intensifier.abstractintensifier method)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.process_results"]], "repeat_configs (smac.intensifier.abstract_intensifier.abstractintensifier property)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.repeat_configs"]], "smac.intensifier.abstract_intensifier": [[46, "module-smac.intensifier.abstract_intensifier"]], "uses_budgets (smac.intensifier.abstract_intensifier.abstractintensifier property)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.uses_budgets"]], "uses_instances (smac.intensifier.abstract_intensifier.abstractintensifier property)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.uses_instances"]], "uses_seeds (smac.intensifier.abstract_intensifier.abstractintensifier property)": [[46, "smac.intensifier.abstract_intensifier.AbstractIntensifier.uses_seeds"]], "abstractparallelintensifier (class in smac.intensifier.abstract_parallel_intensifier)": [[47, "smac.intensifier.abstract_parallel_intensifier.AbstractParallelIntensifier"]], "get_meta() (smac.intensifier.abstract_parallel_intensifier.abstractparallelintensifier method)": [[47, "smac.intensifier.abstract_parallel_intensifier.AbstractParallelIntensifier.get_meta"]], "get_next_run() (smac.intensifier.abstract_parallel_intensifier.abstractparallelintensifier method)": [[47, "smac.intensifier.abstract_parallel_intensifier.AbstractParallelIntensifier.get_next_run"]], "process_results() (smac.intensifier.abstract_parallel_intensifier.abstractparallelintensifier method)": [[47, "smac.intensifier.abstract_parallel_intensifier.AbstractParallelIntensifier.process_results"]], "smac.intensifier.abstract_parallel_intensifier": [[47, "module-smac.intensifier.abstract_parallel_intensifier"]], "uses_seeds (smac.intensifier.abstract_parallel_intensifier.abstractparallelintensifier property)": [[47, "smac.intensifier.abstract_parallel_intensifier.AbstractParallelIntensifier.uses_seeds"]], "hyperband (class in smac.intensifier.hyperband)": [[48, "smac.intensifier.hyperband.Hyperband"]], "smac.intensifier.hyperband": [[48, "module-smac.intensifier.hyperband"]], "hyperbandworker (class in smac.intensifier.hyperband_worker)": [[49, "smac.intensifier.hyperband_worker.HyperbandWorker"]], "get_next_run() (smac.intensifier.hyperband_worker.hyperbandworker method)": [[49, "smac.intensifier.hyperband_worker.HyperbandWorker.get_next_run"]], "process_results() (smac.intensifier.hyperband_worker.hyperbandworker method)": [[49, "smac.intensifier.hyperband_worker.HyperbandWorker.process_results"]], "smac.intensifier.hyperband_worker": [[49, "module-smac.intensifier.hyperband_worker"]], "uses_budgets (smac.intensifier.hyperband_worker.hyperbandworker property)": [[49, "smac.intensifier.hyperband_worker.HyperbandWorker.uses_budgets"]], "uses_instances (smac.intensifier.hyperband_worker.hyperbandworker property)": [[49, "smac.intensifier.hyperband_worker.HyperbandWorker.uses_instances"]], "uses_seeds (smac.intensifier.hyperband_worker.hyperbandworker property)": [[49, "smac.intensifier.hyperband_worker.HyperbandWorker.uses_seeds"]], "intensifier (class in smac.intensifier.intensifier)": [[50, "smac.intensifier.intensifier.Intensifier"]], "get_meta() (smac.intensifier.intensifier.intensifier method)": [[50, "smac.intensifier.intensifier.Intensifier.get_meta"]], "get_next_challenger() (smac.intensifier.intensifier.intensifier method)": [[50, "smac.intensifier.intensifier.Intensifier.get_next_challenger"]], "get_next_run() (smac.intensifier.intensifier.intensifier method)": [[50, "smac.intensifier.intensifier.Intensifier.get_next_run"]], "get_target_function_budgets() (smac.intensifier.intensifier.intensifier method)": [[50, "smac.intensifier.intensifier.Intensifier.get_target_function_budgets"]], "get_target_function_instances() (smac.intensifier.intensifier.intensifier method)": [[50, "smac.intensifier.intensifier.Intensifier.get_target_function_instances"]], "get_target_function_seeds() (smac.intensifier.intensifier.intensifier method)": [[50, "smac.intensifier.intensifier.Intensifier.get_target_function_seeds"]], "intensify_percentage (smac.intensifier.intensifier.intensifier property)": [[50, "smac.intensifier.intensifier.Intensifier.intensify_percentage"]], "process_results() (smac.intensifier.intensifier.intensifier method)": [[50, "smac.intensifier.intensifier.Intensifier.process_results"]], "smac.intensifier.intensifier": [[50, "module-smac.intensifier.intensifier"]], "uses_budgets (smac.intensifier.intensifier.intensifier property)": [[50, "smac.intensifier.intensifier.Intensifier.uses_budgets"]], "uses_instances (smac.intensifier.intensifier.intensifier property)": [[50, "smac.intensifier.intensifier.Intensifier.uses_instances"]], "uses_seeds (smac.intensifier.intensifier.intensifier property)": [[50, "smac.intensifier.intensifier.Intensifier.uses_seeds"]], "intensifierstage (class in smac.intensifier.stages)": [[51, "smac.intensifier.stages.IntensifierStage"]], "smac.intensifier.stages": [[51, "module-smac.intensifier.stages"]], "successivehalving (class in smac.intensifier.successive_halving)": [[52, "smac.intensifier.successive_halving.SuccessiveHalving"]], "calculate_budgets() (smac.intensifier.successive_halving.successivehalving method)": [[52, "smac.intensifier.successive_halving.SuccessiveHalving.calculate_budgets"]], "get_meta() (smac.intensifier.successive_halving.successivehalving method)": [[52, "smac.intensifier.successive_halving.SuccessiveHalving.get_meta"]], "get_target_function_budgets() (smac.intensifier.successive_halving.successivehalving method)": [[52, "smac.intensifier.successive_halving.SuccessiveHalving.get_target_function_budgets"]], "get_target_function_instances() (smac.intensifier.successive_halving.successivehalving method)": [[52, "smac.intensifier.successive_halving.SuccessiveHalving.get_target_function_instances"]], "get_target_function_seeds() (smac.intensifier.successive_halving.successivehalving method)": [[52, "smac.intensifier.successive_halving.SuccessiveHalving.get_target_function_seeds"]], "smac.intensifier.successive_halving": [[52, "module-smac.intensifier.successive_halving"]], "uses_budgets (smac.intensifier.successive_halving.successivehalving property)": [[52, "smac.intensifier.successive_halving.SuccessiveHalving.uses_budgets"]], "uses_instances (smac.intensifier.successive_halving.successivehalving property)": [[52, "smac.intensifier.successive_halving.SuccessiveHalving.uses_instances"]], "successivehalvingworker (class in smac.intensifier.successive_halving_worker)": [[53, "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker"]], "get_next_run() (smac.intensifier.successive_halving_worker.successivehalvingworker method)": [[53, "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker.get_next_run"]], "get_target_function_budgets() (smac.intensifier.successive_halving_worker.successivehalvingworker method)": [[53, "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker.get_target_function_budgets"]], "get_target_function_instances() (smac.intensifier.successive_halving_worker.successivehalvingworker method)": [[53, "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker.get_target_function_instances"]], "get_target_function_seeds() (smac.intensifier.successive_halving_worker.successivehalvingworker method)": [[53, "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker.get_target_function_seeds"]], "process_results() (smac.intensifier.successive_halving_worker.successivehalvingworker method)": [[53, "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker.process_results"]], "smac.intensifier.successive_halving_worker": [[53, "module-smac.intensifier.successive_halving_worker"]], "uses_budgets (smac.intensifier.successive_halving_worker.successivehalvingworker property)": [[53, "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker.uses_budgets"]], "uses_instances (smac.intensifier.successive_halving_worker.successivehalvingworker property)": [[53, "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker.uses_instances"]], "uses_seeds (smac.intensifier.successive_halving_worker.successivehalvingworker property)": [[53, "smac.intensifier.successive_halving_worker.SuccessiveHalvingWorker.uses_seeds"]], "basesmbo (class in smac.main)": [[54, "smac.main.BaseSMBO"]], "smbo (class in smac.main)": [[54, "smac.main.SMBO"]], "ask() (smac.main.basesmbo method)": [[54, "smac.main.BaseSMBO.ask"]], "ask() (smac.main.smbo method)": [[54, "smac.main.SMBO.ask"]], "config (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.config"]], "config_space (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.config_space"]], "get_next_configurations() (smac.main.basesmbo method)": [[54, "smac.main.BaseSMBO.get_next_configurations"]], "get_next_configurations() (smac.main.smbo method)": [[54, "smac.main.SMBO.get_next_configurations"]], "incumbent (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.incumbent"]], "initial_design (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.initial_design"]], "initial_design_configs (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.initial_design_configs"]], "intensifier (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.intensifier"]], "rng (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.rng"]], "run() (smac.main.basesmbo method)": [[54, "smac.main.BaseSMBO.run"]], "runhistory (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.runhistory"]], "runner (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.runner"]], "save() (smac.main.basesmbo method)": [[54, "smac.main.BaseSMBO.save"]], "smac.main": [[54, "module-smac.main"]], "stats (smac.main.basesmbo attribute)": [[54, "smac.main.BaseSMBO.stats"]], "tell() (smac.main.basesmbo method)": [[54, "smac.main.BaseSMBO.tell"]], "tell() (smac.main.smbo method)": [[54, "smac.main.SMBO.tell"]], "update_acquisition_function() (smac.main.basesmbo method)": [[54, "smac.main.BaseSMBO.update_acquisition_function"]], "update_model() (smac.main.basesmbo method)": [[54, "smac.main.BaseSMBO.update_model"]], "validate() (smac.main.basesmbo method)": [[54, "smac.main.BaseSMBO.validate"]], "basesmbo (class in smac.main.base_smbo)": [[55, "smac.main.base_smbo.BaseSMBO"]], "ask() (smac.main.base_smbo.basesmbo method)": [[55, "smac.main.base_smbo.BaseSMBO.ask"]], "config (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.config"]], "config_space (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.config_space"]], "get_next_configurations() (smac.main.base_smbo.basesmbo method)": [[55, "smac.main.base_smbo.BaseSMBO.get_next_configurations"]], "incumbent (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.incumbent"]], "initial_design (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.initial_design"]], "initial_design_configs (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.initial_design_configs"]], "intensifier (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.intensifier"]], "rng (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.rng"]], "run() (smac.main.base_smbo.basesmbo method)": [[55, "smac.main.base_smbo.BaseSMBO.run"]], "runhistory (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.runhistory"]], "runner (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.runner"]], "save() (smac.main.base_smbo.basesmbo method)": [[55, "smac.main.base_smbo.BaseSMBO.save"]], "smac.main.base_smbo": [[55, "module-smac.main.base_smbo"]], "stats (smac.main.base_smbo.basesmbo attribute)": [[55, "smac.main.base_smbo.BaseSMBO.stats"]], "tell() (smac.main.base_smbo.basesmbo method)": [[55, "smac.main.base_smbo.BaseSMBO.tell"]], "update_acquisition_function() (smac.main.base_smbo.basesmbo method)": [[55, "smac.main.base_smbo.BaseSMBO.update_acquisition_function"]], "update_model() (smac.main.base_smbo.basesmbo method)": [[55, "smac.main.base_smbo.BaseSMBO.update_model"]], "validate() (smac.main.base_smbo.basesmbo method)": [[55, "smac.main.base_smbo.BaseSMBO.validate"]], "smac.main.boing": [[56, "module-smac.main.boing"]], "smbo (class in smac.main.smbo)": [[57, "smac.main.smbo.SMBO"]], "ask() (smac.main.smbo.smbo method)": [[57, "smac.main.smbo.SMBO.ask"]], "get_next_configurations() (smac.main.smbo.smbo method)": [[57, "smac.main.smbo.SMBO.get_next_configurations"]], "smac.main.smbo": [[57, "module-smac.main.smbo"]], "tell() (smac.main.smbo.smbo method)": [[57, "smac.main.smbo.SMBO.tell"]], "smac.main.turbo": [[58, "module-smac.main.turbo"]], "abstractmodel (class in smac.model)": [[59, "smac.model.AbstractModel"]], "multiobjectivemodel (class in smac.model)": [[59, "smac.model.MultiObjectiveModel"]], "randommodel (class in smac.model)": [[59, "smac.model.RandomModel"]], "get_meta() (smac.model.abstractmodel method)": [[59, "smac.model.AbstractModel.get_meta"]], "models (smac.model.multiobjectivemodel property)": [[59, "smac.model.MultiObjectiveModel.models"]], "predict() (smac.model.abstractmodel method)": [[59, "smac.model.AbstractModel.predict"]], "predict_marginalized() (smac.model.abstractmodel method)": [[59, "smac.model.AbstractModel.predict_marginalized"]], "predict_marginalized() (smac.model.multiobjectivemodel method)": [[59, "smac.model.MultiObjectiveModel.predict_marginalized"]], "smac.model": [[59, "module-smac.model"]], "train() (smac.model.abstractmodel method)": [[59, "smac.model.AbstractModel.train"]], "abstractmodel (class in smac.model.abstract_model)": [[60, "smac.model.abstract_model.AbstractModel"]], "get_meta() (smac.model.abstract_model.abstractmodel method)": [[60, "smac.model.abstract_model.AbstractModel.get_meta"]], "predict() (smac.model.abstract_model.abstractmodel method)": [[60, "smac.model.abstract_model.AbstractModel.predict"]], "predict_marginalized() (smac.model.abstract_model.abstractmodel method)": [[60, "smac.model.abstract_model.AbstractModel.predict_marginalized"]], "smac.model.abstract_model": [[60, "module-smac.model.abstract_model"]], "train() (smac.model.abstract_model.abstractmodel method)": [[60, "smac.model.abstract_model.AbstractModel.train"]], "abstractgaussianprocess (class in smac.model.gaussian_process)": [[61, "smac.model.gaussian_process.AbstractGaussianProcess"]], "gaussianprocess (class in smac.model.gaussian_process)": [[61, "smac.model.gaussian_process.GaussianProcess"]], "mcmcgaussianprocess (class in smac.model.gaussian_process)": [[61, "smac.model.gaussian_process.MCMCGaussianProcess"]], "get_meta() (smac.model.gaussian_process.abstractgaussianprocess method)": [[61, "smac.model.gaussian_process.AbstractGaussianProcess.get_meta"]], "get_meta() (smac.model.gaussian_process.gaussianprocess method)": [[61, "smac.model.gaussian_process.GaussianProcess.get_meta"]], "get_meta() (smac.model.gaussian_process.mcmcgaussianprocess method)": [[61, "smac.model.gaussian_process.MCMCGaussianProcess.get_meta"]], "models (smac.model.gaussian_process.mcmcgaussianprocess property)": [[61, "smac.model.gaussian_process.MCMCGaussianProcess.models"]], "sample_functions() (smac.model.gaussian_process.gaussianprocess method)": [[61, "smac.model.gaussian_process.GaussianProcess.sample_functions"]], "smac.model.gaussian_process": [[61, "module-smac.model.gaussian_process"]], "abstractgaussianprocess (class in smac.model.gaussian_process.abstract_gaussian_process)": [[62, "smac.model.gaussian_process.abstract_gaussian_process.AbstractGaussianProcess"]], "get_meta() (smac.model.gaussian_process.abstract_gaussian_process.abstractgaussianprocess method)": [[62, "smac.model.gaussian_process.abstract_gaussian_process.AbstractGaussianProcess.get_meta"]], "smac.model.gaussian_process.abstract_gaussian_process": [[62, "module-smac.model.gaussian_process.abstract_gaussian_process"]], "gaussianprocess (class in smac.model.gaussian_process.gaussian_process)": [[63, "smac.model.gaussian_process.gaussian_process.GaussianProcess"]], "get_meta() (smac.model.gaussian_process.gaussian_process.gaussianprocess method)": [[63, "smac.model.gaussian_process.gaussian_process.GaussianProcess.get_meta"]], "sample_functions() (smac.model.gaussian_process.gaussian_process.gaussianprocess method)": [[63, "smac.model.gaussian_process.gaussian_process.GaussianProcess.sample_functions"]], "smac.model.gaussian_process.gaussian_process": [[63, "module-smac.model.gaussian_process.gaussian_process"]], "smac.model.gaussian_process.gpytorch_gaussian_process": [[64, "module-smac.model.gaussian_process.gpytorch_gaussian_process"]], "abstractkernel (class in smac.model.gaussian_process.kernels)": [[65, "smac.model.gaussian_process.kernels.AbstractKernel"]], "constantkernel (class in smac.model.gaussian_process.kernels)": [[65, "smac.model.gaussian_process.kernels.ConstantKernel"]], "hammingkernel (class in smac.model.gaussian_process.kernels)": [[65, "smac.model.gaussian_process.kernels.HammingKernel"]], "maternkernel (class in smac.model.gaussian_process.kernels)": [[65, "smac.model.gaussian_process.kernels.MaternKernel"]], "productkernel (class in smac.model.gaussian_process.kernels)": [[65, "smac.model.gaussian_process.kernels.ProductKernel"]], "rbfkernel (class in smac.model.gaussian_process.kernels)": [[65, "smac.model.gaussian_process.kernels.RBFKernel"]], "sumkernel (class in smac.model.gaussian_process.kernels)": [[65, "smac.model.gaussian_process.kernels.SumKernel"]], "whitekernel (class in smac.model.gaussian_process.kernels)": [[65, "smac.model.gaussian_process.kernels.WhiteKernel"]], "__call__() (smac.model.gaussian_process.kernels.abstractkernel method)": [[65, "smac.model.gaussian_process.kernels.AbstractKernel.__call__"]], "__call__() (smac.model.gaussian_process.kernels.constantkernel method)": [[65, "smac.model.gaussian_process.kernels.ConstantKernel.__call__"]], "__call__() (smac.model.gaussian_process.kernels.productkernel method)": [[65, "smac.model.gaussian_process.kernels.ProductKernel.__call__"]], "__call__() (smac.model.gaussian_process.kernels.sumkernel method)": [[65, "smac.model.gaussian_process.kernels.SumKernel.__call__"]], "get_meta() (smac.model.gaussian_process.kernels.abstractkernel method)": [[65, "smac.model.gaussian_process.kernels.AbstractKernel.get_meta"]], "get_meta() (smac.model.gaussian_process.kernels.hammingkernel method)": [[65, "smac.model.gaussian_process.kernels.HammingKernel.get_meta"]], "get_params() (smac.model.gaussian_process.kernels.abstractkernel method)": [[65, "smac.model.gaussian_process.kernels.AbstractKernel.get_params"]], "has_conditions (smac.model.gaussian_process.kernels.abstractkernel attribute)": [[65, "smac.model.gaussian_process.kernels.AbstractKernel.has_conditions"]], "hyperparameter_length_scale (smac.model.gaussian_process.kernels.hammingkernel property)": [[65, "smac.model.gaussian_process.kernels.HammingKernel.hyperparameter_length_scale"]], "hyperparameters (smac.model.gaussian_process.kernels.abstractkernel property)": [[65, "smac.model.gaussian_process.kernels.AbstractKernel.hyperparameters"]], "n_dims (smac.model.gaussian_process.kernels.abstractkernel property)": [[65, "smac.model.gaussian_process.kernels.AbstractKernel.n_dims"]], "operate_on (smac.model.gaussian_process.kernels.abstractkernel attribute)": [[65, "smac.model.gaussian_process.kernels.AbstractKernel.operate_on"]], "prior (smac.model.gaussian_process.kernels.abstractkernel attribute)": [[65, "smac.model.gaussian_process.kernels.AbstractKernel.prior"]], "smac.model.gaussian_process.kernels": [[65, "module-smac.model.gaussian_process.kernels"]], "abstractkernel (class in smac.model.gaussian_process.kernels.base_kernels)": [[66, "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel"]], "constantkernel (class in smac.model.gaussian_process.kernels.base_kernels)": [[66, "smac.model.gaussian_process.kernels.base_kernels.ConstantKernel"]], "productkernel (class in smac.model.gaussian_process.kernels.base_kernels)": [[66, "smac.model.gaussian_process.kernels.base_kernels.ProductKernel"]], "sumkernel (class in smac.model.gaussian_process.kernels.base_kernels)": [[66, "smac.model.gaussian_process.kernels.base_kernels.SumKernel"]], "__call__() (smac.model.gaussian_process.kernels.base_kernels.abstractkernel method)": [[66, "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel.__call__"]], "__call__() (smac.model.gaussian_process.kernels.base_kernels.constantkernel method)": [[66, "smac.model.gaussian_process.kernels.base_kernels.ConstantKernel.__call__"]], "__call__() (smac.model.gaussian_process.kernels.base_kernels.productkernel method)": [[66, "smac.model.gaussian_process.kernels.base_kernels.ProductKernel.__call__"]], "__call__() (smac.model.gaussian_process.kernels.base_kernels.sumkernel method)": [[66, "smac.model.gaussian_process.kernels.base_kernels.SumKernel.__call__"]], "get_meta() (smac.model.gaussian_process.kernels.base_kernels.abstractkernel method)": [[66, "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel.get_meta"]], "get_params() (smac.model.gaussian_process.kernels.base_kernels.abstractkernel method)": [[66, "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel.get_params"]], "has_conditions (smac.model.gaussian_process.kernels.base_kernels.abstractkernel attribute)": [[66, "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel.has_conditions"]], "hyperparameters (smac.model.gaussian_process.kernels.base_kernels.abstractkernel property)": [[66, "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel.hyperparameters"]], "n_dims (smac.model.gaussian_process.kernels.base_kernels.abstractkernel property)": [[66, "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel.n_dims"]], "operate_on (smac.model.gaussian_process.kernels.base_kernels.abstractkernel attribute)": [[66, "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel.operate_on"]], "prior (smac.model.gaussian_process.kernels.base_kernels.abstractkernel attribute)": [[66, "smac.model.gaussian_process.kernels.base_kernels.AbstractKernel.prior"]], "smac.model.gaussian_process.kernels.base_kernels": [[66, "module-smac.model.gaussian_process.kernels.base_kernels"]], "hammingkernel (class in smac.model.gaussian_process.kernels.hamming_kernel)": [[67, "smac.model.gaussian_process.kernels.hamming_kernel.HammingKernel"]], "get_meta() (smac.model.gaussian_process.kernels.hamming_kernel.hammingkernel method)": [[67, "smac.model.gaussian_process.kernels.hamming_kernel.HammingKernel.get_meta"]], "hyperparameter_length_scale (smac.model.gaussian_process.kernels.hamming_kernel.hammingkernel property)": [[67, "smac.model.gaussian_process.kernels.hamming_kernel.HammingKernel.hyperparameter_length_scale"]], "smac.model.gaussian_process.kernels.hamming_kernel": [[67, "module-smac.model.gaussian_process.kernels.hamming_kernel"]], "maternkernel (class in smac.model.gaussian_process.kernels.matern_kernel)": [[68, "smac.model.gaussian_process.kernels.matern_kernel.MaternKernel"]], "smac.model.gaussian_process.kernels.matern_kernel": [[68, "module-smac.model.gaussian_process.kernels.matern_kernel"]], "rbfkernel (class in smac.model.gaussian_process.kernels.rbf_kernel)": [[69, "smac.model.gaussian_process.kernels.rbf_kernel.RBFKernel"]], "smac.model.gaussian_process.kernels.rbf_kernel": [[69, "module-smac.model.gaussian_process.kernels.rbf_kernel"]], "whitekernel (class in smac.model.gaussian_process.kernels.white_kernel)": [[70, "smac.model.gaussian_process.kernels.white_kernel.WhiteKernel"]], "smac.model.gaussian_process.kernels.white_kernel": [[70, "module-smac.model.gaussian_process.kernels.white_kernel"]], "mcmcgaussianprocess (class in smac.model.gaussian_process.mcmc_gaussian_process)": [[71, "smac.model.gaussian_process.mcmc_gaussian_process.MCMCGaussianProcess"]], "get_meta() (smac.model.gaussian_process.mcmc_gaussian_process.mcmcgaussianprocess method)": [[71, "smac.model.gaussian_process.mcmc_gaussian_process.MCMCGaussianProcess.get_meta"]], "models (smac.model.gaussian_process.mcmc_gaussian_process.mcmcgaussianprocess property)": [[71, "smac.model.gaussian_process.mcmc_gaussian_process.MCMCGaussianProcess.models"]], "smac.model.gaussian_process.mcmc_gaussian_process": [[71, "module-smac.model.gaussian_process.mcmc_gaussian_process"]], "gammaprior (class in smac.model.gaussian_process.priors)": [[72, "smac.model.gaussian_process.priors.GammaPrior"]], "horseshoeprior (class in smac.model.gaussian_process.priors)": [[72, "smac.model.gaussian_process.priors.HorseshoePrior"]], "lognormalprior (class in smac.model.gaussian_process.priors)": [[72, "smac.model.gaussian_process.priors.LogNormalPrior"]], "softtophatprior (class in smac.model.gaussian_process.priors)": [[72, "smac.model.gaussian_process.priors.SoftTopHatPrior"]], "tophatprior (class in smac.model.gaussian_process.priors)": [[72, "smac.model.gaussian_process.priors.TophatPrior"]], "get_gradient() (smac.model.gaussian_process.priors.softtophatprior method)": [[72, "smac.model.gaussian_process.priors.SoftTopHatPrior.get_gradient"]], "get_gradient() (smac.model.gaussian_process.priors.tophatprior method)": [[72, "smac.model.gaussian_process.priors.TophatPrior.get_gradient"]], "get_log_probability() (smac.model.gaussian_process.priors.softtophatprior method)": [[72, "smac.model.gaussian_process.priors.SoftTopHatPrior.get_log_probability"]], "get_meta() (smac.model.gaussian_process.priors.gammaprior method)": [[72, "smac.model.gaussian_process.priors.GammaPrior.get_meta"]], "get_meta() (smac.model.gaussian_process.priors.horseshoeprior method)": [[72, "smac.model.gaussian_process.priors.HorseshoePrior.get_meta"]], "get_meta() (smac.model.gaussian_process.priors.lognormalprior method)": [[72, "smac.model.gaussian_process.priors.LogNormalPrior.get_meta"]], "get_meta() (smac.model.gaussian_process.priors.softtophatprior method)": [[72, "smac.model.gaussian_process.priors.SoftTopHatPrior.get_meta"]], "get_meta() (smac.model.gaussian_process.priors.tophatprior method)": [[72, "smac.model.gaussian_process.priors.TophatPrior.get_meta"]], "smac.model.gaussian_process.priors": [[72, "module-smac.model.gaussian_process.priors"]], "abstractprior (class in smac.model.gaussian_process.priors.abstract_prior)": [[73, "smac.model.gaussian_process.priors.abstract_prior.AbstractPrior"]], "get_gradient() (smac.model.gaussian_process.priors.abstract_prior.abstractprior method)": [[73, "smac.model.gaussian_process.priors.abstract_prior.AbstractPrior.get_gradient"]], "get_log_probability() (smac.model.gaussian_process.priors.abstract_prior.abstractprior method)": [[73, "smac.model.gaussian_process.priors.abstract_prior.AbstractPrior.get_log_probability"]], "get_meta() (smac.model.gaussian_process.priors.abstract_prior.abstractprior method)": [[73, "smac.model.gaussian_process.priors.abstract_prior.AbstractPrior.get_meta"]], "sample_from_prior() (smac.model.gaussian_process.priors.abstract_prior.abstractprior method)": [[73, "smac.model.gaussian_process.priors.abstract_prior.AbstractPrior.sample_from_prior"]], "smac.model.gaussian_process.priors.abstract_prior": [[73, "module-smac.model.gaussian_process.priors.abstract_prior"]], "gammaprior (class in smac.model.gaussian_process.priors.gamma_prior)": [[74, "smac.model.gaussian_process.priors.gamma_prior.GammaPrior"]], "get_meta() (smac.model.gaussian_process.priors.gamma_prior.gammaprior method)": [[74, "smac.model.gaussian_process.priors.gamma_prior.GammaPrior.get_meta"]], "smac.model.gaussian_process.priors.gamma_prior": [[74, "module-smac.model.gaussian_process.priors.gamma_prior"]], "horseshoeprior (class in smac.model.gaussian_process.priors.horseshoe_prior)": [[75, "smac.model.gaussian_process.priors.horseshoe_prior.HorseshoePrior"]], "get_meta() (smac.model.gaussian_process.priors.horseshoe_prior.horseshoeprior method)": [[75, "smac.model.gaussian_process.priors.horseshoe_prior.HorseshoePrior.get_meta"]], "smac.model.gaussian_process.priors.horseshoe_prior": [[75, "module-smac.model.gaussian_process.priors.horseshoe_prior"]], "lognormalprior (class in smac.model.gaussian_process.priors.log_normal_prior)": [[76, "smac.model.gaussian_process.priors.log_normal_prior.LogNormalPrior"]], "get_meta() (smac.model.gaussian_process.priors.log_normal_prior.lognormalprior method)": [[76, "smac.model.gaussian_process.priors.log_normal_prior.LogNormalPrior.get_meta"]], "smac.model.gaussian_process.priors.log_normal_prior": [[76, "module-smac.model.gaussian_process.priors.log_normal_prior"]], "softtophatprior (class in smac.model.gaussian_process.priors.tophat_prior)": [[77, "smac.model.gaussian_process.priors.tophat_prior.SoftTopHatPrior"]], "tophatprior (class in smac.model.gaussian_process.priors.tophat_prior)": [[77, "smac.model.gaussian_process.priors.tophat_prior.TophatPrior"]], "get_gradient() (smac.model.gaussian_process.priors.tophat_prior.softtophatprior method)": [[77, "smac.model.gaussian_process.priors.tophat_prior.SoftTopHatPrior.get_gradient"]], "get_gradient() (smac.model.gaussian_process.priors.tophat_prior.tophatprior method)": [[77, "smac.model.gaussian_process.priors.tophat_prior.TophatPrior.get_gradient"]], "get_log_probability() (smac.model.gaussian_process.priors.tophat_prior.softtophatprior method)": [[77, "smac.model.gaussian_process.priors.tophat_prior.SoftTopHatPrior.get_log_probability"]], "get_meta() (smac.model.gaussian_process.priors.tophat_prior.softtophatprior method)": [[77, "smac.model.gaussian_process.priors.tophat_prior.SoftTopHatPrior.get_meta"]], "get_meta() (smac.model.gaussian_process.priors.tophat_prior.tophatprior method)": [[77, "smac.model.gaussian_process.priors.tophat_prior.TophatPrior.get_meta"]], "smac.model.gaussian_process.priors.tophat_prior": [[77, "module-smac.model.gaussian_process.priors.tophat_prior"]], "multiobjectivemodel (class in smac.model.multi_objective_model)": [[78, "smac.model.multi_objective_model.MultiObjectiveModel"]], "models (smac.model.multi_objective_model.multiobjectivemodel property)": [[78, "smac.model.multi_objective_model.MultiObjectiveModel.models"]], "predict_marginalized() (smac.model.multi_objective_model.multiobjectivemodel method)": [[78, "smac.model.multi_objective_model.MultiObjectiveModel.predict_marginalized"]], "smac.model.multi_objective_model": [[78, "module-smac.model.multi_objective_model"]], "abstractrandomforest (class in smac.model.random_forest)": [[79, "smac.model.random_forest.AbstractRandomForest"]], "randomforest (class in smac.model.random_forest)": [[79, "smac.model.random_forest.RandomForest"]], "get_meta() (smac.model.random_forest.randomforest method)": [[79, "smac.model.random_forest.RandomForest.get_meta"]], "predict_marginalized() (smac.model.random_forest.randomforest method)": [[79, "smac.model.random_forest.RandomForest.predict_marginalized"]], "smac.model.random_forest": [[79, "module-smac.model.random_forest"]], "abstractrandomforest (class in smac.model.random_forest.abstract_random_forest)": [[80, "smac.model.random_forest.abstract_random_forest.AbstractRandomForest"]], "smac.model.random_forest.abstract_random_forest": [[80, "module-smac.model.random_forest.abstract_random_forest"]], "randomforest (class in smac.model.random_forest.random_forest)": [[81, "smac.model.random_forest.random_forest.RandomForest"]], "get_meta() (smac.model.random_forest.random_forest.randomforest method)": [[81, "smac.model.random_forest.random_forest.RandomForest.get_meta"]], "predict_marginalized() (smac.model.random_forest.random_forest.randomforest method)": [[81, "smac.model.random_forest.random_forest.RandomForest.predict_marginalized"]], "smac.model.random_forest.random_forest": [[81, "module-smac.model.random_forest.random_forest"]], "randommodel (class in smac.model.random_model)": [[82, "smac.model.random_model.RandomModel"]], "smac.model.random_model": [[82, "module-smac.model.random_model"]], "abstractmultiobjectivealgorithm (class in smac.multi_objective)": [[83, "smac.multi_objective.AbstractMultiObjectiveAlgorithm"]], "meanaggregationstrategy (class in smac.multi_objective)": [[83, "smac.multi_objective.MeanAggregationStrategy"]], "parego (class in smac.multi_objective)": [[83, "smac.multi_objective.ParEGO"]], "__call__() (smac.multi_objective.abstractmultiobjectivealgorithm method)": [[83, "smac.multi_objective.AbstractMultiObjectiveAlgorithm.__call__"]], "__call__() (smac.multi_objective.meanaggregationstrategy method)": [[83, "smac.multi_objective.MeanAggregationStrategy.__call__"]], "__call__() (smac.multi_objective.parego method)": [[83, "smac.multi_objective.ParEGO.__call__"]], "get_meta() (smac.multi_objective.abstractmultiobjectivealgorithm method)": [[83, "smac.multi_objective.AbstractMultiObjectiveAlgorithm.get_meta"]], "get_meta() (smac.multi_objective.parego method)": [[83, "smac.multi_objective.ParEGO.get_meta"]], "smac.multi_objective": [[83, "module-smac.multi_objective"]], "update_on_iteration_start() (smac.multi_objective.abstractmultiobjectivealgorithm method)": [[83, "smac.multi_objective.AbstractMultiObjectiveAlgorithm.update_on_iteration_start"]], "update_on_iteration_start() (smac.multi_objective.parego method)": [[83, "smac.multi_objective.ParEGO.update_on_iteration_start"]], "abstractmultiobjectivealgorithm (class in smac.multi_objective.abstract_multi_objective_algorithm)": [[84, "smac.multi_objective.abstract_multi_objective_algorithm.AbstractMultiObjectiveAlgorithm"]], "__call__() (smac.multi_objective.abstract_multi_objective_algorithm.abstractmultiobjectivealgorithm method)": [[84, "smac.multi_objective.abstract_multi_objective_algorithm.AbstractMultiObjectiveAlgorithm.__call__"]], "get_meta() (smac.multi_objective.abstract_multi_objective_algorithm.abstractmultiobjectivealgorithm method)": [[84, "smac.multi_objective.abstract_multi_objective_algorithm.AbstractMultiObjectiveAlgorithm.get_meta"]], "smac.multi_objective.abstract_multi_objective_algorithm": [[84, "module-smac.multi_objective.abstract_multi_objective_algorithm"]], "update_on_iteration_start() (smac.multi_objective.abstract_multi_objective_algorithm.abstractmultiobjectivealgorithm method)": [[84, "smac.multi_objective.abstract_multi_objective_algorithm.AbstractMultiObjectiveAlgorithm.update_on_iteration_start"]], "meanaggregationstrategy (class in smac.multi_objective.aggregation_strategy)": [[85, "smac.multi_objective.aggregation_strategy.MeanAggregationStrategy"]], "__call__() (smac.multi_objective.aggregation_strategy.meanaggregationstrategy method)": [[85, "smac.multi_objective.aggregation_strategy.MeanAggregationStrategy.__call__"]], "smac.multi_objective.aggregation_strategy": [[85, "module-smac.multi_objective.aggregation_strategy"]], "parego (class in smac.multi_objective.parego)": [[86, "smac.multi_objective.parego.ParEGO"]], "__call__() (smac.multi_objective.parego.parego method)": [[86, "smac.multi_objective.parego.ParEGO.__call__"]], "get_meta() (smac.multi_objective.parego.parego method)": [[86, "smac.multi_objective.parego.ParEGO.get_meta"]], "smac.multi_objective.parego": [[86, "module-smac.multi_objective.parego"]], "update_on_iteration_start() (smac.multi_objective.parego.parego method)": [[86, "smac.multi_objective.parego.ParEGO.update_on_iteration_start"]], "abstractrandomdesign (class in smac.random_design)": [[87, "smac.random_design.AbstractRandomDesign"]], "cosineannealingrandomdesign (class in smac.random_design)": [[87, "smac.random_design.CosineAnnealingRandomDesign"]], "dynamicmodulusrandomdesign (class in smac.random_design)": [[87, "smac.random_design.DynamicModulusRandomDesign"]], "dynamicprobabilityrandomdesign (class in smac.random_design)": [[87, "smac.random_design.DynamicProbabilityRandomDesign"]], "modulusrandomdesign (class in smac.random_design)": [[87, "smac.random_design.ModulusRandomDesign"]], "probabilityrandomdesign (class in smac.random_design)": [[87, "smac.random_design.ProbabilityRandomDesign"]], "check() (smac.random_design.abstractrandomdesign method)": [[87, "smac.random_design.AbstractRandomDesign.check"]], "check() (smac.random_design.cosineannealingrandomdesign method)": [[87, "smac.random_design.CosineAnnealingRandomDesign.check"]], "check() (smac.random_design.dynamicmodulusrandomdesign method)": [[87, "smac.random_design.DynamicModulusRandomDesign.check"]], "check() (smac.random_design.dynamicprobabilityrandomdesign method)": [[87, "smac.random_design.DynamicProbabilityRandomDesign.check"]], "check() (smac.random_design.modulusrandomdesign method)": [[87, "smac.random_design.ModulusRandomDesign.check"]], "check() (smac.random_design.probabilityrandomdesign method)": [[87, "smac.random_design.ProbabilityRandomDesign.check"]], "get_meta() (smac.random_design.abstractrandomdesign method)": [[87, "smac.random_design.AbstractRandomDesign.get_meta"]], "get_meta() (smac.random_design.cosineannealingrandomdesign method)": [[87, "smac.random_design.CosineAnnealingRandomDesign.get_meta"]], "get_meta() (smac.random_design.dynamicmodulusrandomdesign method)": [[87, "smac.random_design.DynamicModulusRandomDesign.get_meta"]], "get_meta() (smac.random_design.dynamicprobabilityrandomdesign method)": [[87, "smac.random_design.DynamicProbabilityRandomDesign.get_meta"]], "get_meta() (smac.random_design.modulusrandomdesign method)": [[87, "smac.random_design.ModulusRandomDesign.get_meta"]], "get_meta() (smac.random_design.probabilityrandomdesign method)": [[87, "smac.random_design.ProbabilityRandomDesign.get_meta"]], "next_iteration() (smac.random_design.abstractrandomdesign method)": [[87, "smac.random_design.AbstractRandomDesign.next_iteration"]], "next_iteration() (smac.random_design.cosineannealingrandomdesign method)": [[87, "smac.random_design.CosineAnnealingRandomDesign.next_iteration"]], "next_iteration() (smac.random_design.dynamicmodulusrandomdesign method)": [[87, "smac.random_design.DynamicModulusRandomDesign.next_iteration"]], "next_iteration() (smac.random_design.dynamicprobabilityrandomdesign method)": [[87, "smac.random_design.DynamicProbabilityRandomDesign.next_iteration"]], "smac.random_design": [[87, "module-smac.random_design"]], "abstractrandomdesign (class in smac.random_design.abstract_random_design)": [[88, "smac.random_design.abstract_random_design.AbstractRandomDesign"]], "check() (smac.random_design.abstract_random_design.abstractrandomdesign method)": [[88, "smac.random_design.abstract_random_design.AbstractRandomDesign.check"]], "get_meta() (smac.random_design.abstract_random_design.abstractrandomdesign method)": [[88, "smac.random_design.abstract_random_design.AbstractRandomDesign.get_meta"]], "next_iteration() (smac.random_design.abstract_random_design.abstractrandomdesign method)": [[88, "smac.random_design.abstract_random_design.AbstractRandomDesign.next_iteration"]], "smac.random_design.abstract_random_design": [[88, "module-smac.random_design.abstract_random_design"]], "cosineannealingrandomdesign (class in smac.random_design.annealing_design)": [[89, "smac.random_design.annealing_design.CosineAnnealingRandomDesign"]], "check() (smac.random_design.annealing_design.cosineannealingrandomdesign method)": [[89, "smac.random_design.annealing_design.CosineAnnealingRandomDesign.check"]], "get_meta() (smac.random_design.annealing_design.cosineannealingrandomdesign method)": [[89, "smac.random_design.annealing_design.CosineAnnealingRandomDesign.get_meta"]], "next_iteration() (smac.random_design.annealing_design.cosineannealingrandomdesign method)": [[89, "smac.random_design.annealing_design.CosineAnnealingRandomDesign.next_iteration"]], "smac.random_design.annealing_design": [[89, "module-smac.random_design.annealing_design"]], "dynamicmodulusrandomdesign (class in smac.random_design.modulus_design)": [[90, "smac.random_design.modulus_design.DynamicModulusRandomDesign"]], "modulusrandomdesign (class in smac.random_design.modulus_design)": [[90, "smac.random_design.modulus_design.ModulusRandomDesign"]], "check() (smac.random_design.modulus_design.dynamicmodulusrandomdesign method)": [[90, "smac.random_design.modulus_design.DynamicModulusRandomDesign.check"]], "check() (smac.random_design.modulus_design.modulusrandomdesign method)": [[90, "smac.random_design.modulus_design.ModulusRandomDesign.check"]], "get_meta() (smac.random_design.modulus_design.dynamicmodulusrandomdesign method)": [[90, "smac.random_design.modulus_design.DynamicModulusRandomDesign.get_meta"]], "get_meta() (smac.random_design.modulus_design.modulusrandomdesign method)": [[90, "smac.random_design.modulus_design.ModulusRandomDesign.get_meta"]], "next_iteration() (smac.random_design.modulus_design.dynamicmodulusrandomdesign method)": [[90, "smac.random_design.modulus_design.DynamicModulusRandomDesign.next_iteration"]], "smac.random_design.modulus_design": [[90, "module-smac.random_design.modulus_design"]], "dynamicprobabilityrandomdesign (class in smac.random_design.probability_design)": [[91, "smac.random_design.probability_design.DynamicProbabilityRandomDesign"]], "probabilityrandomdesign (class in smac.random_design.probability_design)": [[91, "smac.random_design.probability_design.ProbabilityRandomDesign"]], "check() (smac.random_design.probability_design.dynamicprobabilityrandomdesign method)": [[91, "smac.random_design.probability_design.DynamicProbabilityRandomDesign.check"]], "check() (smac.random_design.probability_design.probabilityrandomdesign method)": [[91, "smac.random_design.probability_design.ProbabilityRandomDesign.check"]], "get_meta() (smac.random_design.probability_design.dynamicprobabilityrandomdesign method)": [[91, "smac.random_design.probability_design.DynamicProbabilityRandomDesign.get_meta"]], "get_meta() (smac.random_design.probability_design.probabilityrandomdesign method)": [[91, "smac.random_design.probability_design.ProbabilityRandomDesign.get_meta"]], "next_iteration() (smac.random_design.probability_design.dynamicprobabilityrandomdesign method)": [[91, "smac.random_design.probability_design.DynamicProbabilityRandomDesign.next_iteration"]], "smac.random_design.probability_design": [[91, "module-smac.random_design.probability_design"]], "dataorigin (class in smac.runhistory)": [[92, "smac.runhistory.DataOrigin"]], "instanceseedbudgetkey (class in smac.runhistory)": [[92, "smac.runhistory.InstanceSeedBudgetKey"]], "instanceseedkey (class in smac.runhistory)": [[92, "smac.runhistory.InstanceSeedKey"]], "runhistory (class in smac.runhistory)": [[92, "smac.runhistory.RunHistory"]], "statustype (class in smac.runhistory)": [[92, "smac.runhistory.StatusType"]], "trialinfo (class in smac.runhistory)": [[92, "smac.runhistory.TrialInfo"]], "trialinfointent (class in smac.runhistory)": [[92, "smac.runhistory.TrialInfoIntent"]], "trialkey (class in smac.runhistory)": [[92, "smac.runhistory.TrialKey"]], "trialvalue (class in smac.runhistory)": [[92, "smac.runhistory.TrialValue"]], "__contains__() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.__contains__"]], "__eq__() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.__eq__"]], "__getitem__() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.__getitem__"]], "__iter__() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.__iter__"]], "__len__() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.__len__"]], "add() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.add"]], "average_cost() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.average_cost"]], "config_ids (smac.runhistory.runhistory property)": [[92, "smac.runhistory.RunHistory.config_ids"]], "empty() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.empty"]], "get_configs() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.get_configs"]], "get_configs_per_budget() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.get_configs_per_budget"]], "get_cost() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.get_cost"]], "get_incumbent() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.get_incumbent"]], "get_min_cost() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.get_min_cost"]], "get_trials() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.get_trials"]], "ids_config (smac.runhistory.runhistory property)": [[92, "smac.runhistory.RunHistory.ids_config"]], "incremental_update_cost() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.incremental_update_cost"]], "load_json() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.load_json"]], "min_cost() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.min_cost"]], "objective_bounds (smac.runhistory.runhistory property)": [[92, "smac.runhistory.RunHistory.objective_bounds"]], "reset() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.reset"]], "save_json() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.save_json"]], "smac.runhistory": [[92, "module-smac.runhistory"]], "sum_cost() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.sum_cost"]], "update() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.update"]], "update_cost() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.update_cost"]], "update_costs() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.update_costs"]], "update_from_json() (smac.runhistory.runhistory method)": [[92, "smac.runhistory.RunHistory.update_from_json"]], "instanceseedbudgetkey (class in smac.runhistory.dataclasses)": [[93, "smac.runhistory.dataclasses.InstanceSeedBudgetKey"]], "instanceseedkey (class in smac.runhistory.dataclasses)": [[93, "smac.runhistory.dataclasses.InstanceSeedKey"]], "trajectoryitem (class in smac.runhistory.dataclasses)": [[93, "smac.runhistory.dataclasses.TrajectoryItem"]], "trialinfo (class in smac.runhistory.dataclasses)": [[93, "smac.runhistory.dataclasses.TrialInfo"]], "trialkey (class in smac.runhistory.dataclasses)": [[93, "smac.runhistory.dataclasses.TrialKey"]], "trialvalue (class in smac.runhistory.dataclasses)": [[93, "smac.runhistory.dataclasses.TrialValue"]], "smac.runhistory.dataclasses": [[93, "module-smac.runhistory.dataclasses"]], "abstractrunhistoryencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.AbstractRunHistoryEncoder"]], "runhistoryeipsencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.RunHistoryEIPSEncoder"]], "runhistoryencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.RunHistoryEncoder"]], "runhistoryinversescaledencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.RunHistoryInverseScaledEncoder"]], "runhistorylogencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.RunHistoryLogEncoder"]], "runhistorylogscaledencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.RunHistoryLogScaledEncoder"]], "runhistoryrawencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.RunHistoryRawEncoder"]], "runhistoryrawscaledencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.RunHistoryRawScaledEncoder"]], "runhistoryscaledencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.RunHistoryScaledEncoder"]], "runhistorysqrtscaledencoder (class in smac.runhistory.encoder)": [[94, "smac.runhistory.encoder.RunHistorySqrtScaledEncoder"]], "get_configurations() (smac.runhistory.encoder.abstractrunhistoryencoder method)": [[94, "smac.runhistory.encoder.AbstractRunHistoryEncoder.get_configurations"]], "get_meta() (smac.runhistory.encoder.abstractrunhistoryencoder method)": [[94, "smac.runhistory.encoder.AbstractRunHistoryEncoder.get_meta"]], "smac.runhistory.encoder": [[94, "module-smac.runhistory.encoder"]], "transform() (smac.runhistory.encoder.abstractrunhistoryencoder method)": [[94, "smac.runhistory.encoder.AbstractRunHistoryEncoder.transform"]], "transform_raw_values() (smac.runhistory.encoder.runhistoryrawencoder method)": [[94, "smac.runhistory.encoder.RunHistoryRawEncoder.transform_raw_values"]], "transform_raw_values() (smac.runhistory.encoder.runhistoryrawscaledencoder method)": [[94, "smac.runhistory.encoder.RunHistoryRawScaledEncoder.transform_raw_values"]], "transform_response_values() (smac.runhistory.encoder.abstractrunhistoryencoder method)": [[94, "smac.runhistory.encoder.AbstractRunHistoryEncoder.transform_response_values"]], "transform_response_values() (smac.runhistory.encoder.runhistoryeipsencoder method)": [[94, "smac.runhistory.encoder.RunHistoryEIPSEncoder.transform_response_values"]], "transform_response_values() (smac.runhistory.encoder.runhistoryencoder method)": [[94, "smac.runhistory.encoder.RunHistoryEncoder.transform_response_values"]], "transform_response_values() (smac.runhistory.encoder.runhistoryinversescaledencoder method)": [[94, "smac.runhistory.encoder.RunHistoryInverseScaledEncoder.transform_response_values"]], "transform_response_values() (smac.runhistory.encoder.runhistorylogencoder method)": [[94, "smac.runhistory.encoder.RunHistoryLogEncoder.transform_response_values"]], "transform_response_values() (smac.runhistory.encoder.runhistorylogscaledencoder method)": [[94, "smac.runhistory.encoder.RunHistoryLogScaledEncoder.transform_response_values"]], "transform_response_values() (smac.runhistory.encoder.runhistoryrawencoder method)": [[94, "smac.runhistory.encoder.RunHistoryRawEncoder.transform_response_values"]], "transform_response_values() (smac.runhistory.encoder.runhistoryscaledencoder method)": [[94, "smac.runhistory.encoder.RunHistoryScaledEncoder.transform_response_values"]], "transform_response_values() (smac.runhistory.encoder.runhistorysqrtscaledencoder method)": [[94, "smac.runhistory.encoder.RunHistorySqrtScaledEncoder.transform_response_values"]], "transform_with_raw() (smac.runhistory.encoder.runhistoryrawencoder method)": [[94, "smac.runhistory.encoder.RunHistoryRawEncoder.transform_with_raw"]], "abstractrunhistoryencoder (class in smac.runhistory.encoder.abstract_encoder)": [[95, "smac.runhistory.encoder.abstract_encoder.AbstractRunHistoryEncoder"]], "get_configurations() (smac.runhistory.encoder.abstract_encoder.abstractrunhistoryencoder method)": [[95, "smac.runhistory.encoder.abstract_encoder.AbstractRunHistoryEncoder.get_configurations"]], "get_meta() (smac.runhistory.encoder.abstract_encoder.abstractrunhistoryencoder method)": [[95, "smac.runhistory.encoder.abstract_encoder.AbstractRunHistoryEncoder.get_meta"]], "smac.runhistory.encoder.abstract_encoder": [[95, "module-smac.runhistory.encoder.abstract_encoder"]], "transform() (smac.runhistory.encoder.abstract_encoder.abstractrunhistoryencoder method)": [[95, "smac.runhistory.encoder.abstract_encoder.AbstractRunHistoryEncoder.transform"]], "transform_response_values() (smac.runhistory.encoder.abstract_encoder.abstractrunhistoryencoder method)": [[95, "smac.runhistory.encoder.abstract_encoder.AbstractRunHistoryEncoder.transform_response_values"]], "runhistoryrawencoder (class in smac.runhistory.encoder.boing_encoder)": [[96, "smac.runhistory.encoder.boing_encoder.RunHistoryRawEncoder"]], "runhistoryrawscaledencoder (class in smac.runhistory.encoder.boing_encoder)": [[96, "smac.runhistory.encoder.boing_encoder.RunHistoryRawScaledEncoder"]], "smac.runhistory.encoder.boing_encoder": [[96, "module-smac.runhistory.encoder.boing_encoder"]], "transform_raw_values() (smac.runhistory.encoder.boing_encoder.runhistoryrawencoder method)": [[96, "smac.runhistory.encoder.boing_encoder.RunHistoryRawEncoder.transform_raw_values"]], "transform_raw_values() (smac.runhistory.encoder.boing_encoder.runhistoryrawscaledencoder method)": [[96, "smac.runhistory.encoder.boing_encoder.RunHistoryRawScaledEncoder.transform_raw_values"]], "transform_response_values() (smac.runhistory.encoder.boing_encoder.runhistoryrawencoder method)": [[96, "smac.runhistory.encoder.boing_encoder.RunHistoryRawEncoder.transform_response_values"]], "transform_with_raw() (smac.runhistory.encoder.boing_encoder.runhistoryrawencoder method)": [[96, "smac.runhistory.encoder.boing_encoder.RunHistoryRawEncoder.transform_with_raw"]], "runhistoryeipsencoder (class in smac.runhistory.encoder.eips_encoder)": [[97, "smac.runhistory.encoder.eips_encoder.RunHistoryEIPSEncoder"]], "smac.runhistory.encoder.eips_encoder": [[97, "module-smac.runhistory.encoder.eips_encoder"]], "transform_response_values() (smac.runhistory.encoder.eips_encoder.runhistoryeipsencoder method)": [[97, "smac.runhistory.encoder.eips_encoder.RunHistoryEIPSEncoder.transform_response_values"]], "runhistoryencoder (class in smac.runhistory.encoder.encoder)": [[98, "smac.runhistory.encoder.encoder.RunHistoryEncoder"]], "smac.runhistory.encoder.encoder": [[98, "module-smac.runhistory.encoder.encoder"]], "transform_response_values() (smac.runhistory.encoder.encoder.runhistoryencoder method)": [[98, "smac.runhistory.encoder.encoder.RunHistoryEncoder.transform_response_values"]], "runhistoryinversescaledencoder (class in smac.runhistory.encoder.inverse_scaled_encoder)": [[99, "smac.runhistory.encoder.inverse_scaled_encoder.RunHistoryInverseScaledEncoder"]], "smac.runhistory.encoder.inverse_scaled_encoder": [[99, "module-smac.runhistory.encoder.inverse_scaled_encoder"]], "transform_response_values() (smac.runhistory.encoder.inverse_scaled_encoder.runhistoryinversescaledencoder method)": [[99, "smac.runhistory.encoder.inverse_scaled_encoder.RunHistoryInverseScaledEncoder.transform_response_values"]], "runhistorylogencoder (class in smac.runhistory.encoder.log_encoder)": [[100, "smac.runhistory.encoder.log_encoder.RunHistoryLogEncoder"]], "smac.runhistory.encoder.log_encoder": [[100, "module-smac.runhistory.encoder.log_encoder"]], "transform_response_values() (smac.runhistory.encoder.log_encoder.runhistorylogencoder method)": [[100, "smac.runhistory.encoder.log_encoder.RunHistoryLogEncoder.transform_response_values"]], "runhistorylogscaledencoder (class in smac.runhistory.encoder.log_scaled_encoder)": [[101, "smac.runhistory.encoder.log_scaled_encoder.RunHistoryLogScaledEncoder"]], "smac.runhistory.encoder.log_scaled_encoder": [[101, "module-smac.runhistory.encoder.log_scaled_encoder"]], "transform_response_values() (smac.runhistory.encoder.log_scaled_encoder.runhistorylogscaledencoder method)": [[101, "smac.runhistory.encoder.log_scaled_encoder.RunHistoryLogScaledEncoder.transform_response_values"]], "runhistoryscaledencoder (class in smac.runhistory.encoder.scaled_encoder)": [[102, "smac.runhistory.encoder.scaled_encoder.RunHistoryScaledEncoder"]], "smac.runhistory.encoder.scaled_encoder": [[102, "module-smac.runhistory.encoder.scaled_encoder"]], "transform_response_values() (smac.runhistory.encoder.scaled_encoder.runhistoryscaledencoder method)": [[102, "smac.runhistory.encoder.scaled_encoder.RunHistoryScaledEncoder.transform_response_values"]], "runhistorysqrtscaledencoder (class in smac.runhistory.encoder.sqrt_scaled_encoder)": [[103, "smac.runhistory.encoder.sqrt_scaled_encoder.RunHistorySqrtScaledEncoder"]], "smac.runhistory.encoder.sqrt_scaled_encoder": [[103, "module-smac.runhistory.encoder.sqrt_scaled_encoder"]], "transform_response_values() (smac.runhistory.encoder.sqrt_scaled_encoder.runhistorysqrtscaledencoder method)": [[103, "smac.runhistory.encoder.sqrt_scaled_encoder.RunHistorySqrtScaledEncoder.transform_response_values"]], "dataorigin (class in smac.runhistory.enumerations)": [[104, "smac.runhistory.enumerations.DataOrigin"]], "statustype (class in smac.runhistory.enumerations)": [[104, "smac.runhistory.enumerations.StatusType"]], "trialinfointent (class in smac.runhistory.enumerations)": [[104, "smac.runhistory.enumerations.TrialInfoIntent"]], "smac.runhistory.enumerations": [[104, "module-smac.runhistory.enumerations"]], "runhistory (class in smac.runhistory.runhistory)": [[105, "smac.runhistory.runhistory.RunHistory"]], "__contains__() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.__contains__"]], "__eq__() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.__eq__"]], "__getitem__() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.__getitem__"]], "__iter__() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.__iter__"]], "__len__() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.__len__"]], "add() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.add"]], "average_cost() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.average_cost"]], "config_ids (smac.runhistory.runhistory.runhistory property)": [[105, "smac.runhistory.runhistory.RunHistory.config_ids"]], "empty() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.empty"]], "get_configs() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.get_configs"]], "get_configs_per_budget() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.get_configs_per_budget"]], "get_cost() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.get_cost"]], "get_incumbent() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.get_incumbent"]], "get_min_cost() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.get_min_cost"]], "get_trials() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.get_trials"]], "ids_config (smac.runhistory.runhistory.runhistory property)": [[105, "smac.runhistory.runhistory.RunHistory.ids_config"]], "incremental_update_cost() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.incremental_update_cost"]], "load_json() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.load_json"]], "min_cost() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.min_cost"]], "objective_bounds (smac.runhistory.runhistory.runhistory property)": [[105, "smac.runhistory.runhistory.RunHistory.objective_bounds"]], "reset() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.reset"]], "save_json() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.save_json"]], "smac.runhistory.runhistory": [[105, "module-smac.runhistory.runhistory"]], "sum_cost() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.sum_cost"]], "update() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.update"]], "update_cost() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.update_cost"]], "update_costs() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.update_costs"]], "update_from_json() (smac.runhistory.runhistory.runhistory method)": [[105, "smac.runhistory.runhistory.RunHistory.update_from_json"]], "abstractrunner (class in smac.runner)": [[106, "smac.runner.AbstractRunner"]], "daskparallelrunner (class in smac.runner)": [[106, "smac.runner.DaskParallelRunner"]], "firstruncrashedexception": [[106, "smac.runner.FirstRunCrashedException"], [109, "smac.runner.exceptions.FirstRunCrashedException"]], "targetalgorithmabortexception": [[106, "smac.runner.TargetAlgorithmAbortException"], [109, "smac.runner.exceptions.TargetAlgorithmAbortException"]], "targetfunctionrunner (class in smac.runner)": [[106, "smac.runner.TargetFunctionRunner"]], "__call__() (smac.runner.targetfunctionrunner method)": [[106, "smac.runner.TargetFunctionRunner.__call__"]], "__del__() (smac.runner.daskparallelrunner method)": [[106, "smac.runner.DaskParallelRunner.__del__"]], "close() (smac.runner.daskparallelrunner method)": [[106, "smac.runner.DaskParallelRunner.close"]], "count_available_workers() (smac.runner.abstractrunner method)": [[106, "smac.runner.AbstractRunner.count_available_workers"]], "count_available_workers() (smac.runner.daskparallelrunner method)": [[106, "smac.runner.DaskParallelRunner.count_available_workers"]], "count_available_workers() (smac.runner.targetfunctionrunner method)": [[106, "smac.runner.TargetFunctionRunner.count_available_workers"]], "get_meta() (smac.runner.abstractrunner method)": [[106, "smac.runner.AbstractRunner.get_meta"]], "is_running() (smac.runner.abstractrunner method)": [[106, "smac.runner.AbstractRunner.is_running"]], "is_running() (smac.runner.daskparallelrunner method)": [[106, "smac.runner.DaskParallelRunner.is_running"]], "is_running() (smac.runner.targetfunctionrunner method)": [[106, "smac.runner.TargetFunctionRunner.is_running"]], "iter_results() (smac.runner.abstractrunner method)": [[106, "smac.runner.AbstractRunner.iter_results"]], "iter_results() (smac.runner.daskparallelrunner method)": [[106, "smac.runner.DaskParallelRunner.iter_results"]], "iter_results() (smac.runner.targetfunctionrunner method)": [[106, "smac.runner.TargetFunctionRunner.iter_results"]], "run() (smac.runner.abstractrunner method)": [[106, "smac.runner.AbstractRunner.run"]], "run() (smac.runner.daskparallelrunner method)": [[106, "smac.runner.DaskParallelRunner.run"]], "run() (smac.runner.targetfunctionrunner method)": [[106, "smac.runner.TargetFunctionRunner.run"]], "run_wrapper() (smac.runner.abstractrunner method)": [[106, "smac.runner.AbstractRunner.run_wrapper"]], "smac.runner": [[106, "module-smac.runner"]], "submit_trial() (smac.runner.abstractrunner method)": [[106, "smac.runner.AbstractRunner.submit_trial"]], "submit_trial() (smac.runner.daskparallelrunner method)": [[106, "smac.runner.DaskParallelRunner.submit_trial"]], "submit_trial() (smac.runner.targetfunctionrunner method)": [[106, "smac.runner.TargetFunctionRunner.submit_trial"]], "wait() (smac.runner.abstractrunner method)": [[106, "smac.runner.AbstractRunner.wait"]], "wait() (smac.runner.daskparallelrunner method)": [[106, "smac.runner.DaskParallelRunner.wait"]], "wait() (smac.runner.targetfunctionrunner method)": [[106, "smac.runner.TargetFunctionRunner.wait"]], "abstractrunner (class in smac.runner.abstract_runner)": [[107, "smac.runner.abstract_runner.AbstractRunner"]], "count_available_workers() (smac.runner.abstract_runner.abstractrunner method)": [[107, "smac.runner.abstract_runner.AbstractRunner.count_available_workers"]], "get_meta() (smac.runner.abstract_runner.abstractrunner method)": [[107, "smac.runner.abstract_runner.AbstractRunner.get_meta"]], "is_running() (smac.runner.abstract_runner.abstractrunner method)": [[107, "smac.runner.abstract_runner.AbstractRunner.is_running"]], "iter_results() (smac.runner.abstract_runner.abstractrunner method)": [[107, "smac.runner.abstract_runner.AbstractRunner.iter_results"]], "run() (smac.runner.abstract_runner.abstractrunner method)": [[107, "smac.runner.abstract_runner.AbstractRunner.run"]], "run_wrapper() (smac.runner.abstract_runner.abstractrunner method)": [[107, "smac.runner.abstract_runner.AbstractRunner.run_wrapper"]], "smac.runner.abstract_runner": [[107, "module-smac.runner.abstract_runner"]], "submit_trial() (smac.runner.abstract_runner.abstractrunner method)": [[107, "smac.runner.abstract_runner.AbstractRunner.submit_trial"]], "wait() (smac.runner.abstract_runner.abstractrunner method)": [[107, "smac.runner.abstract_runner.AbstractRunner.wait"]], "daskparallelrunner (class in smac.runner.dask_runner)": [[108, "smac.runner.dask_runner.DaskParallelRunner"]], "__del__() (smac.runner.dask_runner.daskparallelrunner method)": [[108, "smac.runner.dask_runner.DaskParallelRunner.__del__"]], "close() (smac.runner.dask_runner.daskparallelrunner method)": [[108, "smac.runner.dask_runner.DaskParallelRunner.close"]], "count_available_workers() (smac.runner.dask_runner.daskparallelrunner method)": [[108, "smac.runner.dask_runner.DaskParallelRunner.count_available_workers"]], "is_running() (smac.runner.dask_runner.daskparallelrunner method)": [[108, "smac.runner.dask_runner.DaskParallelRunner.is_running"]], "iter_results() (smac.runner.dask_runner.daskparallelrunner method)": [[108, "smac.runner.dask_runner.DaskParallelRunner.iter_results"]], "run() (smac.runner.dask_runner.daskparallelrunner method)": [[108, "smac.runner.dask_runner.DaskParallelRunner.run"]], "smac.runner.dask_runner": [[108, "module-smac.runner.dask_runner"]], "submit_trial() (smac.runner.dask_runner.daskparallelrunner method)": [[108, "smac.runner.dask_runner.DaskParallelRunner.submit_trial"]], "wait() (smac.runner.dask_runner.daskparallelrunner method)": [[108, "smac.runner.dask_runner.DaskParallelRunner.wait"]], "smac.runner.exceptions": [[109, "module-smac.runner.exceptions"]], "targetfunctionrunner (class in smac.runner.target_function_runner)": [[110, "smac.runner.target_function_runner.TargetFunctionRunner"]], "__call__() (smac.runner.target_function_runner.targetfunctionrunner method)": [[110, "smac.runner.target_function_runner.TargetFunctionRunner.__call__"]], "count_available_workers() (smac.runner.target_function_runner.targetfunctionrunner method)": [[110, "smac.runner.target_function_runner.TargetFunctionRunner.count_available_workers"]], "is_running() (smac.runner.target_function_runner.targetfunctionrunner method)": [[110, "smac.runner.target_function_runner.TargetFunctionRunner.is_running"]], "iter_results() (smac.runner.target_function_runner.targetfunctionrunner method)": [[110, "smac.runner.target_function_runner.TargetFunctionRunner.iter_results"]], "run() (smac.runner.target_function_runner.targetfunctionrunner method)": [[110, "smac.runner.target_function_runner.TargetFunctionRunner.run"]], "smac.runner.target_function_runner": [[110, "module-smac.runner.target_function_runner"]], "submit_trial() (smac.runner.target_function_runner.targetfunctionrunner method)": [[110, "smac.runner.target_function_runner.TargetFunctionRunner.submit_trial"]], "wait() (smac.runner.target_function_runner.targetfunctionrunner method)": [[110, "smac.runner.target_function_runner.TargetFunctionRunner.wait"]], "scenario (class in smac.scenario)": [[111, "smac.scenario.Scenario"]], "__post_init__() (smac.scenario.scenario method)": [[111, "smac.scenario.Scenario.__post_init__"]], "count_instance_features() (smac.scenario.scenario method)": [[111, "smac.scenario.Scenario.count_instance_features"]], "count_objectives() (smac.scenario.scenario method)": [[111, "smac.scenario.Scenario.count_objectives"]], "get_meta() (smac.scenario.scenario method)": [[111, "smac.scenario.Scenario.get_meta"]], "load() (smac.scenario.scenario static method)": [[111, "smac.scenario.Scenario.load"]], "save() (smac.scenario.scenario method)": [[111, "smac.scenario.Scenario.save"]], "smac.scenario": [[111, "module-smac.scenario"]], "smac.utils": [[112, "module-smac.utils"]], "convert_configurations_to_array() (in module smac.utils.configspace)": [[113, "smac.utils.configspace.convert_configurations_to_array"]], "get_conditional_hyperparameters() (in module smac.utils.configspace)": [[113, "smac.utils.configspace.get_conditional_hyperparameters"]], "get_types() (in module smac.utils.configspace)": [[113, "smac.utils.configspace.get_types"]], "smac.utils.configspace": [[113, "module-smac.utils.configspace"]], "recursively_compare_dicts() (in module smac.utils.data_structures)": [[114, "smac.utils.data_structures.recursively_compare_dicts"]], "smac.utils.data_structures": [[114, "module-smac.utils.data_structures"]], "format_array() (in module smac.utils.logging)": [[115, "smac.utils.logging.format_array"]], "get_logger() (in module smac.utils.logging)": [[115, "smac.utils.logging.get_logger"]], "setup_logging() (in module smac.utils.logging)": [[115, "smac.utils.logging.setup_logging"]], "smac.utils.logging": [[115, "module-smac.utils.logging"]], "normalize_costs() (in module smac.utils.multi_objective)": [[116, "smac.utils.multi_objective.normalize_costs"]], "smac.utils.multi_objective": [[116, "module-smac.utils.multi_objective"]], "smac.utils.subspaces": [[117, "module-smac.utils.subspaces"]], "smac.utils.subspaces.boing_subspace": [[118, "module-smac.utils.subspaces.boing_subspace"]], "smac.utils.subspaces.turbo_subspace": [[119, "module-smac.utils.subspaces.turbo_subspace"]], "bb": [[139, "term-BB"]], "bo": [[139, "term-BO"]], "bohb": [[139, "term-BOHB"]], "budget": [[139, "term-Budget"]], "cli": [[139, "term-CLI"]], "cv": [[139, "term-CV"]], "epm": [[139, "term-EPM"]], "gp": [[139, "term-GP"]], "gp-mcmc": [[139, "term-GP-MCMC"]], "hb": [[139, "term-HB"]], "intensification": [[139, "term-Intensification"]], "mf": [[139, "term-MF"]], "objective": [[139, "term-Objective"]], "pcs": [[139, "term-PCS"]], "rf": [[139, "term-RF"]], "roar": [[139, "term-ROAR"]], "smac": [[139, "term-SMAC"]], "tfe": [[139, "term-TFE"]], "trial": [[139, "term-Trial"]]}})