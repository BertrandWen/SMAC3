
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/schaffer_multi_objective.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_schaffer_multi_objective.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_schaffer_multi_objective.py:


Schaffer Multi-Objective
^^^^^^^^^^^^^^^^^^^^^^^^

A simple example on how to use multi-objective optimization is shown. The `schaffer` function is used.

.. GENERATED FROM PYTHON SOURCE LINES 7-83



.. image-sg:: /examples/images/sphx_glr_schaffer_multi_objective_001.png
   :alt: schaffer multi objective
   :srcset: /examples/images/sphx_glr_schaffer_multi_objective_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [INFO][initial_design.py:82] Ignoring `configs` and `n_configs_per_hyperparameter` since `n_configs` is given.
    [INFO][smbo.py:144] Running initial design...
    [INFO][initial_design.py:155] Retrieving 10 configurations for the initial design.
    [INFO][intensification.py:251] No incumbent provided in the first run. Sampling a new challenger...
    [INFO][intensification.py:450] First run and no incumbent provided. Challenger is assumed to be the incumbent.
    [INFO][intensification.py:611] Updated estimated cost of incumbent on 1 runs: 1.0
    [INFO][abstract_intensifier.py:341] Challenger (0.2843) is better than incumbent (0.2851) on 1 runs.
    [INFO][abstract_intensifier.py:361] Changes in incumbent:
    [INFO][abstract_intensifier.py:364] --- x: -0.9324859157204628 -> -0.9887294373327251
    [INFO][abstract_intensifier.py:341] Challenger (0.2558) is better than incumbent (0.2558) on 1 runs.
    [INFO][abstract_intensifier.py:361] Changes in incumbent:
    [INFO][abstract_intensifier.py:364] --- x: -0.9887294373327251 -> -0.9825740729184282
    [INFO][abstract_intensifier.py:341] Challenger (0.2558) is better than incumbent (0.2558) on 1 runs.
    [INFO][abstract_intensifier.py:361] Changes in incumbent:
    [INFO][abstract_intensifier.py:364] --- x: -0.9887294373327251 -> -0.985301164892908
    [INFO][abstract_intensifier.py:341] Challenger (0.2558) is better than incumbent (0.2558) on 1 runs.
    [INFO][abstract_intensifier.py:361] Changes in incumbent:
    [INFO][abstract_intensifier.py:364] --- x: -0.985301164892908 -> -0.9830894923668425
    [INFO][abstract_intensifier.py:341] Challenger (0.2519) is better than incumbent (0.2519) on 1 runs.
    [INFO][abstract_intensifier.py:361] Changes in incumbent:
    [INFO][abstract_intensifier.py:364] --- x: -0.9830894923668425 -> -0.9830959163823119
    [INFO][facade.py:318] Final Incumbent: {'x': -0.9830894923668425}
    [INFO][facade.py:319] Estimated cost: 0.25082343076466224






|

.. code-block:: default


    from __future__ import annotations

    from typing import Dict, Tuple

    import numpy as np
    from ConfigSpace import Configuration, ConfigurationSpace, Float
    from matplotlib import pyplot as plt

    from smac import HyperparameterFacade, Scenario
    from smac.facade import Facade
    from smac.multi_objective.aggregation_strategy import MeanAggregationStrategy

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    def schaffer(x: float) -> Tuple[float, float]:
        f1 = np.square(x)
        f2 = np.square(np.sqrt(f1) - 2)

        return f1, f2


    def target_algorithm(config: Configuration) -> Dict[str, float]:
        f1, f2 = schaffer(config["x"])
        return {"metric1": f1, "metric2": f2}


    def plot(all_x: list[float]) -> None:
        plt.figure()
        for x in all_x:
            f1, f2 = schaffer(x)
            plt.scatter(f1, f2, c="blue", alpha=0.1, zorder=3000)

        plt.vlines([1], 0, 4, linestyles="dashed", colors=["red"])
        plt.hlines([1], 0, 4, linestyles="dashed", colors=["red"])

        plt.show()


    def plot_from_smac(smac: Facade) -> None:
        rh = smac.runhistory
        all_x = []
        for runkey in rh.data.keys():
            config = rh.ids_config[runkey.config_id]
            all_x.append(config["x"])

        plot(all_x)


    if __name__ == "__main__":
        MIN_V = -2
        MAX_V = 2

        # Simple configspace
        cs = ConfigurationSpace()
        cs.add_hyperparameter(Float("x", (MIN_V, MAX_V)))

        # Scenario object
        scenario = Scenario(
            configspace=cs,
            n_trials=150,
            objectives=["metric1", "metric2"],
        )

        smac = HyperparameterFacade(
            scenario=scenario,
            target_algorithm=target_algorithm,
            multi_objective_algorithm=MeanAggregationStrategy(seed=scenario.seed),
            overwrite=True,
        )
        incumbent = smac.optimize()

        # Plot the evaluated points
        plot_from_smac(smac)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.705 seconds)


.. _sphx_glr_download_examples_schaffer_multi_objective.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: schaffer_multi_objective.py <schaffer_multi_objective.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: schaffer_multi_objective.ipynb <schaffer_multi_objective.ipynb>`
