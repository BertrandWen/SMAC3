
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/1_basics/3_ask_and_tell.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_1_basics_3_ask_and_tell.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_1_basics_3_ask_and_tell.py:


Ask-and-Tell
^^^^^^^^^^^^

This examples show how to use the Ask-and-Tell interface.

.. GENERATED FROM PYTHON SOURCE LINES 7-82




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [INFO][abstract_initial_design.py:81] Reducing the number of initial configurations from 20 to 10 (max_ratio == 0.1).
    [INFO][abstract_initial_design.py:133] Using 10 initial design and 0 additional configurations.
    [INFO][intensifier.py:275] No incumbent provided in the first run. Sampling a new challenger...
    [INFO][intensifier.py:446] First run and no incumbent provided. Challenger is assumed to be the incumbent.
    [INFO][intensifier.py:566] Updated estimated cost of incumbent on 1 trials: 1102.7878
    [INFO][abstract_intensifier.py:340] Challenger (672.0431) is better than incumbent (1102.7878) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9968221839517355 -> -0.9280337160103862
    [INFO][abstract_intensifier.py:367] --- x1: 4.30847043171525 -> 3.4464462844169503
    [INFO][abstract_intensifier.py:340] Challenger (577.2893) is better than incumbent (672.0431) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9280337160103862 -> -1.0056322624332625
    [INFO][abstract_intensifier.py:367] --- x1: 3.4464462844169503 -> 3.405595165499717
    [INFO][abstract_intensifier.py:340] Challenger (549.5494) is better than incumbent (577.2893) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0056322624332625 -> -1.049819974904303
    [INFO][abstract_intensifier.py:367] --- x1: 3.405595165499717 -> 3.437389834519399
    [INFO][abstract_intensifier.py:340] Challenger (515.137) is better than incumbent (549.5494) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.049819974904303 -> -1.0806488697311947
    [INFO][abstract_intensifier.py:367] --- x1: 3.437389834519399 -> 3.4279079101061853
    [INFO][abstract_intensifier.py:340] Challenger (455.9082) is better than incumbent (515.137) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0806488697311947 -> -1.1225582062715365
    [INFO][abstract_intensifier.py:367] --- x1: 3.4279079101061853 -> 3.3847615826114215
    [INFO][abstract_intensifier.py:340] Challenger (321.6764) is better than incumbent (455.9082) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1225582062715365 -> -1.1624900575841988
    [INFO][abstract_intensifier.py:367] --- x1: 3.3847615826114215 -> 3.131832577165838
    [INFO][abstract_intensifier.py:340] Challenger (284.5307) is better than incumbent (321.6764) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1624900575841988 -> -1.1305232296967276
    [INFO][abstract_intensifier.py:367] --- x1: 3.131832577165838 -> 2.951377612019635
    [INFO][abstract_intensifier.py:340] Challenger (171.1537) is better than incumbent (284.5307) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1305232296967276 -> -1.1301724345763176
    [INFO][abstract_intensifier.py:367] --- x1: 2.951377612019635 -> 2.5680883299060566
    [INFO][abstract_intensifier.py:340] Challenger (129.2255) is better than incumbent (171.1537) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1301724345763176 -> -1.1305232296967276
    [INFO][abstract_intensifier.py:367] --- x1: 2.5680883299060566 -> 2.394713504524164
    [INFO][abstract_intensifier.py:340] Challenger (86.9671) is better than incumbent (129.2255) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1305232296967276 -> -1.1330527305624343
    [INFO][abstract_intensifier.py:367] --- x1: 2.394713504524164 -> 2.1916474521462472
    [INFO][abstract_intensifier.py:340] Challenger (79.6939) is better than incumbent (86.9671) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1330527305624343 -> -1.1425596275387226
    [INFO][abstract_intensifier.py:367] --- x1: 2.1916474521462472 -> 2.1720640713407278
    [INFO][abstract_intensifier.py:340] Challenger (48.366) is better than incumbent (79.6939) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1425596275387226 -> -1.1301724345763176
    [INFO][abstract_intensifier.py:367] --- x1: 2.1720640713407278 -> 1.9393200274651132
    [INFO][abstract_intensifier.py:340] Challenger (30.7861) is better than incumbent (48.366) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1301724345763176 -> -1.1857998616886025
    [INFO][abstract_intensifier.py:367] --- x1: 1.9393200274651132 -> 1.916105588170888
    [INFO][abstract_intensifier.py:340] Challenger (15.2512) is better than incumbent (30.7861) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1857998616886025 -> -1.241806152528802
    [INFO][abstract_intensifier.py:367] --- x1: 1.916105588170888 -> 1.861856359341533
    [INFO][abstract_intensifier.py:340] Challenger (12.0248) is better than incumbent (15.2512) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.241806152528802 -> -1.234312961375986
    [INFO][abstract_intensifier.py:367] --- x1: 1.861856359341533 -> 1.7887191243198162
    [INFO][abstract_intensifier.py:340] Challenger (10.849) is better than incumbent (12.0248) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.234312961375986 -> -1.2394227135665097
    [INFO][abstract_intensifier.py:367] --- x1: 1.7887191243198162 -> 1.7777052610452504
    [INFO][abstract_intensifier.py:340] Challenger (5.7114) is better than incumbent (10.849) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.2394227135665097 -> -1.3149293538566407
    [INFO][abstract_intensifier.py:367] --- x1: 1.7777052610452504 -> 1.7884087089143383
    [INFO][abstract_intensifier.py:340] Challenger (5.5696) is better than incumbent (5.7114) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3149293538566407 -> -1.3213855452060277
    [INFO][abstract_intensifier.py:367] --- x1: 1.7884087089143383 -> 1.7885780062909369
    [INFO][abstract_intensifier.py:340] Challenger (5.4158) is better than incumbent (5.5696) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3213855452060277 -> -1.3220947686433067
    [INFO][abstract_intensifier.py:367] --- x1: 1.7885780062909369 -> 1.7325428043054778
    [INFO][abstract_intensifier.py:340] Challenger (5.3892) is better than incumbent (5.4158) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3220947686433067 -> -1.3172317833863247
    [INFO][abstract_intensifier.py:367] --- x1: 1.7325428043054778 -> 1.721090180196157
    [INFO][abstract_intensifier.py:340] Challenger (5.3408) is better than incumbent (5.3892) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3172317833863247 -> -1.310943449485717
    [INFO][abstract_intensifier.py:367] --- x1: 1.721090180196157 -> 1.7204885210286944
    [INFO][abstract_intensifier.py:340] Challenger (5.3344) is better than incumbent (5.3408) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.310943449485717 -> -1.3095455731182253
    [INFO][abstract_intensifier.py:367] --- x1: 1.7204885210286944 -> 1.7130394836090819
    [INFO][abstract_intensifier.py:340] Challenger (5.3186) is better than incumbent (5.3344) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3095455731182253 -> -1.3059929282720044
    [INFO][abstract_intensifier.py:367] --- x1: 1.7130394836090819 -> 1.702440099856351
    [INFO][abstract_intensifier.py:340] Challenger (5.3164) is better than incumbent (5.3186) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3059929282720044 -> -1.3049150969100642
    [INFO][abstract_intensifier.py:367] --- x1: 1.702440099856351 -> 1.7089076256586386
    [INFO][abstract_intensifier.py:340] Challenger (5.3154) is better than incumbent (5.3164) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3049150969100642 -> -1.3054095030027089
    [INFO][abstract_intensifier.py:367] --- x1: 1.7089076256586386 -> 1.7063213074431953
    [INFO][abstract_intensifier.py:340] Challenger (5.3092) is better than incumbent (5.3154) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3054095030027089 -> -1.3038285033037038
    [INFO][abstract_intensifier.py:367] --- x1: 1.7063213074431953 -> 1.7039685901427681
    [INFO][base_smbo.py:260] Configuration budget is exhausted.
    [INFO][abstract_facade.py:325] Final Incumbent: {'x0': -1.3038285033037038, 'x1': 1.7039685901427681}
    [INFO][abstract_facade.py:326] Estimated cost: 5.3092256319301505
    Default cost: 16916.0
    Default cost: 5.3092256319301505






|

.. code-block:: default


    from ConfigSpace import Configuration, ConfigurationSpace, Float

    from smac import HyperparameterOptimizationFacade, Scenario
    from smac.runhistory.dataclasses import TrialValue

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    class Rosenbrock2D:
        @property
        def configspace(self) -> ConfigurationSpace:
            cs = ConfigurationSpace(seed=0)
            x0 = Float("x0", (-5, 10), default=-3)
            x1 = Float("x1", (-5, 10), default=-4)
            cs.add_hyperparameters([x0, x1])

            return cs

        def train(self, config: Configuration, seed: int = 0) -> float:
            """The 2-dimensional Rosenbrock function as a toy model.
            The Rosenbrock function is well know in the optimization community and
            often serves as a toy problem. It can be defined for arbitrary
            dimensions. The minimium is always at x_i = 1 with a function value of
            zero. All input parameters are continuous. The search domain for
            all x's is the interval [-5, 10].
            """
            x1 = config["x0"]
            x2 = config["x1"]

            cost = 100.0 * (x2 - x1**2.0) ** 2.0 + (1 - x1) ** 2.0
            return cost


    if __name__ == "__main__":
        model = Rosenbrock2D()

        # Scenario object
        scenario = Scenario(model.configspace, deterministic=False, n_trials=100)

        intensifier = HyperparameterOptimizationFacade.get_intensifier(
            scenario,
            max_config_calls=1,  # We basically use one seed only
        )

        # Now we use SMAC to find the best hyperparameters
        smac = HyperparameterOptimizationFacade(
            scenario,
            model.train,
            intensifier=intensifier,
            overwrite=True,
        )

        # We can ask SMAC which trials should be evaluated next
        for _ in range(10):
            info = smac.ask()
            assert info.seed is not None

            cost = model.train(info.config, seed=info.seed)
            value = TrialValue(cost=cost, time=0.5)

            smac.tell(info, value)

        # After calling ask+tell, we can still optimize
        incumbent = smac.optimize()
        assert smac.stats.finished == 100

        # Get cost of default configuration
        default_cost = smac.validate(model.configspace.get_default_configuration())
        print(f"Default cost: {default_cost}")

        # Let's calculate the cost of the incumbent
        incumbent_cost = smac.validate(incumbent)
        print(f"Default cost: {incumbent_cost}")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  24.774 seconds)


.. _sphx_glr_download_examples_1_basics_3_ask_and_tell.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_ask_and_tell.py <3_ask_and_tell.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_ask_and_tell.ipynb <3_ask_and_tell.ipynb>`
