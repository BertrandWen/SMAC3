
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/1_basics/3_ask_and_tell.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_1_basics_3_ask_and_tell.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_1_basics_3_ask_and_tell.py:


Ask-and-Tell
^^^^^^^^^^^^

This examples show how to use the Ask-and-Tell interface.

.. GENERATED FROM PYTHON SOURCE LINES 7-82




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [INFO][abstract_initial_design.py:81] Reducing the number of initial configurations from 20 to 10 (max_ratio == 0.1).
    [INFO][abstract_initial_design.py:133] Using 10 initial design and 0 additional configurations.
    [INFO][intensifier.py:275] No incumbent provided in the first run. Sampling a new challenger...
    [INFO][intensifier.py:446] First run and no incumbent provided. Challenger is assumed to be the incumbent.
    [INFO][intensifier.py:566] Updated estimated cost of incumbent on 1 trials: 1102.7878
    [INFO][abstract_intensifier.py:340] Challenger (672.0431) is better than incumbent (1102.7878) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9968221839517355 -> -0.9280337160103862
    [INFO][abstract_intensifier.py:367] --- x1: 4.30847043171525 -> 3.4464462844169503
    [INFO][abstract_intensifier.py:340] Challenger (183.6784) is better than incumbent (672.0431) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9280337160103862 -> -0.9167466732085607
    [INFO][abstract_intensifier.py:367] --- x1: 3.4464462844169503 -> 2.1820819878384476
    [INFO][abstract_intensifier.py:340] Challenger (182.4884) is better than incumbent (183.6784) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9167466732085607 -> -0.9141428270293508
    [INFO][abstract_intensifier.py:367] --- x1: 2.1820819878384476 -> 2.1729097185109234
    [INFO][abstract_intensifier.py:340] Challenger (164.4657) is better than incumbent (182.4884) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9141428270293508 -> -0.9103128553040527
    [INFO][abstract_intensifier.py:367] --- x1: 2.1729097185109234 -> 2.0968037323933704
    [INFO][abstract_intensifier.py:340] Challenger (163.9262) is better than incumbent (164.4657) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9103128553040527 -> -0.910733502117334
    [INFO][abstract_intensifier.py:367] --- x1: 2.0968037323933704 -> 2.0954344738526878
    [INFO][abstract_intensifier.py:340] Challenger (92.1675) is better than incumbent (163.9262) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.910733502117334 -> -0.9006410943547403
    [INFO][abstract_intensifier.py:367] --- x1: 2.0954344738526878 -> 1.7521911779257788
    [INFO][abstract_intensifier.py:340] Challenger (89.4053) is better than incumbent (92.1675) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9006410943547403 -> -0.9099906417534438
    [INFO][abstract_intensifier.py:367] --- x1: 1.7521911779257788 -> 1.7541349483716564
    [INFO][abstract_intensifier.py:340] Challenger (43.6122) is better than incumbent (89.4053) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9099906417534438 -> -2.2476082835069278
    [INFO][abstract_intensifier.py:367] --- x1: 1.7541349483716564 -> 5.626766790256079
    [INFO][abstract_intensifier.py:340] Challenger (4.1317) is better than incumbent (43.6122) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -2.2476082835069278 -> -1.0139112945122775
    [INFO][abstract_intensifier.py:367] --- x1: 5.626766790256079 -> 1.0004718388428309
    [INFO][abstract_intensifier.py:340] Challenger (4.1121) is better than incumbent (4.1317) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0139112945122775 -> -1.027343750289238
    [INFO][abstract_intensifier.py:367] --- x1: 1.0004718388428309 -> 1.0509433415660299
    [INFO][abstract_intensifier.py:340] Challenger (4.112) is better than incumbent (4.1121) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.027343750289238 -> -1.027518101454859
    [INFO][abstract_intensifier.py:367] --- x1: 1.0509433415660299 -> 1.0592052264337992
    [INFO][abstract_intensifier.py:340] Challenger (4.1103) is better than incumbent (4.112) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.027518101454859 -> -1.027343750289238
    [INFO][abstract_intensifier.py:367] --- x1: 1.0592052264337992 -> 1.054183635677588
    [INFO][abstract_intensifier.py:340] Challenger (4.1101) is better than incumbent (4.1103) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x1: 1.054183635677588 -> 1.0550801128625462
    [INFO][abstract_intensifier.py:340] Challenger (4.109) is better than incumbent (4.1101) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.027343750289238 -> -1.027055478972768
    [INFO][abstract_intensifier.py:367] --- x1: 1.0550801128625462 -> 1.0553534080097418
    [INFO][abstract_intensifier.py:340] Challenger (4.1086) is better than incumbent (4.109) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.027055478972768 -> -1.025769513171784
    [INFO][abstract_intensifier.py:367] --- x1: 1.0553534080097418 -> 1.0592052264337992
    [INFO][abstract_intensifier.py:340] Challenger (4.1003) is better than incumbent (4.1086) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.025769513171784 -> -1.024296847729686
    [INFO][abstract_intensifier.py:367] --- x1: 1.0592052264337992 -> 1.054183635677588
    [INFO][abstract_intensifier.py:340] Challenger (4.0996) is better than incumbent (4.1003) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x1: 1.054183635677588 -> 1.0534080934475964
    [INFO][abstract_intensifier.py:340] Challenger (4.0974) is better than incumbent (4.0996) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.024296847729686 -> -1.0239191696895973
    [INFO][abstract_intensifier.py:367] --- x1: 1.0534080934475964 -> 1.0518555461001693
    [INFO][abstract_intensifier.py:340] Challenger (4.0933) is better than incumbent (4.0974) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0239191696895973 -> -1.0194705102382913
    [INFO][abstract_intensifier.py:367] --- x1: 1.0518555461001693 -> 1.0516005938129753
    [INFO][abstract_intensifier.py:340] Challenger (4.0929) is better than incumbent (4.0933) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0194705102382913 -> -1.0201287222237245
    [INFO][abstract_intensifier.py:340] Challenger (4.0904) is better than incumbent (4.0929) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0201287222237245 -> -1.0211596980010516
    [INFO][abstract_intensifier.py:367] --- x1: 1.0516005938129753 -> 1.050046298354614
    [INFO][abstract_intensifier.py:340] Challenger (4.079) is better than incumbent (4.0904) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0211596980010516 -> -1.0194705102382913
    [INFO][abstract_intensifier.py:367] --- x1: 1.050046298354614 -> 1.0366178059869986
    [INFO][abstract_intensifier.py:340] Challenger (4.0762) is better than incumbent (4.079) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0194705102382913 -> -1.0062900226992149
    [INFO][abstract_intensifier.py:367] --- x1: 1.0366178059869986 -> 1.0351941803399818
    [INFO][abstract_intensifier.py:340] Challenger (4.0546) is better than incumbent (4.0762) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0062900226992149 -> -1.0084787032360327
    [INFO][abstract_intensifier.py:367] --- x1: 1.0351941803399818 -> 1.0313914940170532
    [INFO][abstract_intensifier.py:340] Challenger (4.052) is better than incumbent (4.0546) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0084787032360327 -> -1.0099139960092165
    [INFO][abstract_intensifier.py:367] --- x1: 1.0313914940170532 -> 1.0310145943411069
    [INFO][base_smbo.py:260] Configuration budget is exhausted.
    [INFO][abstract_facade.py:325] Final Incumbent: {'x0': -1.0099139960092165, 'x1': 1.0310145943411069}
    [INFO][abstract_facade.py:326] Estimated cost: 4.052049344320529
    Default cost: 16916.0
    Default cost: 4.052049344320529






|

.. code-block:: default


    from ConfigSpace import Configuration, ConfigurationSpace, Float

    from smac import HyperparameterOptimizationFacade, Scenario
    from smac.runhistory.dataclasses import TrialValue

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    class Rosenbrock2D:
        @property
        def configspace(self) -> ConfigurationSpace:
            cs = ConfigurationSpace(seed=0)
            x0 = Float("x0", (-5, 10), default=-3)
            x1 = Float("x1", (-5, 10), default=-4)
            cs.add_hyperparameters([x0, x1])

            return cs

        def train(self, config: Configuration, seed: int = 0) -> float:
            """The 2-dimensional Rosenbrock function as a toy model.
            The Rosenbrock function is well know in the optimization community and
            often serves as a toy problem. It can be defined for arbitrary
            dimensions. The minimium is always at x_i = 1 with a function value of
            zero. All input parameters are continuous. The search domain for
            all x's is the interval [-5, 10].
            """
            x1 = config["x0"]
            x2 = config["x1"]

            cost = 100.0 * (x2 - x1**2.0) ** 2.0 + (1 - x1) ** 2.0
            return cost


    if __name__ == "__main__":
        model = Rosenbrock2D()

        # Scenario object
        scenario = Scenario(model.configspace, deterministic=False, n_trials=100)

        intensifier = HyperparameterOptimizationFacade.get_intensifier(
            scenario,
            max_config_calls=1,  # We basically use one seed only
        )

        # Now we use SMAC to find the best hyperparameters
        smac = HyperparameterOptimizationFacade(
            scenario,
            model.train,
            intensifier=intensifier,
            overwrite=True,
        )

        # We can ask SMAC which trials should be evaluated next
        for _ in range(10):
            info = smac.ask()
            assert info.seed is not None

            cost = model.train(info.config, seed=info.seed)
            value = TrialValue(cost=cost, time=0.5)

            smac.tell(info, value)

        # After calling ask+tell, we can still optimize
        incumbent = smac.optimize()
        assert smac.stats.finished == 100

        # Get cost of default configuration
        default_cost = smac.validate(model.configspace.get_default_configuration())
        print(f"Default cost: {default_cost}")

        # Let's calculate the cost of the incumbent
        incumbent_cost = smac.validate(incumbent)
        print(f"Default cost: {incumbent_cost}")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  36.524 seconds)


.. _sphx_glr_download_examples_1_basics_3_ask_and_tell.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_ask_and_tell.py <3_ask_and_tell.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_ask_and_tell.ipynb <3_ask_and_tell.ipynb>`
