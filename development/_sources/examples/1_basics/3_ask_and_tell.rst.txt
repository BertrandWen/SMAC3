
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/1_basics/3_ask_and_tell.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_1_basics_3_ask_and_tell.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_1_basics_3_ask_and_tell.py:


Ask-and-Tell
^^^^^^^^^^^^

This examples show how to use the Ask-and-Tell interface.

.. GENERATED FROM PYTHON SOURCE LINES 7-82




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [INFO][abstract_initial_design.py:81] Reducing the number of initial configurations from 20 to 10 (max_ratio == 0.1).
    [INFO][abstract_initial_design.py:133] Using 10 initial design and 0 additional configurations.
    [INFO][intensifier.py:275] No incumbent provided in the first run. Sampling a new challenger...
    [INFO][intensifier.py:446] First run and no incumbent provided. Challenger is assumed to be the incumbent.
    [INFO][intensifier.py:566] Updated estimated cost of incumbent on 1 trials: 1102.7878
    [INFO][abstract_intensifier.py:340] Challenger (1030.5108) is better than incumbent (1102.7878) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9968221839517355 -> -1.0050819604859953
    [INFO][abstract_intensifier.py:367] --- x1: 4.30847043171525 -> 4.214078677591237
    [INFO][abstract_intensifier.py:340] Challenger (1030.3403) is better than incumbent (1030.5108) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0050819604859953 -> -1.0115764307634985
    [INFO][abstract_intensifier.py:367] --- x1: 4.214078677591237 -> 4.226868973678995
    [INFO][abstract_intensifier.py:340] Challenger (1029.6575) is better than incumbent (1030.3403) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0115764307634985 -> -1.0153668674513332
    [INFO][abstract_intensifier.py:367] --- x1: 4.226868973678995 -> 4.2334622705046385
    [INFO][abstract_intensifier.py:340] Challenger (906.3424) is better than incumbent (1029.6575) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0153668674513332 -> -1.1068110454473885
    [INFO][abstract_intensifier.py:367] --- x1: 4.2334622705046385 -> 4.228201966969996
    [INFO][abstract_intensifier.py:340] Challenger (841.6085) is better than incumbent (906.3424) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1068110454473885 -> -1.1559487058818716
    [INFO][abstract_intensifier.py:367] --- x1: 4.228201966969996 -> 4.2292441436411075
    [INFO][abstract_intensifier.py:340] Challenger (121.8089) is better than incumbent (841.6085) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1559487058818716 -> -1.1690249871673575
    [INFO][abstract_intensifier.py:367] --- x1: 4.2292441436411075 -> 2.4487665223404402
    [INFO][abstract_intensifier.py:340] Challenger (57.7093) is better than incumbent (121.8089) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1690249871673575 -> -1.15119582791161
    [INFO][abstract_intensifier.py:367] --- x1: 2.4487665223404402 -> 2.053823258122269
    [INFO][abstract_intensifier.py:340] Challenger (50.1116) is better than incumbent (57.7093) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.15119582791161 -> -1.1743589933567415
    [INFO][abstract_intensifier.py:367] --- x1: 2.053823258122269 -> 2.0527940068959456
    [INFO][abstract_intensifier.py:340] Challenger (19.8277) is better than incumbent (50.1116) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.1743589933567415 -> -1.2700603974764215
    [INFO][abstract_intensifier.py:367] --- x1: 2.0527940068959456 -> 1.9961272440010491
    [INFO][abstract_intensifier.py:340] Challenger (9.5072) is better than incumbent (19.8277) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.2700603974764215 -> -1.2780063561647759
    [INFO][abstract_intensifier.py:367] --- x1: 1.9961272440010491 -> 1.84109646958603
    [INFO][abstract_intensifier.py:340] Challenger (6.5554) is better than incumbent (9.5072) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.2780063561647759 -> -1.276153783888566
    [INFO][abstract_intensifier.py:367] --- x1: 1.84109646958603 -> 1.7458064535654758
    [INFO][abstract_intensifier.py:340] Challenger (5.4122) is better than incumbent (6.5554) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.276153783888566 -> -1.3157136312087165
    [INFO][abstract_intensifier.py:367] --- x1: 1.7458064535654758 -> 1.7533904200943384
    [INFO][abstract_intensifier.py:340] Challenger (5.3767) is better than incumbent (5.4122) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3157136312087165 -> -1.3180686682974048
    [INFO][abstract_intensifier.py:367] --- x1: 1.7533904200943384 -> 1.7430314855716968
    [INFO][abstract_intensifier.py:340] Challenger (2.8767) is better than incumbent (5.3767) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.3180686682974048 -> 0.03339964574006782
    [INFO][abstract_intensifier.py:367] --- x1: 1.7430314855716968 -> 0.14048599749913748
    [INFO][abstract_intensifier.py:340] Challenger (2.8459) is better than incumbent (2.8767) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.03339964574006782 -> 0.07130252963395645
    [INFO][abstract_intensifier.py:367] --- x1: 0.14048599749913748 -> -0.13574912023890917
    [INFO][abstract_intensifier.py:340] Challenger (1.8436) is better than incumbent (2.8459) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.07130252963395645 -> 0.06101266048502296
    [INFO][abstract_intensifier.py:367] --- x1: -0.13574912023890917 -> -0.09435388992853166
    [INFO][abstract_intensifier.py:340] Challenger (1.2889) is better than incumbent (1.8436) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.06101266048502296 -> 0.08006919670316481
    [INFO][abstract_intensifier.py:367] --- x1: -0.09435388992853166 -> -0.060121335133104914
    [INFO][abstract_intensifier.py:340] Challenger (1.0435) is better than incumbent (1.2889) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.08006919670316481 -> 0.0632235137475412
    [INFO][abstract_intensifier.py:367] --- x1: -0.060121335133104914 -> -0.03673754660885198
    [INFO][abstract_intensifier.py:340] Challenger (1.0297) is better than incumbent (1.0435) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.0632235137475412 -> 0.06706255884595791
    [INFO][abstract_intensifier.py:367] --- x1: -0.03673754660885198 -> -0.035417214180201384
    [INFO][abstract_intensifier.py:340] Challenger (0.9798) is better than incumbent (1.0297) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.06706255884595791 -> 0.06695370090948227
    [INFO][abstract_intensifier.py:367] --- x1: -0.035417214180201384 -> -0.028569762159776246
    [INFO][base_smbo.py:260] Configuration budget is exhausted.
    [INFO][abstract_facade.py:325] Final Incumbent: {'x0': 0.06695370090948227, 'x1': -0.028569762159776246}
    [INFO][abstract_facade.py:326] Estimated cost: 0.9798225699909071
    Default cost: 16916.0
    Default cost: 0.9798225699909071






|

.. code-block:: default


    from ConfigSpace import Configuration, ConfigurationSpace, Float

    from smac import HyperparameterOptimizationFacade, Scenario
    from smac.runhistory.dataclasses import TrialValue

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    class Rosenbrock2D:
        @property
        def configspace(self) -> ConfigurationSpace:
            cs = ConfigurationSpace(seed=0)
            x0 = Float("x0", (-5, 10), default=-3)
            x1 = Float("x1", (-5, 10), default=-4)
            cs.add_hyperparameters([x0, x1])

            return cs

        def train(self, config: Configuration, seed: int = 0) -> float:
            """The 2-dimensional Rosenbrock function as a toy model.
            The Rosenbrock function is well know in the optimization community and
            often serves as a toy problem. It can be defined for arbitrary
            dimensions. The minimium is always at x_i = 1 with a function value of
            zero. All input parameters are continuous. The search domain for
            all x's is the interval [-5, 10].
            """
            x1 = config["x0"]
            x2 = config["x1"]

            cost = 100.0 * (x2 - x1**2.0) ** 2.0 + (1 - x1) ** 2.0
            return cost


    if __name__ == "__main__":
        model = Rosenbrock2D()

        # Scenario object
        scenario = Scenario(model.configspace, deterministic=False, n_trials=100)

        intensifier = HyperparameterOptimizationFacade.get_intensifier(
            scenario,
            max_config_calls=1,  # We basically use one seed only
        )

        # Now we use SMAC to find the best hyperparameters
        smac = HyperparameterOptimizationFacade(
            scenario,
            model.train,
            intensifier=intensifier,
            overwrite=True,
        )

        # We can ask SMAC which trials should be evaluated next
        for _ in range(10):
            info = smac.ask()
            assert info.seed is not None

            cost = model.train(info.config, seed=info.seed)
            value = TrialValue(cost=cost, time=0.5)

            smac.tell(info, value)

        # After calling ask+tell, we can still optimize
        incumbent = smac.optimize()
        assert smac.stats.finished == 100

        # Get cost of default configuration
        default_cost = smac.validate(model.configspace.get_default_configuration())
        print(f"Default cost: {default_cost}")

        # Let's calculate the cost of the incumbent
        incumbent_cost = smac.validate(incumbent)
        print(f"Default cost: {incumbent_cost}")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.178 seconds)


.. _sphx_glr_download_examples_1_basics_3_ask_and_tell.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_ask_and_tell.py <3_ask_and_tell.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_ask_and_tell.ipynb <3_ask_and_tell.ipynb>`
