
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/1_basics/3_ask_and_tell.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_1_basics_3_ask_and_tell.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_1_basics_3_ask_and_tell.py:


Ask-and-Tell
^^^^^^^^^^^^

This examples show how to use the Ask-and-Tell interface.

.. GENERATED FROM PYTHON SOURCE LINES 7-82




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [INFO][abstract_initial_design.py:81] Reducing the number of initial configurations from 20 to 10 (max_ratio == 0.1).
    [INFO][abstract_initial_design.py:133] Using 10 initial design and 0 additional configurations.
    [INFO][intensifier.py:275] No incumbent provided in the first run. Sampling a new challenger...
    [INFO][intensifier.py:446] First run and no incumbent provided. Challenger is assumed to be the incumbent.
    [INFO][intensifier.py:566] Updated estimated cost of incumbent on 1 trials: 1102.7878
    [INFO][abstract_intensifier.py:340] Challenger (700.6438) is better than incumbent (1102.7878) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.9968221839517355 -> -0.0801787059894652
    [INFO][abstract_intensifier.py:367] --- x1: 4.30847043171525 -> 2.6511913893559456
    [INFO][abstract_intensifier.py:340] Challenger (534.1655) is better than incumbent (700.6438) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.0801787059894652 -> -0.3416789574692718
    [INFO][abstract_intensifier.py:367] --- x1: 2.6511913893559456 -> 2.42404890638365
    [INFO][abstract_intensifier.py:340] Challenger (496.3762) is better than incumbent (534.1655) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.3416789574692718 -> -0.28608844463719496
    [INFO][abstract_intensifier.py:367] --- x1: 2.42404890638365 -> 2.3060816617693796
    [INFO][abstract_intensifier.py:340] Challenger (298.9921) is better than incumbent (496.3762) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.28608844463719496 -> -0.3271574222093152
    [INFO][abstract_intensifier.py:367] --- x1: 2.3060816617693796 -> 1.8310701115610293
    [INFO][abstract_intensifier.py:340] Challenger (52.6661) is better than incumbent (298.9921) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.3271574222093152 -> -1.0574101478292501
    [INFO][abstract_intensifier.py:367] --- x1: 1.8310701115610293 -> 1.81405586187556
    [INFO][abstract_intensifier.py:340] Challenger (47.5261) is better than incumbent (52.6661) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.0574101478292501 -> -1.091071128530627
    [INFO][abstract_intensifier.py:367] --- x1: 1.81405586187556 -> 1.8473492763822659
    [INFO][abstract_intensifier.py:340] Challenger (37.5225) is better than incumbent (47.5261) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -1.091071128530627 -> -0.14485910843402294
    [INFO][abstract_intensifier.py:367] --- x1: 1.8473492763822659 -> 0.6227465597142388
    [INFO][abstract_intensifier.py:340] Challenger (2.2969) is better than incumbent (37.5225) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: -0.14485910843402294 -> 0.8571083577023701
    [INFO][abstract_intensifier.py:367] --- x1: 0.6227465597142388 -> 0.5837542285833779
    [INFO][abstract_intensifier.py:340] Challenger (2.0091) is better than incumbent (2.2969) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.8571083577023701 -> 0.8523808632155205
    [INFO][abstract_intensifier.py:367] --- x1: 0.5837542285833779 -> 0.5855804370715116
    [INFO][abstract_intensifier.py:340] Challenger (0.8805) is better than incumbent (2.0091) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.8523808632155205 -> 0.8282799604292617
    [INFO][abstract_intensifier.py:367] --- x1: 0.5855804370715116 -> 0.5937954884699321
    [INFO][abstract_intensifier.py:340] Challenger (0.7962) is better than incumbent (0.8805) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.8282799604292617 -> 0.8239155099649702
    [INFO][abstract_intensifier.py:367] --- x1: 0.5937954884699321 -> 0.5913614425663436
    [INFO][abstract_intensifier.py:340] Challenger (0.0966) is better than incumbent (0.7962) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.8239155099649702 -> 0.8164779430332674
    [INFO][abstract_intensifier.py:367] --- x1: 0.5913614425663436 -> 0.6917259355509353
    [INFO][abstract_intensifier.py:340] Challenger (0.0676) is better than incumbent (0.0966) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.8164779430332674 -> 0.8102084746659814
    [INFO][abstract_intensifier.py:367] --- x1: 0.6917259355509353 -> 0.6742171439313385
    [INFO][abstract_intensifier.py:340] Challenger (0.066) is better than incumbent (0.0676) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.8102084746659814 -> 0.8110532622741715
    [INFO][abstract_intensifier.py:367] --- x1: 0.6742171439313385 -> 0.6403994181685118
    [INFO][abstract_intensifier.py:340] Challenger (0.039) is better than incumbent (0.066) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.8110532622741715 -> 0.8111806798224528
    [INFO][abstract_intensifier.py:367] --- x1: 0.6403994181685118 -> 0.6522627014998603
    [INFO][abstract_intensifier.py:340] Challenger (0.0363) is better than incumbent (0.039) on 1 trials.
    [INFO][abstract_intensifier.py:364] Changes in incumbent:
    [INFO][abstract_intensifier.py:367] --- x0: 0.8111806798224528 -> 0.8102084746659814
    [INFO][abstract_intensifier.py:367] --- x1: 0.6522627014998603 -> 0.6548387613800859
    [INFO][base_smbo.py:260] Configuration budget is exhausted.
    [INFO][abstract_facade.py:325] Final Incumbent: {'x0': 0.8102084746659814, 'x1': 0.6548387613800859}
    [INFO][abstract_facade.py:326] Estimated cost: 0.036276506719374435
    Default cost: 16916.0
    Default cost: 0.036276506719374435






|

.. code-block:: default


    from ConfigSpace import Configuration, ConfigurationSpace, Float

    from smac import HyperparameterOptimizationFacade, Scenario
    from smac.runhistory.dataclasses import TrialValue

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    class Rosenbrock2D:
        @property
        def configspace(self) -> ConfigurationSpace:
            cs = ConfigurationSpace(seed=0)
            x0 = Float("x0", (-5, 10), default=-3)
            x1 = Float("x1", (-5, 10), default=-4)
            cs.add_hyperparameters([x0, x1])

            return cs

        def train(self, config: Configuration, seed: int = 0) -> float:
            """The 2-dimensional Rosenbrock function as a toy model.
            The Rosenbrock function is well know in the optimization community and
            often serves as a toy problem. It can be defined for arbitrary
            dimensions. The minimium is always at x_i = 1 with a function value of
            zero. All input parameters are continuous. The search domain for
            all x's is the interval [-5, 10].
            """
            x1 = config["x0"]
            x2 = config["x1"]

            cost = 100.0 * (x2 - x1**2.0) ** 2.0 + (1 - x1) ** 2.0
            return cost


    if __name__ == "__main__":
        model = Rosenbrock2D()

        # Scenario object
        scenario = Scenario(model.configspace, deterministic=False, n_trials=100)

        intensifier = HyperparameterOptimizationFacade.get_intensifier(
            scenario,
            max_config_calls=1,  # We basically use one seed only
        )

        # Now we use SMAC to find the best hyperparameters
        smac = HyperparameterOptimizationFacade(
            scenario,
            model.train,
            intensifier=intensifier,
            overwrite=True,
        )

        # We can ask SMAC which trials should be evaluated next
        for _ in range(10):
            info = smac.ask()
            assert info.seed is not None

            cost = model.train(info.config, seed=info.seed)
            value = TrialValue(cost=cost, time=0.5)

            smac.tell(info, value)

        # After calling ask+tell, we can still optimize
        incumbent = smac.optimize()
        assert smac.stats.finished == 100

        # Get cost of default configuration
        default_cost = smac.validate(model.configspace.get_default_configuration())
        print(f"Default cost: {default_cost}")

        # Let's calculate the cost of the incumbent
        incumbent_cost = smac.validate(incumbent)
        print(f"Default cost: {incumbent_cost}")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  31.270 seconds)


.. _sphx_glr_download_examples_1_basics_3_ask_and_tell.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_ask_and_tell.py <3_ask_and_tell.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_ask_and_tell.ipynb <3_ask_and_tell.ipynb>`
