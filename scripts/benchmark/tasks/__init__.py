import numpy as np
from benchmark.datasets.digits import DigitsDataset
from benchmark.models.svm import SVMModel
from benchmark.models.mlp import MLPModel
from benchmark.models.himmelblau import HimmelblauModel
from benchmark.tasks.task import Task
from benchmark.datasets.breast_cancer import BreastCancerDataset


tasks = [
    ######## Himmelblau ########
    Task(
        name="Himmelblau (Blackbox)",
        model=HimmelblauModel(),
        deterministic=True,
        objectives=["cost"],
        optimization_type="bb",
        n_trials=100,
        walltime_limit=np.inf,
        retrain_after=1,
        max_config_calls=1,
    ),
    # Task(
    #     name="Himmelblau (HPO)",
    #     model=HimmelblauModel(),
    #     deterministic=True,
    #     objectives=["cost"],
    #     optimization_type="hpo",
    #     n_trials=100,
    #     walltime_limit=np.inf,
    #     retrain_after=1,
    #     max_config_calls=1,
    # ),
    # Task(
    #     name="Himmelblau (HPO, retrain after 8 trials)",
    #     model=HimmelblauModel(),
    #     deterministic=True,
    #     objectives=["cost"],
    #     optimization_type="hpo",
    #     n_trials=100,
    #     walltime_limit=np.inf,
    #     retrain_after=8,
    #     max_config_calls=1,
    # ),
    # ######## SVM-Digits ########
    # Task(
    #     name="SVM-Digits",
    #     model=SVMModel(DigitsDataset()),
    #     deterministic=False,
    #     objectives=["1-accuracy"],
    #     optimization_type="hpo",
    #     n_trials=100,
    #     walltime_limit=np.inf,
    #     use_instances=True,
    #     retrain_after=1,
    #     max_config_calls=100,
    # ),
    # Task(
    #     name="SVM-Digits (HB)",
    #     model=SVMModel(DigitsDataset()),
    #     deterministic=False,
    #     objectives=["1-accuracy"],
    #     optimization_type="mf",
    #     n_trials=100,
    #     walltime_limit=np.inf,
    #     use_instances=True,
    #     min_budget=10,
    #     max_budget=90,
    #     retrain_after=1,
    #     incumbent_selection="highest_observed_budget",
    #     n_seeds=2,
    # ),
    # Task(
    #     name="SVM-Digits (HB, retrain after 8 trials)",
    #     model=SVMModel(DigitsDataset()),
    #     deterministic=False,
    #     objectives=["1-accuracy"],
    #     optimization_type="mf",
    #     n_trials=100,
    #     walltime_limit=np.inf,
    #     use_instances=True,
    #     min_budget=10,
    #     max_budget=90,
    #     retrain_after=8,
    #     incumbent_selection="highest_observed_budget",
    #     n_seeds=2,
    # ),
    # ######## Multi-Fidelity ########
    # Task(
    #     name="MLP-BreastCancer (HB)",
    #     model=MLPModel(BreastCancerDataset()),
    #     deterministic=False,
    #     objectives=["1-accuracy"],
    #     optimization_type="mf",
    #     min_budget=1,
    #     max_budget=25,
    #     n_trials=99999999,
    #     walltime_limit=120,
    #     retrain_after=1,
    #     n_seeds=1,
    #     incumbent_selection="highest_budget",
    # ),
    # Task(
    #     name="MLP-BreastCancer (HB, retrain after 8 trials)",
    #     model=MLPModel(BreastCancerDataset()),
    #     deterministic=False,
    #     objectives=["1-accuracy"],
    #     optimization_type="mf",
    #     min_budget=1,
    #     max_budget=25,
    #     n_trials=99999999,
    #     walltime_limit=120,
    #     retrain_after=8,
    #     n_seeds=1,
    #     incumbent_selection="highest_budget",
    # ),
    # Task(
    #     name="MLP-BreastCancer (HB, 8 workers)",
    #     model=MLPModel(BreastCancerDataset()),
    #     deterministic=False,
    #     objectives=["1-accuracy"],
    #     optimization_type="mf",
    #     min_budget=1,
    #     max_budget=25,
    #     n_trials=99999999,
    #     walltime_limit=120,
    #     retrain_after=1,
    #     n_seeds=1,
    #     incumbent_selection="highest_budget",
    #     n_workers=8,
    # ),
]
